{
    "docs": [
        {
            "location": "/", 
            "text": "DIYElectronics Store\n\n\nDIYElectronics Store\n\n\n\n\n\n\n\n\n\n\n\n\nDIYElectronics is commited as a company to provide you with the widest range of electronics to suit your professional or hobby needs. We understand that good electronics is important to any project,\nwe also understand that every new project brings a host of new challenges. That is why we have created this WIKI for you, to help you in your projects, whether you are buying your first 3d printer\nor building a rocket to the moon, our aim is to make every step of your creative journey just a little bit easier.\n\n\n\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{font-family:Arial, sans-serif;font-size:14px;padding:1px 1px;border-style:solid;border-width:3px;overflow:hidden;word-break:normal;text-align:center}\n.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:1px 1px;border-style:solid;border-width:3px;overflow:hidden;word-break:normal;}\n.tg .tg-h25t{font-size:18px;font-family:\"Times New Roman\", Times, sans-serif !important;background-color:#52b848;text-align:center;vertical-align:top, ; color:#ffffff;}\n.tg .tg-baqh{text-align:center;vertical-align:top}\n.tg .tg-yw4l{vertical-align:top}\n\n\n\n\n\n  \n\n    \nDIYElectronics\n\n    \nAnycubic\n\n    \nTevo\n\n    \nCreality\n\n    \nWanhao\n\n  \n\n  \n\n    \n\n    \n\n    \n\n    \n\n    \n\n  \n\n  \n\n    \nDIY Prusa I3\n\n    \nAncyubic I3 Mega\n\n    \nTevo  Tarantula\n\n    \nCreality CR10\n\n    \nDuplicator I3 \n\n  \n\n  \n\n    \nDIY Prusa I3 plus\n\n    \nAnycubic Kossel Delta\n\n    \nTevo Little Monster\n\n    \nCreality CR10S\n\n    \nDuplicator 7\n\n  \n\n  \n\n    \nSee More >>>\n\n    \nSee More >>>\n\n    \nSee More >>>\n\n    \nSee More >>>\n\n    \nSee More >>>\n\n  \n\n\n\n\n\n\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}\n.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}\n.tg .tg-4mlq{font-size:18px;font-family:\"Times New Roman\", Times, serif !important;;background-color:#52b848; color:#ffffff;}\n.tg .tg-92nf{font-size:18px;font-family:\"Times New Roman\", Times, serif !important;;background-color:#52b848;vertical-align:top}\n.tg .tg-yw4l{vertical-align:top}\n\n\n\n\n\n  \n\n    \nArduino\n\n  \n\n  \n\n    \n\n  \n\n    \n\n    \nArduino101\n\n  \n\n  \n\n    \nRAMPS programming Guide\n\n  \n\n    \nArduino Alphabot Guide\n\n  \n\n\n\n\n\n\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}\n.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}\n.tg .tg-m1sd{font-size:18px;font-weight:normal;font-family:\"Times New Roman\", Times, serif !important;;background-color:#52b848; color:#ffffff;}\n.tg .tg-yw4l{vertical-align:top}\n\n\n\n\n\n  \n\n    \nKits\n\n  \n\n  \n\n    \n\n  \n\n  \n\n    \n2WD robot car Guide\n\n  \n\n    \nArduino Alphabot Guide", 
            "title": "Home"
        }, 
        {
            "location": "/3DPrinters/DIYPrinters/DIYoverview/", 
            "text": "Background\n\n\nDIYElectronics started in 2013 and has blossomed in to the company you know today. \nDIY started with an idea for a Prusa i3 and a handful of electronics. Our engineers knew the importance of innovation, open source and creating a product that can be called proudly South African.\nWe at DIY are confident in our printer designs and therefore supply our costumers with support and guidance through their 3d printing experience.\n\n\n3D Printers\n\n\n \nDIYElectronics Prusa I3\n \n\n\n \nDIYElectronics Prusa I3 Premium", 
            "title": "DIYElectronics Overview"
        }, 
        {
            "location": "/3DPrinters/DIYPrinters/DIYoverview/#background", 
            "text": "DIYElectronics started in 2013 and has blossomed in to the company you know today. \nDIY started with an idea for a Prusa i3 and a handful of electronics. Our engineers knew the importance of innovation, open source and creating a product that can be called proudly South African.\nWe at DIY are confident in our printer designs and therefore supply our costumers with support and guidance through their 3d printing experience.", 
            "title": "Background"
        }, 
        {
            "location": "/3DPrinters/DIYPrinters/DIYoverview/#3d-printers", 
            "text": "DIYElectronics Prusa I3      DIYElectronics Prusa I3 Premium", 
            "title": "3D Printers"
        }, 
        {
            "location": "/3DPrinters/DIYPrinters/builddoc/", 
            "text": "Navigation Guide to our I3 build docs\n\n\nFirst step to your 3D printer is the mechanical assembly and CharlStruder assembly.\nIf you have the auto-bed-leveling upgrade you will also need to look at The Auto bed leveling manual.\nLastly install your electronics and software.\n\n\nNote\n:\n\n\n\n\n\n\nYour electronics come tested and configured with the correct firmware and there\nis NO need to flash your Arduino yourself.\n\n\n\n\n\n\nWhen heating your hotend for the first time tighten all parts due to heat-expansion.\n\n\n\n\n\n\nFor printing ABS get some acetone and decant into a glass jar, say 3cm or so.\nCut 50cm of abs filament into pieces and add to acetone. Mix until dissolved.\nPaint this on the heat bed before heating when preparing to print. Also purchase\na paint scraper and sharpen the edge. When removing prints use this and a\nsmall hammer to prise print off the bed.\n\n\n\n\n\n\nBuild Documentation\n\n\n\n\nI3 Mechanical assembly guide\n\n\nCharlStruder assembly guide\n\n\nI3 Electronics and Software guide\n\n\nI3 Auto-leveling manual\n\n\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4/0.5mm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nHot Bed Temperature\n\n\n100\u00b0C max\n\n\n\n\n\n\nSystem\n\n\nRAMPS 1.4\n\n\n\n\n\n\nPower Supply\n\n\n240W\n\n\n\n\n\n\nPrint Speed\n\n\n100mm/s max\n\n\n\n\n\n\nLayer Thickness\n\n\n0.025mm - 0.5mm\n\n\n\n\n\n\nSD-Card Support\n\n\nyes\n\n\n\n\n\n\nMax. Resolution\n\n\n0.01mm\n\n\n\n\n\n\nPrinting Software\n\n\nMarlin Firmware supported by Cura, Simplify3D, \n Repetier-Host and many more slicers\n\n\n\n\n\n\nLanguage\n\n\nEnglish", 
            "title": "Prusa i3"
        }, 
        {
            "location": "/3DPrinters/DIYPrinters/builddoc/#navigation-guide-to-our-i3-build-docs", 
            "text": "First step to your 3D printer is the mechanical assembly and CharlStruder assembly.\nIf you have the auto-bed-leveling upgrade you will also need to look at The Auto bed leveling manual.\nLastly install your electronics and software.  Note :    Your electronics come tested and configured with the correct firmware and there\nis NO need to flash your Arduino yourself.    When heating your hotend for the first time tighten all parts due to heat-expansion.    For printing ABS get some acetone and decant into a glass jar, say 3cm or so.\nCut 50cm of abs filament into pieces and add to acetone. Mix until dissolved.\nPaint this on the heat bed before heating when preparing to print. Also purchase\na paint scraper and sharpen the edge. When removing prints use this and a\nsmall hammer to prise print off the bed.", 
            "title": "Navigation Guide to our I3 build docs"
        }, 
        {
            "location": "/3DPrinters/DIYPrinters/builddoc/#build-documentation", 
            "text": "I3 Mechanical assembly guide  CharlStruder assembly guide  I3 Electronics and Software guide  I3 Auto-leveling manual", 
            "title": "Build Documentation"
        }, 
        {
            "location": "/3DPrinters/DIYPrinters/builddoc/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4/0.5mm    Filament Diameter  1.75mm    Hot Bed Temperature  100\u00b0C max    System  RAMPS 1.4    Power Supply  240W    Print Speed  100mm/s max    Layer Thickness  0.025mm - 0.5mm    SD-Card Support  yes    Max. Resolution  0.01mm    Printing Software  Marlin Firmware supported by Cura, Simplify3D,   Repetier-Host and many more slicers    Language  English", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/DIYPrinters/builddocprem/", 
            "text": "Build Documentation\n\n\n\n\nDIY I3 Premium Mechanical guide\n\n\nI3 Electronics and Software guide\n\n\nCharlStruder assembly guide\n\n\nI3 Auto-leveling manual\n\n\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4/0.5mm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nHot Bed Temperature\n\n\n100\u00b0C max\n\n\n\n\n\n\nSystem\n\n\nRAMPS 1.4\n\n\n\n\n\n\nPower Supply\n\n\n240W\n\n\n\n\n\n\nPrint Speed\n\n\n100mm/s max\n\n\n\n\n\n\nLayer Thickness\n\n\n0.025mm - 0.5mm\n\n\n\n\n\n\nSD-Card Support\n\n\nyes\n\n\n\n\n\n\nMax. Resolution\n\n\n0.01mm\n\n\n\n\n\n\nPrinting Software\n\n\nMarlin Firmware supported by Cura, Simplify3D, \n Repetier-Host and many more slicers\n\n\n\n\n\n\nLanguage\n\n\nEnglish", 
            "title": "Prusa i3 Premium"
        }, 
        {
            "location": "/3DPrinters/DIYPrinters/builddocprem/#build-documentation", 
            "text": "DIY I3 Premium Mechanical guide  I3 Electronics and Software guide  CharlStruder assembly guide  I3 Auto-leveling manual", 
            "title": "Build Documentation"
        }, 
        {
            "location": "/3DPrinters/DIYPrinters/builddocprem/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4/0.5mm    Filament Diameter  1.75mm    Hot Bed Temperature  100\u00b0C max    System  RAMPS 1.4    Power Supply  240W    Print Speed  100mm/s max    Layer Thickness  0.025mm - 0.5mm    SD-Card Support  yes    Max. Resolution  0.01mm    Printing Software  Marlin Firmware supported by Cura, Simplify3D,   Repetier-Host and many more slicers    Language  English", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Wanhao/Wanhaooverview/", 
            "text": "Background\n\n\nWanhao has been one of the biggest competitors in the 3D printer industry since 2011 and it is easy to see why. \nWanhao printers are a large favourite amongst hobbyist due to it's ease of use and quality prints.\n\n\n3D Printers\n\n\n \nWanhao I3\n \n\n\n \nWanhao I3 plus\n \n\n\n \nWanhao I3 Mini\n \n\n\n \nWanhao D6\n \n\n\n \nWanhao D6 Plus\n \n\n\n \nWanhao D7\n \n\n\n \nWanhao D7 plus\n \n\n\n \nWanhao D9", 
            "title": "Wanhao Overview"
        }, 
        {
            "location": "/3DPrinters/Wanhao/Wanhaooverview/#background", 
            "text": "Wanhao has been one of the biggest competitors in the 3D printer industry since 2011 and it is easy to see why. \nWanhao printers are a large favourite amongst hobbyist due to it's ease of use and quality prints.", 
            "title": "Background"
        }, 
        {
            "location": "/3DPrinters/Wanhao/Wanhaooverview/#3d-printers", 
            "text": "Wanhao I3      Wanhao I3 plus      Wanhao I3 Mini      Wanhao D6      Wanhao D6 Plus      Wanhao D7      Wanhao D7 plus      Wanhao D9", 
            "title": "3D Printers"
        }, 
        {
            "location": "/3DPrinters/Wanhao/builddocplus/", 
            "text": "About\n\n\nThe Wanhao Duplicator I3 plus equipped with a heated bed plate and a wanhao Adhesive Sheet, is the upgrade from the Wanhao i3 V2. \n\n\nSpecifications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrint Technology\n\n\nFused Filament Fabrication (FFF)\n\n\n\n\n\n\nBuild Volume\n\n\n200 x 200 x 180mm\n\n\n\n\n\n\nLayer Resolution\n\n\n0.1 \u2013 0.4mm\n\n\n\n\n\n\nExtruder Quantity\n\n\nSingle Extruder\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nPrint Speed\n\n\n10mm/s - 70mm/s\n\n\n\n\n\n\nSupported Print Materials\n\n\nWANHAO Branded PLA, ABS, PVA, HIPS, Wood, Flex, Conductive\n\n\n\n\n\n\nOperational Extruder Temperature\n\n\n170\u00b0C - 240\u00b0C\n\n\n\n\n\n\nSlicer Software\n\n\nCura Wanhao Edition 15.04\n\n\n\n\n\n\nCura Input Formats\n\n\n.STL, .OBJ, .DAE, .AMF\n\n\n\n\n\n\nConnectivity\n\n\nSD Card, USB port (Expert users only)\n\n\n\n\n\n\nInput Rating\n\n\n100-240V AC, 50/60Hz, 3.5A\n\n\n\n\n\n\nPrinter Frame Dimensions\n\n\n400 x 410 x 400mm\n\n\n\n\n\n\n\n\nUser Manual\n\n\n\n\nI3 plus Wanhao User manual", 
            "title": "Wanhao i3 Plus"
        }, 
        {
            "location": "/3DPrinters/Wanhao/builddocplus/#about", 
            "text": "The Wanhao Duplicator I3 plus equipped with a heated bed plate and a wanhao Adhesive Sheet, is the upgrade from the Wanhao i3 V2.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Wanhao/builddocplus/#specifications", 
            "text": "Print Technology  Fused Filament Fabrication (FFF)    Build Volume  200 x 200 x 180mm    Layer Resolution  0.1 \u2013 0.4mm    Extruder Quantity  Single Extruder    Nozzle Diameter  0.4mm    Print Speed  10mm/s - 70mm/s    Supported Print Materials  WANHAO Branded PLA, ABS, PVA, HIPS, Wood, Flex, Conductive    Operational Extruder Temperature  170\u00b0C - 240\u00b0C    Slicer Software  Cura Wanhao Edition 15.04    Cura Input Formats  .STL, .OBJ, .DAE, .AMF    Connectivity  SD Card, USB port (Expert users only)    Input Rating  100-240V AC, 50/60Hz, 3.5A    Printer Frame Dimensions  400 x 410 x 400mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Wanhao/builddocplus/#user-manual", 
            "text": "I3 plus Wanhao User manual", 
            "title": "User Manual"
        }, 
        {
            "location": "/3DPrinters/Wanhao/Duplicatori3plus/", 
            "text": "About\n\n\nA robust and economical version of the Prusa i3, this machine is a great machine for a beginner. The printer comes in a fully assembled steel frame. The Duplicator i3 comes equipped with a cooling fan, gcode based micro-controller and a standard Heated Build Plate.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nMK10\n\n\n\n\n\n\nPrint area\n\n\n200 x 200 x 180 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n70mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nDirect Drive\n\n\n\n\n\n\nPower Supply\n\n\n12V 250W\n\n\n\n\n\n\nPrinter Footprint\n\n\n400 x 410 x 400 mm\n\n\n\n\n\n\n\n\nUser Manual\n\n\nFollow the link below to the Wanhao i3 V2 user manual\n\n\nWanhao i3 V2 User manual", 
            "title": "Wanhao Duplicator i3 Plus"
        }, 
        {
            "location": "/3DPrinters/Wanhao/Duplicatori3plus/#about", 
            "text": "A robust and economical version of the Prusa i3, this machine is a great machine for a beginner. The printer comes in a fully assembled steel frame. The Duplicator i3 comes equipped with a cooling fan, gcode based micro-controller and a standard Heated Build Plate.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Wanhao/Duplicatori3plus/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  MK10    Print area  200 x 200 x 180 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  70mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Direct Drive    Power Supply  12V 250W    Printer Footprint  400 x 410 x 400 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Wanhao/Duplicatori3plus/#user-manual", 
            "text": "Follow the link below to the Wanhao i3 V2 user manual  Wanhao i3 V2 User manual", 
            "title": "User Manual"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanI3mini/", 
            "text": "About\n\n\nThe Wanhao Duplicator I3 Mini is an excellent entry level printer for beginners. This printer comes entirely assembled and will easily fit on your desk due to it's small size.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nE3D\n\n\n\n\n\n\nPrint area\n\n\n120 x 135 x 100 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\nnone\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n40mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n60mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nBowden\n\n\n\n\n\n\nPower Supply\n\n\n12V 50W\n\n\n\n\n\n\nPrinter Footprint\n\n\n300 x 382 x 370 mm\n\n\n\n\n\n\n\n\nUser Manual\n\n\n\n\n\n\n Wanhao I3 Mini User manual\n\n\n\n\n\n\nThis manual is to help you adjust your limit switch for the Z-Axis \nHow to adjust height of Z-Axis Limit Switch\n\n\n\n\n\n\nTips to the I3 Mini\n\n\nGetting print to stick\n\n\n\n\n\n\nSince the I3 mini doesn't come with a heated bed it becomes a lot harder to get your print to stick to the bed. But do not fear, DIY is here.\n\n\n\n\n\n\nThe first step is to ensure your bed is level, this is the most important factor to getting your print to stick to the bed.\n\n\n\n\n\n\nThe next important factor is how far your nozzle is from the bed. When your nozzle is extruding you want the plastic to \"squish\" down to the bed, if your nozzle is too high you're just printing in mid-air.\n  The best way to adjust this is in your Simplify3D G-Code settings. Change your Z-axis G-code offset to adjust the height of the nozzle. Only make small adjustments of +0.05mm/-0.05mm, adjusting too much could\n   cause your nozzle to scrape the print bed.\n\n\n\n\n\n\nIf you have done the above and you are still having issues try slowing down your print for the first layer, this gives your print more time to bind to the bed.\n\n\n\n\n\n\nTemperature has a large effect on the ability of your print to stick to the bed. If your print cools too quickly it may pull away from the bed and unstick.\n    Warm up your first layer a little higher than the rest of your print. Ensure your printer isn't exposed to any drafts or extreme cold conditions.\n\n\n\n\n\n\nIf you still struggling you can use tapes and glues, there are also special adhesives available for 3D printing to aid you.", 
            "title": "Wanhao Duplicator i3 Mini"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanI3mini/#about", 
            "text": "The Wanhao Duplicator I3 Mini is an excellent entry level printer for beginners. This printer comes entirely assembled and will easily fit on your desk due to it's small size.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanI3mini/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  E3D    Print area  120 x 135 x 100 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  none    Print Speed (Stable)  40mm/s    Print Speed (Max)  60mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Bowden    Power Supply  12V 50W    Printer Footprint  300 x 382 x 370 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanI3mini/#user-manual", 
            "text": "Wanhao I3 Mini User manual    This manual is to help you adjust your limit switch for the Z-Axis  How to adjust height of Z-Axis Limit Switch", 
            "title": "User Manual"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanI3mini/#tips-to-the-i3-mini", 
            "text": "", 
            "title": "Tips to the I3 Mini"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanI3mini/#getting-print-to-stick", 
            "text": "Since the I3 mini doesn't come with a heated bed it becomes a lot harder to get your print to stick to the bed. But do not fear, DIY is here.    The first step is to ensure your bed is level, this is the most important factor to getting your print to stick to the bed.    The next important factor is how far your nozzle is from the bed. When your nozzle is extruding you want the plastic to \"squish\" down to the bed, if your nozzle is too high you're just printing in mid-air.\n  The best way to adjust this is in your Simplify3D G-Code settings. Change your Z-axis G-code offset to adjust the height of the nozzle. Only make small adjustments of +0.05mm/-0.05mm, adjusting too much could\n   cause your nozzle to scrape the print bed.    If you have done the above and you are still having issues try slowing down your print for the first layer, this gives your print more time to bind to the bed.    Temperature has a large effect on the ability of your print to stick to the bed. If your print cools too quickly it may pull away from the bed and unstick.\n    Warm up your first layer a little higher than the rest of your print. Ensure your printer isn't exposed to any drafts or extreme cold conditions.    If you still struggling you can use tapes and glues, there are also special adhesives available for 3D printing to aid you.", 
            "title": "Getting print to stick"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanDup6/", 
            "text": "About\n\n\nThe Wanhao D6 boasts a smaller, lighter and faster extruder design to increase print quality and layer alignment. The D6 comes with a digital display to make settings and operations easier for the user. The double- track gantry system reduces vibrations during X and Y axis movement.\n\n\nSpecifications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPrinting technology\n\n\nFFF Fused Filament Fabrication\n\n\n\n\n\n\nExtruders\u200b\n\n\n1 Single Extruder\n\n\n\n\n\n\nBuild volume\u200b\n\n\n200 X 200 X 180mm\n\n\n\n\n\n\nLayer resolution\n\n\n20 micron, 60 micron, 100 micron\n\n\n\n\n\n\nPrint speed\n\n\n30mm-150mm/s\n\n\n\n\n\n\nOperating nozzle temperature\u200b\n\n\n260\u00b0C (Short-term), 240\u00b0C (Long-term)\n\n\n\n\n\n\nPlatform temperature\n\n\n40-100\u00b0C\n\n\n\n\n\n\nSupported materials\n\n\nPLA, ABS, PETG, HIPS, FORMFUTURA, and open materials.\n\n\n\n\n\n\nFilament diameter\u200b\n\n\n1.75 mm\n\n\n\n\n\n\nConnections\u200b\n\n\nUSB, SD Card slot\n\n\n\n\n\n\nSoftware included\u200b\n\n\nCura. Open Source.\n\n\n\n\n\n\nFile format\u200b\n\n\nSTL, OBJ, DAE, AMF\n\n\n\n\n\n\nNozzle diameter\n\n\n0,4 mm\n\n\n\n\n\n\nSupported OS\n\n\nWindows XP, Windows Vista, Windows 7-10, Linux, Mac OX\n\n\n\n\n\n\n\n\nUser guide\n\n\nFollow the link below for the full Wanhao D6 user manual\n\n\nWanhao Duplicator 6 user manual", 
            "title": "Wanhao Duplicator 6"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanDup6/#about", 
            "text": "The Wanhao D6 boasts a smaller, lighter and faster extruder design to increase print quality and layer alignment. The D6 comes with a digital display to make settings and operations easier for the user. The double- track gantry system reduces vibrations during X and Y axis movement.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanDup6/#specifications", 
            "text": "Printing technology  FFF Fused Filament Fabrication    Extruders\u200b  1 Single Extruder    Build volume\u200b  200 X 200 X 180mm    Layer resolution  20 micron, 60 micron, 100 micron    Print speed  30mm-150mm/s    Operating nozzle temperature\u200b  260\u00b0C (Short-term), 240\u00b0C (Long-term)    Platform temperature  40-100\u00b0C    Supported materials  PLA, ABS, PETG, HIPS, FORMFUTURA, and open materials.    Filament diameter\u200b  1.75 mm    Connections\u200b  USB, SD Card slot    Software included\u200b  Cura. Open Source.    File format\u200b  STL, OBJ, DAE, AMF    Nozzle diameter  0,4 mm    Supported OS  Windows XP, Windows Vista, Windows 7-10, Linux, Mac OX", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanDup6/#user-guide", 
            "text": "Follow the link below for the full Wanhao D6 user manual  Wanhao Duplicator 6 user manual", 
            "title": "User guide"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanDup6plus/", 
            "text": "About\n\n\nThe Wanhao D6 boasts a smaller, lighter and faster extruder design to increase print quality and layer alignment. The D6 comes with a digital display to make settings and operations easier for the user. The double- track gantry system reduces vibrations during X and Y axis movement.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nMK10\n\n\n\n\n\n\nPrint area\n\n\n200 x 200 x 180 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n70mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nDirect Drive\n\n\n\n\n\n\nPower Supply\n\n\n24V 350W\n\n\n\n\n\n\nPrinter Footprint\n\n\n460 x 460 x 550 mm\n\n\n\n\n\n\n\n\nUser guide\n\n\nFollow the link below for the full Wanhao D6 user manual\n\n\nWanhao Duplicator 6 user manual\n\n\nCurrently no Duplicator 6 plus manual available", 
            "title": "Wanhao Duplicator 6 plus"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanDup6plus/#about", 
            "text": "The Wanhao D6 boasts a smaller, lighter and faster extruder design to increase print quality and layer alignment. The D6 comes with a digital display to make settings and operations easier for the user. The double- track gantry system reduces vibrations during X and Y axis movement.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanDup6plus/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  MK10    Print area  200 x 200 x 180 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  70mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Direct Drive    Power Supply  24V 350W    Printer Footprint  460 x 460 x 550 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanDup6plus/#user-guide", 
            "text": "Follow the link below for the full Wanhao D6 user manual  Wanhao Duplicator 6 user manual  Currently no Duplicator 6 plus manual available", 
            "title": "User guide"
        }, 
        {
            "location": "/3DPrinters/Wanhao/wanD7/", 
            "text": "About\n\n\nThe D7 is the latest DLP resin printer from Wanhao. The D7 resin printer creates your print by curing resin layer by layer.\nEquipped with an HD LCD screen you can easily control your print.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nSystem\n\n\nWindows, Linux, Mac\n\n\n\n\n\n\nPower Supply\n\n\nNA\n\n\n\n\n\n\nPrint Speed\n\n\n30mm/hour\n\n\n\n\n\n\nSD-Card Support\n\n\nyes\n\n\n\n\n\n\nMax. Resolution\n\n\n35micron\n\n\n\n\n\n\nPrinting Software\n\n\nCreation Workshop\n\n\n\n\n\n\nPrint Are\n\n\n120 x 68 x200 mm\n\n\n\n\n\n\nLanguage\n\n\nEnglish\n\n\n\n\n\n\nFile type\n\n\nOBJ, STL\n\n\n\n\n\n\n\n\nuser manual\n\n\nD7 user guide", 
            "title": "Wanhao Duplicator 7"
        }, 
        {
            "location": "/3DPrinters/Wanhao/wanD7/#about", 
            "text": "The D7 is the latest DLP resin printer from Wanhao. The D7 resin printer creates your print by curing resin layer by layer.\nEquipped with an HD LCD screen you can easily control your print.                   Specs  Value      System  Windows, Linux, Mac    Power Supply  NA    Print Speed  30mm/hour    SD-Card Support  yes    Max. Resolution  35micron    Printing Software  Creation Workshop    Print Are  120 x 68 x200 mm    Language  English    File type  OBJ, STL", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Wanhao/wanD7/#user-manual", 
            "text": "D7 user guide", 
            "title": "user manual"
        }, 
        {
            "location": "/3DPrinters/Wanhao/wanD7plus/", 
            "text": "About\n\n\nThe D7 is the latest DLP resin printer from Wanhao. The D7 resin printer creates your print by curing resin layer by layer.\nEquipped with an HD LCD screen you can easily control your print.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nSystem\n\n\nWindows, Linux, Mac\n\n\n\n\n\n\nPower Supply\n\n\n110 to 250V Auto-Switch - 50/60Hz\n\n\n\n\n\n\nPrint Speed\n\n\n30mm/hour\n\n\n\n\n\n\nSD-Card Support\n\n\nyes\n\n\n\n\n\n\nMax. Resolution\n\n\n35micron\n\n\n\n\n\n\nPrint Are\n\n\n120 x 68 x180 mm\n\n\n\n\n\n\nLanguage\n\n\nEnglish\n\n\n\n\n\n\nFile type\n\n\nOBJ, STL\n\n\n\n\n\n\nResin Support\n\n\n405nm Resin\n\n\n\n\n\n\n\n\nuser manual\n\n\nD7 user guide\n\n\nCurrently no Duplicator 7 plus manual available", 
            "title": "Wanhao Duplicator 7 plus"
        }, 
        {
            "location": "/3DPrinters/Wanhao/wanD7plus/#about", 
            "text": "The D7 is the latest DLP resin printer from Wanhao. The D7 resin printer creates your print by curing resin layer by layer.\nEquipped with an HD LCD screen you can easily control your print.                   Specs  Value      System  Windows, Linux, Mac    Power Supply  110 to 250V Auto-Switch - 50/60Hz    Print Speed  30mm/hour    SD-Card Support  yes    Max. Resolution  35micron    Print Are  120 x 68 x180 mm    Language  English    File type  OBJ, STL    Resin Support  405nm Resin", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Wanhao/wanD7plus/#user-manual", 
            "text": "D7 user guide  Currently no Duplicator 7 plus manual available", 
            "title": "user manual"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanD9/", 
            "text": "About\n\n\nThe D9 is the first in the new D9 series from Wanhao. This comes with new features such as anti-backlash rolling system, single cable extruder connection and a touch screen display.\nUnique Features\n\u2013 Anti-Backlash Rolling System\n\n\n\u2013 Pause/Resume Print Function\n\n\n\u2013 Machined Metal Stability Brackets\n\n\n\u2013 Smart Integrated Touch Display\n\n\n\u2013 Closed PSU \n Cable Alignments\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nMK10\n\n\n\n\n\n\nPrint area\n\n\n300 x 300 x 400 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n80mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nDirect Drive\n\n\n\n\n\n\nPower Supply\n\n\n12V ??W\n\n\n\n\n\n\nPrinter Footprint\n\n\n350 x 500 x 600 mm\n\n\n\n\n\n\n\n\nuser manual\n\n\nCurrently no Duplicator 9 plus manual available", 
            "title": "Wanhao Duplicator 9"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanD9/#about", 
            "text": "The D9 is the first in the new D9 series from Wanhao. This comes with new features such as anti-backlash rolling system, single cable extruder connection and a touch screen display.\nUnique Features\n\u2013 Anti-Backlash Rolling System  \u2013 Pause/Resume Print Function  \u2013 Machined Metal Stability Brackets  \u2013 Smart Integrated Touch Display  \u2013 Closed PSU   Cable Alignments                   Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  MK10    Print area  300 x 300 x 400 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  80mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Direct Drive    Power Supply  12V ??W    Printer Footprint  350 x 500 x 600 mm", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Wanhao/WanD9/#user-manual", 
            "text": "Currently no Duplicator 9 plus manual available", 
            "title": "user manual"
        }, 
        {
            "location": "/3DPrinters/Anycubic/Anycubicoverview/", 
            "text": "Background\n\n\nAnycubic opened its doors in China in 2011, as Shenzhen Anycubic Technology Co. Since then Anycubic has started producing a range of printers and now export their printer all across the world.\nAnycubic features a range of printers to suit your needs.\n\n\n3D Printers\n\n\n \nAnycubic I3 Mega\n \n\n\n \nAnycubic Kossel Delta", 
            "title": "Anycubic Overview"
        }, 
        {
            "location": "/3DPrinters/Anycubic/Anycubicoverview/#background", 
            "text": "Anycubic opened its doors in China in 2011, as Shenzhen Anycubic Technology Co. Since then Anycubic has started producing a range of printers and now export their printer all across the world.\nAnycubic features a range of printers to suit your needs.", 
            "title": "Background"
        }, 
        {
            "location": "/3DPrinters/Anycubic/Anycubicoverview/#3d-printers", 
            "text": "Anycubic I3 Mega      Anycubic Kossel Delta", 
            "title": "3D Printers"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AncubicI3Mega/", 
            "text": "About\n\n\nThis extremely simple to assemble printer is designed for easy prints. Its rigid metal frame gives it stability to improve print accuracy.\nThe 3.5-inch TFT Touch screen supports multilanguage custom and comes with one click \"resume print\" incase of power outages.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nE3D\n\n\n\n\n\n\nPrint area\n\n\n210 x 210 x 205 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n80mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nBowden\n\n\n\n\n\n\nPower Supply\n\n\n12V 300W\n\n\n\n\n\n\nPrinter Footprint\n\n\n405 x 410 x 453 mm\n\n\n\n\n\n\n\n\nUser guide\n\n\nThe video below explains step by step how to assemble your Anycubic I3 mega.", 
            "title": "Anycubic i3 Mega"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AncubicI3Mega/#about", 
            "text": "This extremely simple to assemble printer is designed for easy prints. Its rigid metal frame gives it stability to improve print accuracy.\nThe 3.5-inch TFT Touch screen supports multilanguage custom and comes with one click \"resume print\" incase of power outages.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AncubicI3Mega/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  E3D    Print area  210 x 210 x 205 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  80mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Bowden    Power Supply  12V 300W    Printer Footprint  405 x 410 x 453 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AncubicI3Mega/#user-guide", 
            "text": "The video below explains step by step how to assemble your Anycubic I3 mega.", 
            "title": "User guide"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AnyycubicKossDelt/", 
            "text": "About\n\n\nWith t-slot aluminium extrusion and linear rails for precision and easy assembly, the Anycubic Kossel Delta is a cost effective printer for beginners.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nE3D\n\n\n\n\n\n\nPrint area\n\n\n\u00d8230 x 270 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\nnone\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n275\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n100m/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nBowden\n\n\n\n\n\n\nPower Supply\n\n\n12V 48W\n\n\n\n\n\n\nPrinter Footprint\n\n\n\u00d8385 x 680 mm\n\n\n\n\n\n\n\n\nBuild guide\n\n\nThe video below has a full assembly guide to your Anycubic Kossel Delta", 
            "title": "Anycubic Kossel Delta"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AnyycubicKossDelt/#about", 
            "text": "With t-slot aluminium extrusion and linear rails for precision and easy assembly, the Anycubic Kossel Delta is a cost effective printer for beginners.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AnyycubicKossDelt/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  E3D    Print area  \u00d8230 x 270 mm    Heated-Bed Max Temperature  none    Hot-End Max Temperature  275\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  100m/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Bowden    Power Supply  12V 48W    Printer Footprint  \u00d8385 x 680 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AnyycubicKossDelt/#build-guide", 
            "text": "The video below has a full assembly guide to your Anycubic Kossel Delta", 
            "title": "Build guide"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AnycubicPhoton/", 
            "text": "About\n\n\nThe Anycubic Photon is a good enough reason to get excited about resin printing. The Photon delivers more accurate detailed prints with less chances of warping or distortion. \nDespite using almost exactly the same technique as other DLP printers, the quality of carefully machined parts have given this 3D printer a competitive edge over almost every other affordable desktop model.\nThis quality printer would make an excellent addition to any experienced maker's desk.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nPrint area\n\n\n115 x 65 x 155 mm\n\n\n\n\n\n\nSystem\n\n\nWindows, Linux, Mac\n\n\n\n\n\n\nExtruder\n\n\n25W UV Lamp/DLP Curing System\n\n\n\n\n\n\nXY Resolution\n\n\n47microns\n\n\n\n\n\n\nY Axis Accuracy\n\n\n1.25 microns\n\n\n\n\n\n\nPrint speed\n\n\n20mm/h\n\n\n\n\n\n\nResin Support\n\n\n405nm Photosensitive Resin\n\n\n\n\n\n\nPower Supply\n\n\n110 to 220V Auto-Switch - 50/60Hz\n\n\n\n\n\n\nSD-Card Support\n\n\nyes", 
            "title": "Anycubic Photon"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AnycubicPhoton/#about", 
            "text": "The Anycubic Photon is a good enough reason to get excited about resin printing. The Photon delivers more accurate detailed prints with less chances of warping or distortion. \nDespite using almost exactly the same technique as other DLP printers, the quality of carefully machined parts have given this 3D printer a competitive edge over almost every other affordable desktop model.\nThis quality printer would make an excellent addition to any experienced maker's desk.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Anycubic/AnycubicPhoton/#specifications", 
            "text": "Specs  Value      Print area  115 x 65 x 155 mm    System  Windows, Linux, Mac    Extruder  25W UV Lamp/DLP Curing System    XY Resolution  47microns    Y Axis Accuracy  1.25 microns    Print speed  20mm/h    Resin Support  405nm Photosensitive Resin    Power Supply  110 to 220V Auto-Switch - 50/60Hz    SD-Card Support  yes", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Tevo/Tevooverview/", 
            "text": "Background\n\n\nTevo printers are shipped world wide and it is easy to see why. The sleek, user friendly designs by Tevo has fast become a favourite of hobbyist worldwide.\n\n\n3D Printers\n\n\n \nTevo Tarantula\n \n\n\n \nTevo Black Widow\n \n\n\n \nTevo Little Monster", 
            "title": "Tevo Overview"
        }, 
        {
            "location": "/3DPrinters/Tevo/Tevooverview/#background", 
            "text": "Tevo printers are shipped world wide and it is easy to see why. The sleek, user friendly designs by Tevo has fast become a favourite of hobbyist worldwide.", 
            "title": "Background"
        }, 
        {
            "location": "/3DPrinters/Tevo/Tevooverview/#3d-printers", 
            "text": "Tevo Tarantula      Tevo Black Widow      Tevo Little Monster", 
            "title": "3D Printers"
        }, 
        {
            "location": "/3DPrinters/Tevo/TevoTran/", 
            "text": "The Tevo Tarantula has multiple options for bed size as well as interchagable extruder.\nThe Tevo Tarantula design is based on the Prusa i3. The design for this printer is all OpenSource and a part of the RepRap project.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nE3D\n\n\n\n\n\n\nPrint area\n\n\n200 x 200 x 200 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n40mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n70mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nBowden\n\n\n\n\n\n\nPower Supply\n\n\n12V 60W\n\n\n\n\n\n\nPrinter Footprint\n\n\n430 x 440 x 400 mm\n\n\n\n\n\n\n\n\nBuild guide\n\n\nTevo Tarantula: Axis Mount\n\n\n\n\nTevo Tarantula: Hot End\n\n\n\n\nTevo Trantula: Z Axis Left Side\n\n\n\n\nTevo Tarantula: Z Axis Right Side\n\n\n\n\nTevo Tarantula: The Bed\n\n\n\n\nTevo Tarantula: The Frame\n\n\n\n\nTevo Tarantula: Front Y Pulley\n\n\n\n\nTevo Tarantula: Y Motor Mount\n\n\n\n\nTevo Tarantula: Mounting X/Z Axis Rail\n\n\n\n\nTevo Tarantula: Top Rail, Squaring it up\n\n\n\n\nTevo Tarantula: Z Rod and Motor\n\n\n\n\nTevo Tarantula: X Axis Belt\n\n\n\n\nTevo Tarantula: Y Axis Belt, Bed Mount\n\n\n\n\nTevo Tarantula: Extruder\n\n\n\n\nTevo Tarantula: Wiring the Power Supply\n\n\n\n\nTevo Tarantula: PCB Mount\n\n\n\n\nTevo Tarantula: Wiring Part 1\n\n\n\n\nTevo Tarantula: Wiring Part 2\n\n\n\n\nTevo Tarantula: End Stops\n\n\n\n\nTevo Tarantula: LCD Aseembly\n\n\n\n\nTevo Tarantula: Manual Bed Level\n\n\n\n\nTevo Tarantula: Loading Filament\n\n\n\n\nTevo Tarantula: First Print", 
            "title": "Tevo Tarantula Prusa i3"
        }, 
        {
            "location": "/3DPrinters/Tevo/TevoTran/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  E3D    Print area  200 x 200 x 200 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  40mm/s    Print Speed (Max)  70mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Bowden    Power Supply  12V 60W    Printer Footprint  430 x 440 x 400 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Tevo/TevoTran/#build-guide", 
            "text": "Tevo Tarantula: Axis Mount   Tevo Tarantula: Hot End   Tevo Trantula: Z Axis Left Side   Tevo Tarantula: Z Axis Right Side   Tevo Tarantula: The Bed   Tevo Tarantula: The Frame   Tevo Tarantula: Front Y Pulley   Tevo Tarantula: Y Motor Mount   Tevo Tarantula: Mounting X/Z Axis Rail   Tevo Tarantula: Top Rail, Squaring it up   Tevo Tarantula: Z Rod and Motor   Tevo Tarantula: X Axis Belt   Tevo Tarantula: Y Axis Belt, Bed Mount   Tevo Tarantula: Extruder   Tevo Tarantula: Wiring the Power Supply   Tevo Tarantula: PCB Mount   Tevo Tarantula: Wiring Part 1   Tevo Tarantula: Wiring Part 2   Tevo Tarantula: End Stops   Tevo Tarantula: LCD Aseembly   Tevo Tarantula: Manual Bed Level   Tevo Tarantula: Loading Filament   Tevo Tarantula: First Print", 
            "title": "Build guide"
        }, 
        {
            "location": "/3DPrinters/Tevo/TevBlkWid/", 
            "text": "About\n\n\nAn easy assembly printer based off the Prusa i3 design. All parts of the Black Widow are open source.\n\n\nSpecifications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLayer resolution\n\n\n50 microns\n\n\n\n\n\n\nMAX Printing Speed\n\n\n150 mm/s\n\n\n\n\n\n\nBuild size\n\n\n200X 200 X 200mm. Large print area of 200 x 280 x 200 mm (Optional)\n\n\n\n\n\n\nMaterial type\n\n\nPLA, ABS, PETG, Wood, PVA and Flexible Filaments (With Pro Metal Extruder)\n\n\n\n\n\n\nPositioning accuracy\n\n\nZ 0.04mm, XY 0.012mm\n\n\n\n\n\n\nNozzle diameter\n\n\n0.4mm (customized 0.3mm/0.2mm)\n\n\n\n\n\n\nRecommended extruder temperature\n\n\n210\u00b0C (the maximum can be set to 260\u00b0C)\n\n\n\n\n\n\nHeating plate temperature\n\n\n60-120\u00b0C (proper winter warming and summer appropriate cooling)\n\n\n\n\n\n\nPower requirements\n\n\n220V, 250W, 50Hz, 0.89A\n\n\n\n\n\n\nConnection\n\n\nTF card or USB\n\n\n\n\n\n\nFile print format\n\n\nSTL,G-Code\n\n\n\n\n\n\nCompatibility\n\n\nWindows, Linux, Mac\n\n\n\n\n\n\n\n\nUser guide\n\n\nTevo Black Widow user manual", 
            "title": "Tevo Black Widow"
        }, 
        {
            "location": "/3DPrinters/Tevo/TevBlkWid/#about", 
            "text": "An easy assembly printer based off the Prusa i3 design. All parts of the Black Widow are open source.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Tevo/TevBlkWid/#specifications", 
            "text": "Layer resolution  50 microns    MAX Printing Speed  150 mm/s    Build size  200X 200 X 200mm. Large print area of 200 x 280 x 200 mm (Optional)    Material type  PLA, ABS, PETG, Wood, PVA and Flexible Filaments (With Pro Metal Extruder)    Positioning accuracy  Z 0.04mm, XY 0.012mm    Nozzle diameter  0.4mm (customized 0.3mm/0.2mm)    Recommended extruder temperature  210\u00b0C (the maximum can be set to 260\u00b0C)    Heating plate temperature  60-120\u00b0C (proper winter warming and summer appropriate cooling)    Power requirements  220V, 250W, 50Hz, 0.89A    Connection  TF card or USB    File print format  STL,G-Code    Compatibility  Windows, Linux, Mac", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Tevo/TevBlkWid/#user-guide", 
            "text": "Tevo Black Widow user manual", 
            "title": "User guide"
        }, 
        {
            "location": "/3DPrinters/Tevo/lilmon/", 
            "text": "About\n\n\nThis partially pre-assembled printer is a great addition to your 3D printer collection. Dont be fooled by its name, the Little Monster comes with a large build volume of 340mm by 500mm.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nFilament Diameter\n\n\n0.175mm\n\n\n\n\n\n\nBuild volume\u200b\n\n\n340 D x 500 H mm\n\n\n\n\n\n\nHot Bed Temperature\n\n\n120 \u00b0C\n\n\n\n\n\n\nSystem\n\n\nWindows, Linux, Mac\n\n\n\n\n\n\nPower Supply\n\n\n240V\n\n\n\n\n\n\nPrint Speed\n\n\n150 mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n0.1-0.4mm\n\n\n\n\n\n\nSD-Card Support\n\n\nyes\n\n\n\n\n\n\nMax. Resolution\n\n\n0.1mm\n\n\n\n\n\n\nZ Axis Positioning Accuracy\n\n\n0.002mm\n\n\n\n\n\n\nXY Axis Positioning Accuracy\n\n\n0.010mm\n\n\n\n\n\n\nLanguage\n\n\nEnglish\n\n\n\n\n\n\n\n\nBuild guide\n\n\nFollow the link below to a full build guide to the Tevo Little Monster printer\n\n\nLittle Monster guide", 
            "title": "Tevo Little Monster"
        }, 
        {
            "location": "/3DPrinters/Tevo/lilmon/#about", 
            "text": "This partially pre-assembled printer is a great addition to your 3D printer collection. Dont be fooled by its name, the Little Monster comes with a large build volume of 340mm by 500mm.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Tevo/lilmon/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Filament Diameter  0.175mm    Build volume\u200b  340 D x 500 H mm    Hot Bed Temperature  120 \u00b0C    System  Windows, Linux, Mac    Power Supply  240V    Print Speed  150 mm/s    Layer Thickness  0.1-0.4mm    SD-Card Support  yes    Max. Resolution  0.1mm    Z Axis Positioning Accuracy  0.002mm    XY Axis Positioning Accuracy  0.010mm    Language  English", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Tevo/lilmon/#build-guide", 
            "text": "Follow the link below to a full build guide to the Tevo Little Monster printer  Little Monster guide", 
            "title": "Build guide"
        }, 
        {
            "location": "/3DPrinters/Creality/Crealityoverview/", 
            "text": "Background\n\n\nFounded in 2014, Creality3D is fully devoted to the production of their printers. Creality has managed to produce superb printers by putting user experience first.\nCreality is dedicated to improving their printers with each new version promising a host of new features inspired by the users.\n\n\n3D Printer\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n \nCreality CR10\n \n\n\n \nCreality CR10S\n \n\n\n\n\n\n\n \nCreality CR10 S4\n \n\n\n \nCreality CR10 S5\n \n\n\n\n\n\n\n \nCreality Ender 3\n \n\n\n \nCreality CR20", 
            "title": "Creality Overview"
        }, 
        {
            "location": "/3DPrinters/Creality/Crealityoverview/#background", 
            "text": "Founded in 2014, Creality3D is fully devoted to the production of their printers. Creality has managed to produce superb printers by putting user experience first.\nCreality is dedicated to improving their printers with each new version promising a host of new features inspired by the users.", 
            "title": "Background"
        }, 
        {
            "location": "/3DPrinters/Creality/Crealityoverview/#3d-printer", 
            "text": "Creality CR10      Creality CR10S        Creality CR10 S4      Creality CR10 S5        Creality Ender 3      Creality CR20", 
            "title": "3D Printer"
        }, 
        {
            "location": "/3DPrinters/Creality/crealityCR10/", 
            "text": "About\n\n\nWith quick installation and low prices, its easy to see why the Creality CR-10 is becoming so popular amongst our costumers.\n\n\nThe design of this printer promotes high accuracy and low noise with a large build volume.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nMK8\n\n\n\n\n\n\nPrint area\n\n\n300 x 300 x 400 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n80mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nBowden\n\n\n\n\n\n\nPower Supply\n\n\n12V 360W\n\n\n\n\n\n\nPrinter Footprint\n\n\n615 x 600 x 490 mm\n\n\n\n\n\n\n\n\nUser Guide\n\n\nThe video below gives a quick tutorial on how to assemble your CR10 from Creality", 
            "title": "Creality CR10"
        }, 
        {
            "location": "/3DPrinters/Creality/crealityCR10/#about", 
            "text": "With quick installation and low prices, its easy to see why the Creality CR-10 is becoming so popular amongst our costumers.  The design of this printer promotes high accuracy and low noise with a large build volume.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Creality/crealityCR10/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  MK8    Print area  300 x 300 x 400 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  80mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Bowden    Power Supply  12V 360W    Printer Footprint  615 x 600 x 490 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Creality/crealityCR10/#user-guide", 
            "text": "The video below gives a quick tutorial on how to assemble your CR10 from Creality", 
            "title": "User Guide"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S/", 
            "text": "About\n\n\nBased on the CR-10 comes the CR-10S! This durable printer comes with Dual lead screws and a filament detector to maximize print quality.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nMK8\n\n\n\n\n\n\nPrint area\n\n\n300 x 300 x 300 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n80mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nBowden\n\n\n\n\n\n\nPower Supply\n\n\n12V 360W\n\n\n\n\n\n\nPrinter Footprint\n\n\n623 x 660 x 610 mm\n\n\n\n\n\n\n\n\nUser Guide\n\n\nThe video below gives a quick tutorial on how to assemble your CR10 from Creality", 
            "title": "Creality CR10s"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S/#about", 
            "text": "Based on the CR-10 comes the CR-10S! This durable printer comes with Dual lead screws and a filament detector to maximize print quality.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  MK8    Print area  300 x 300 x 300 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  80mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Bowden    Power Supply  12V 360W    Printer Footprint  623 x 660 x 610 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S/#user-guide", 
            "text": "The video below gives a quick tutorial on how to assemble your CR10 from Creality", 
            "title": "User Guide"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S4/", 
            "text": "About\n\n\nBased on the CR-10 the CR-10S4 comes with a print volume of 400x400x400mm. This durable printer comes with Dual lead screws and a filament detector to maximize print quality.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nMK8\n\n\n\n\n\n\nPrint area\n\n\n400 x 400 x 400 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n80mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nBowden\n\n\n\n\n\n\nPower Supply\n\n\n12V 360W\n\n\n\n\n\n\nPrinter Footprint\n\n\n600 x 680 x 615 mm\n\n\n\n\n\n\n\n\nUser Guide\n\n\nThe video below gives a quick tutorial on how to assemble your CR10 from Creality", 
            "title": "Creality CR10 S4"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S4/#about", 
            "text": "Based on the CR-10 the CR-10S4 comes with a print volume of 400x400x400mm. This durable printer comes with Dual lead screws and a filament detector to maximize print quality.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S4/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  MK8    Print area  400 x 400 x 400 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  80mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Bowden    Power Supply  12V 360W    Printer Footprint  600 x 680 x 615 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S4/#user-guide", 
            "text": "The video below gives a quick tutorial on how to assemble your CR10 from Creality", 
            "title": "User Guide"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S5/", 
            "text": "About\n\n\nBased on the CR-10 the CR-10S5 comes with a print volume of 500x500x500mm. This durable printer comes with Dual lead screws and a filament detector to maximize print quality as well as a start stop print function.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nMK8\n\n\n\n\n\n\nPrint area\n\n\n500 x 500 x 500 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n80mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nBowden\n\n\n\n\n\n\nPower Supply\n\n\n12V 360W\n\n\n\n\n\n\nPrinter Footprint\n\n\n813 x 1030 x 712 mm\n\n\n\n\n\n\n\n\nUser Guide\n\n\nThe video below gives a quick tutorial on how to assemble your CR10 from Creality", 
            "title": "Creality CR10 S5"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S5/#about", 
            "text": "Based on the CR-10 the CR-10S5 comes with a print volume of 500x500x500mm. This durable printer comes with Dual lead screws and a filament detector to maximize print quality as well as a start stop print function.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S5/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  MK8    Print area  500 x 500 x 500 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  80mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Bowden    Power Supply  12V 360W    Printer Footprint  813 x 1030 x 712 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Creality/Creality10S5/#user-guide", 
            "text": "The video below gives a quick tutorial on how to assemble your CR10 from Creality", 
            "title": "User Guide"
        }, 
        {
            "location": "/3DPrinters/Creality/CrealityCR20/", 
            "text": "About\n\n\nWith a high quality rigid frame and a build size of 220x220x250 the CR20 has arrived and made an impression.\nThe CR20 boasts the best features of Crealities Ender and Cr-10 series at a price that won't break the bank.\nA unique feature of the CR20 is the new \"Flexy-Sheet\" which allows makers to pop their prints off the bed easier than before.\nCreality is the current leaders in desktop 3D printers and it's clear why.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nMK8\n\n\n\n\n\n\nPrint area\n\n\n220 x 220 x 250 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n80mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nBowden\n\n\n\n\n\n\nPower Supply\n\n\n24V 270W\n\n\n\n\n\n\nPrinter Footprint\n\n\n420 x 410 x 470 mm", 
            "title": "Creality CR20"
        }, 
        {
            "location": "/3DPrinters/Creality/CrealityCR20/#about", 
            "text": "With a high quality rigid frame and a build size of 220x220x250 the CR20 has arrived and made an impression.\nThe CR20 boasts the best features of Crealities Ender and Cr-10 series at a price that won't break the bank.\nA unique feature of the CR20 is the new \"Flexy-Sheet\" which allows makers to pop their prints off the bed easier than before.\nCreality is the current leaders in desktop 3D printers and it's clear why.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Creality/CrealityCR20/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  MK8    Print area  220 x 220 x 250 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  80mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Bowden    Power Supply  24V 270W    Printer Footprint  420 x 410 x 470 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Creality/CrealityEnder3/", 
            "text": "About\n\n\nThe Creality Ender 3 is taking over, this highly popular printer is the choice of the masses and we can see why. The ender 3 follows in the footsteps of the CR10 series with a sturdy cross-bar gantry frame to ensure a steady print, the only difference is the size and the price!\nThe Creality Ender series is a highly supported printer with an abundance of information and modifications provided by the printing community.\n\n\nSpecifications\n\n\n\n\n\n\n\n\nSpecs\n\n\nValue\n\n\n\n\n\n\n\n\n\n\nNozzle Diameter\n\n\n0.4mm\n\n\n\n\n\n\nNozzle Type\n\n\nMK8\n\n\n\n\n\n\nPrint area\n\n\n220 x 220 x 250 mm\n\n\n\n\n\n\nHeated-Bed Max Temperature\n\n\n110\u00b0C\n\n\n\n\n\n\nHot-End Max Temperature\n\n\n260\u00b0C\n\n\n\n\n\n\nPrint Speed (Stable)\n\n\n50mm/s\n\n\n\n\n\n\nPrint Speed (Max)\n\n\n70mm/s\n\n\n\n\n\n\nLayer Thickness\n\n\n50-350 \u03bcm\n\n\n\n\n\n\nFilament Diameter\n\n\n1.75mm\n\n\n\n\n\n\nExtruder Style\n\n\nBowden\n\n\n\n\n\n\nPower Supply\n\n\n12V 360W\n\n\n\n\n\n\nPrinter Footprint\n\n\n440 x 410 x 465 mm\n\n\n\n\n\n\n\n\nUser Guide\n\n\nFor Cura settings for your Ender 3 check out the video below!\n\n\n\n\nFor suggested upgrades and modifications check out this informative guide by ALL3DP! \n\n \n20 Must have mods for Ender 3", 
            "title": "Creality Ender 3"
        }, 
        {
            "location": "/3DPrinters/Creality/CrealityEnder3/#about", 
            "text": "The Creality Ender 3 is taking over, this highly popular printer is the choice of the masses and we can see why. The ender 3 follows in the footsteps of the CR10 series with a sturdy cross-bar gantry frame to ensure a steady print, the only difference is the size and the price!\nThe Creality Ender series is a highly supported printer with an abundance of information and modifications provided by the printing community.", 
            "title": "About"
        }, 
        {
            "location": "/3DPrinters/Creality/CrealityEnder3/#specifications", 
            "text": "Specs  Value      Nozzle Diameter  0.4mm    Nozzle Type  MK8    Print area  220 x 220 x 250 mm    Heated-Bed Max Temperature  110\u00b0C    Hot-End Max Temperature  260\u00b0C    Print Speed (Stable)  50mm/s    Print Speed (Max)  70mm/s    Layer Thickness  50-350 \u03bcm    Filament Diameter  1.75mm    Extruder Style  Bowden    Power Supply  12V 360W    Printer Footprint  440 x 410 x 465 mm", 
            "title": "Specifications"
        }, 
        {
            "location": "/3DPrinters/Creality/CrealityEnder3/#user-guide", 
            "text": "For Cura settings for your Ender 3 check out the video below!   For suggested upgrades and modifications check out this informative guide by ALL3DP!  \n  20 Must have mods for Ender 3", 
            "title": "User Guide"
        }, 
        {
            "location": "/Additional/PrinterCompare/", 
            "text": ".tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}\n.tg th{font-family:Arial, sans-serif;font-size:16px;font-weight:bold;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;}\n.tg .tg-s6z2{text-align:center}\n.tg .tg-hgcj{font-weight:bold;font-size:16px;text-align:center}\n\n\n\n\n\n  \n\n    \n\n    \nBuild Volume\n\n    \nHot Bed Max Temp\n\n    \nExtruder Max Temp\n\n    \nPrint Max Speed\n\n  \n\n  \n\n    \nDIYE i3 Premium\n\n    \n250mm x 270mm x 200mm\n\n    \n110\u00b0C\n\n    \n300\u00b0C\n\n    \n80 mm/s\n\n  \n\n    \n\n    \nWanhao i3 Mini\n\n    \n120mm x 135mm x 100mm\n\n    \nN/A\n\n    \n260\u00b0C\n\n    \n70 mm/s\n\n  \n\n  \n\n    \nWanhao i3 Plus\n\n    \n200mm x 200mm x 180mm\n\n    \n100\u00b0C\n\n    \n260\u00b0C\n\n    \n80 mm/s\n\n  \n\n  \n\n    \nWanhao D6\n\n    \n200x200x180mm\n\n    \n100\u00b0C\n\n    \n260\u00b0C\n\n    \n80mm/s\n\n  \n\n  \n\n    \n Wanhao D6 Plus\n\n    \n300mm x 300mm x 400mm\n\n    \n100\u00b0C\n\n    \n260\u00b0C\n\n    \n80 mm/s\n\n  \n\n  \n\n    \nWanhao D9\n\n    \n300mm x 300mm x 400mm\n\n    \n100\u00b0C\n\n    \n300\u00b0C\n\n    \n80 mm/s\n\n  \n\n  \n\n    \nAnycubic i3 Mega\n\n    \n 210mm x 210mm x 205mm\n\n    \n100\u00b0C\n\n    \n260\u00b0C\n\n    \n80mm/s\n\n  \n\n  \n\n    \nAnycubic Kossel Delta\n\n    \n\u00d8230mm x 300mm\n\n    \n100\u00b0C\n\n    \n275\u00b0C\n\n    \n100mm/s\n\n  \n\n  \n\n    \nTevo Tarantula\n\n    \n200mm x 200mm x 200mm\n\n    \n110\u00b0C\n\n    \n260\u00b0C\n\n    \n60mm/s\n\n  \n\n  \n\n    \nTevo Little Monster\n\n    \n \u00d8380mm x 500mm\n\n    \n110\u00b0C\n\n    \n270\u00b0C\n\n    \n120mm/s\n\n  \n\n  \n\n    \nEnder 2\n\n    \n150mm x 150mm x 200mm\n\n    \n110\u00b0C\n\n    \n260\u00b0C\n\n    \n70mm/s\n\n  \n\n  \n\n    \nEnder 3\n\n    \n220mm x 220mm x 250mm\n\n    \n110\u00b0C\n\n    \n260\u00b0C\n\n    \n70mm/s\n\n  \n\n  \n\n    \nCreality CR-10S\n\n    \n300mm x 300mm x 400mm\n\n    \n110\u00b0C\n\n    \n260\u00b0C\n\n    \n80mm/s\n\n  \n\n  \n\n    \nCreality CR-10 S4\n\n    \n 400mm x 400mm x 400mm\n\n    \n110\u00b0C\n\n    \n260\u00b0C\n\n    \n80mm/s\n\n  \n\n  \n\n    \nCreality CR-10 S5\n\n    \n500mm x 500mm x 500mm\n\n    \n110\u00b0C\n\n    \n260\u00b0C\n\n    \n80mm/s", 
            "title": "Printer Comparison"
        }, 
        {
            "location": "/Additional/FAQ/", 
            "text": "What is 3d printing?\n\n\n3D printing is the process of making three dimensional objects from various materials.\n3d printing uses digital files such as STL files to produce a 3D object.\n3D printing ranges from small scale home use to large scale manufacturing and even biological applications.\n\n\nHow much does it cost to 3d print?\n\n\nCost of 3d printed objects ranges greatly depending on the size of the print, the density and the amount of supports, but an easy way to estimate the value of a print is shown in the equation below:\n\n\nCost to Print = Weight of Model X (Cost of Spool/Full Spool Weight)\n\n\nWhat is your personal favourite 3d printer and why?\n\n\nDIYElectronics Prusa i3 Premium, since it is based on the original Prusa i3, it is one of the most common and well supported printers on the market. \nIt has a fantastic user base and many compatible parts or modifications available. For bigger print volume the Creality CR-10S is highly recommended.\n\n\nIf I want to print quickly, what printer should I use?\n\n\nThe quickest printer to get setup with is either the Creality CR-10S or the Wanhao D6. \n\n\nIf I want to print the best quality, what printer should I use?\n\n\nThe DIYElectronics Prusa i3 Premium has a great potential for awesome print quality, followed by the CR-10S and the Anycubic i3 Mega Ultrabase. \n\n\nWhat is the best value for money printer?\n\n\nDIYElectronics Prusa i3 Premium for users that are willing to spend time fine tuning and tweaking their printer. CR-10S for large print volume and good print quality with minimal fuss. \n\n\nWhere can I find files to print?\n\n\nThere are many websites online that provide free STL files for 3d printing, many 3d makers upload their designs for free for public use. \nWebsites such as thingiverse.com and Grabcad.com are a great place to start as well as stlfinder.com\n\n\nWhat kinds of filament are there?\n\n\nThere are MANY filaments available for hobby and professional printing.\n The two main types used by most makers are PLA and ABS. However, there are many other exotic filaments to meet your needs, including nylon, wood, polycarbonate, HIPS (High impact Polystyrene), PETG (Polyethylene Terephthalate), and various soft or flexible filaments such as TPE or TPU. There are also many other exotic filaments out there and modified filaments with filler materials such as metal powders.\n\n\nWhat factors affect length of time to print?\n\n\n\u2022Print length time depends on largely on the size of your print as well as infill level. \nLarger prints with large infill settings will take a longer time to print. \nPrint speed can also affect the time taken to print, however faster print speeds often leads to imperfect prints. \nThe more detailed a print is the longer it will take. \nAdditionally the print time (and quality) is affected by nozzle diameter, with a smaller nozzle taking longer to print but producing better results.\n\n\nWhat factors effect plastic extrusion?\n\n\nPlastic extrusion quality is generally a function of print temperature and print speed. This does rely on excellent quality plastic and a well setup hotend. Further, quality is dependent on the quality of the nozzle. \n11. What is the most effective way to get a print to stick to the bed?\nThis is one of the biggest challenges of the FDM 3D printing technology, and the particular method depends mostly on the type of plastic being printed. In general a heated print bed fitted with a Buildtak or PEI print surface is the best general purpose option. \n\n\nWhy is my print not printing?\n\n\nThis is a very difficult question to answer specifically as many factors can cause your print to not work. If it is your first print, ensure your printer is set up correctly, you have sliced your file correctly and filament is extruding. However if your printer is suddenly not printing after multiple uses there are a number of other factors that could be affecting this. \nFirstly ensure your printer nozzle is not blocked by either pushing some filament through at the correct temperature or by heating up the hotend and pushing a needle through.\nIf you are sure your nozzle is not blocked ensure your nozzle is not too close to the bed as this will prevent the plastic from extruding, you can do this by positively increasing the Z-axis offset to raise the nozzle. Alternatively, if your printer allows it, lower the print bed.\n\n\nWhat do I do if my filament snaps or strips?\n\n\nOlder filaments are more likely to snap. However sometimes your brand-new filament might snap too. \nCheck your idler tensioner to ensure it is not too tight, alternatively check the temperature and flow rate of the hot end as these settings could cause tension the filament causing it to snap. \nOlder filament tends to absorb moisture from the air and can cause it to become brittle (especially PLA). \nSometimes filament can be dried at a low temperature in and oven for a few hours, to recover its properties. \n\n\nWhat tips do you have when printing with supports?\n\n\nDownload some support test files and fine tune your support settings. \nMake sure your support generation is not too dense or too sparse and ensure the separation layers are correct to make sure the supports break off well from the prints. \n\n\nWhat tips do you have when printing a large print?\n\n\nLarge prints tend to warp, especially with high shrinkage plastics like ABS. \nAn enclosure for your printer will prevent cold air drafts and keep the area around the prints at a higher ambient temperature. \nAlso make sure your printer is well maintained and on a good power supply, as losing a print after many hours of printing is not a joyful experience! \nPrinting from SD card can prevent issues with USB cables and PC sleep modes during long prints. \n\n\nWhat tips do you have when printing a small print?\n\n\nMake sure you have your extruder calibration dialed in, i.e. not over/under extruding. \nTry use a smaller nozzle 0.4mm or smaller to improve print quality. \nUse the \u2018raft\u2019 generation function in your slicer if your part has a small contact area with the bed, to prevent small parts detaching from the bed. \n\n\nWhat causes first layer messiness?\n\n\nThis is often due to the print bed not being level or the nozzle being too far away from the print bed.\nIf you are sure your nozzle height is correct, and your bed is level try decreasing the print bed by 5\u00b0C repeatedly until adhesion is better.\n\n\nWhy is my print bowing out at the bottom?\n\n\n\u2022This is mostly due to the weight of the rest of the print pushing down on lower layers. \nThis is a tricky one to fix as it involved tweaking the temperature and cooling of the print. \nYour bottom layer needs to be cooled sufficiently before the next layer is added, however too much cooling can also lead to warping of your print. \nTry lowering the print bed temperature by 5\u00b0C and if you have a part cooling fan try setting it to start at a lower height. \nBowing can also be fixed by raising the nozzle height and leveling the print bed accurately.\n\n\nWhat causes warping of prints?\n\n\nWarping is often caused by the printed part being cooled too quickly, causing the plastic to shrink slightly. \nThe best fix for this is using a heated print bed, tweaking the temperature setting of the hotbed may reduce warping. \nOther quick fixes include decreasing nozzle height to ensure the print stick to the bed or using different adhesives on the print bed.\nA print enclosure makes a massive difference here also. \n\n\nIncomplete infill or gaps between outer wall and infill?\n\n\nInfill problems are due to incorrect settings in your slicing software. \n20% is a standard value used for infill settings, less than 20% can cause weak infill. \nLarger prints may require larger infill percentage to increase hardiness of the print. \nIf there are gaps between the infill and outer wall increase your Infill Overlap. \nLowering your print speed may also reduce the gap between wall and infill.\n\n\nWhat causes cracks in print?\n\n\nCracks are caused by lack of adhesion between layers. \nOften this happens in larger prints as higher layers are not as affected by the print bed temperature. \nIf you have a part cooling fan, try reducing its speed and aiming it at your 3d object. \nYou can also try increasing your extruder temperature for higher layers to ensure the plastic is adequately heated.\n\n\nHow do I fix messy overhangs?\n\n\nMessy overhangs happen when a printer tries to print on a layer that is not there. \nA 3d printer is unable to print a part in midair. The most effective way to reduce overhangs is to use supports. \nMost softwares come with automatic support generation, alternatively you can create your own support in your design.\n\n\nWhat causes ripples in my print?\n\n\nRipples and bumps are often due to vibration of your 3D printer, ensure your bearings still run smoothly and all bots are tight, you can also oil your rods to ensure a smoother flow. Slowing down the print speed can also help reduce random bumps in your print. If there is many bumps or droopy parts, this may be due to overextrution.\n\n\nX / Y / Z / Extruder Axis Runs in Reverse\n\n\nThe motor axis is reversed, the easiest way to solve this issue is (with everything powered down) to flip the motor plug on the RAMPS board 180 degrees. This will reverse the axis in question:\n\n\n\nEndstops Do Not Work Correctly\n\n\nFirst make sure the axis are all moving in the correct direction. \nNext in Repetier Host send the M119 command in the G-Code command line.\n\n\nNote the response in the text log: \n\n\nWhen the endstops are not pressed they should read as Open\nYou can hold an endstop down and then send M119, it should then read Triggered if it is working properly. If you do not have this response then check that the endstop is plugged into the correct port and that the wiring is not damaged. \nIgnore the Max endstops, we only use the Min endstops. \nAlso check that the X endstop relates to x_min and the same for Y and Z with the M119 command. If not then they are connected to the wrong locations.\n\n\nOne of the Axis Does Not Work\n\n\nThe first thing to try is (with the power off) swap one of the working axis stepper motor drivers with the driver on the axis that doesn't work. Test again, then we will know if the driver is faulty or if there is a different problem.\n\n\nRough Layers in Prints\n\n\nThe attached picture shows how A , C and D layers are very rough and layers \nB are smooth. This seems to occur at the same levels in each of the models \nwe printed.\nSome are worse than others.\n\n\n\n\nSolution:\nGenerally this problem is a function of three variables: \nTemperature too high, try reduce 5 - 10 'C\nFlow rate too high, try reduce 5 - 10% or check that extruder calibration is spot on\nPrint speed is too high, slow down the print a little. \nTry tweak one of those variables at a time and see if you can get it printing smoothly.\nOver and above those factors some filaments can be more prone to this problem than others, try printing in a different colour and see if it helps. \nFinally one of the biggest causes of this problem is related to the nozzle size, slicer and slicer settings. You may see an improvement by using a better slicer like Simplify 3D, using a smaller nozzle size, changing your layer size and adjusting the extrusion width over height factor. The layer height can also play a roll. \n\n\nEssentially it is a case of fine tuning, but once you get it right the prints will come out perfect. \n\n\nPrusa i3 Cable Management\n\n\nCable management on your Prusa i3 kit, or any 3D printer kit, is very important in order to prevent failed prints and other cable related issues. The following guide is intended to assist with cable management on your printer. \n\n\nOn the extruder, gather all cables together just above the X-carriage. Small cable-ties are useful here.\n\n\n\nBring the cables through the frame and down towards the RAMPS board top left corner.\n\n\n\nSecure the extruder wiring to the top left RAMPS mounting screw with a small cable-tie.\n\n\n\nBring the extruder wiring bundle down to the lower left RAMPS mount and secure. Trim the red hot-end heater cable to length and insert into heater screw terminals. Bunch excess thermistor and stepper motor cable under the Arduino board. Connect Thermistor, Extruder Stepper, Hot-End Fan and (optional) Auto-Level Sensor Cables to the RAMPS board and reinstall the RAMPS fan. \n\n\n\nHow to adjust first layer using \"Marlin Baby Stepping\"\n\n\n\n\nStart print \n\n\nUnder \"tune\" in the main menu select \"Babystepping Z\"\n\n\nTurn the dial anti-clockwise to lower the nozzle closer to the print surface \n\n\nYou will have achieved the ideal nozzle position for your first layer once the filament is being lightly squashed against the print surface creating an even bead of extrusion.\n\n\n\n\nThe Heated Bed Struggles to Reach 100'C or More\n\n\nThat's quite normal, we suggest printing ABS at 80-90'C bed temp, we find that is ideal with our aluminium build plate and ABS / Acetone solution. \n\n\nAdditionally it is possible to get to 110'C if you insulate the bottom of the bed. Using an enclosure helps too. \nWe find this is a bit hot for printing directly to the aluminium bed with ABS, rather this bed temp is suitable for print surfaces such as PEI. \n\n\nEditing your G-Code / Start / End G-Code etc\n\n\nG-Code is the language that is used by your printer electronics to control the printer. The slicing program / toolchain such as Slic3r or Simplify3D generates this G-Code automatically and saves it to a text based .gcode file that is then sent to your 3D printer either over a serial connection, SD card or network. \n\n\nCheck out the following link for some tips on setting up the some of the configurable sections of the G-Code generation in order to fine tune your 3D printers operation: \nhttp://wiki.solidoodle.com/setting-and-editing-your-gcode", 
            "title": "FAQ"
        }, 
        {
            "location": "/Additional/FAQ/#what-is-3d-printing", 
            "text": "3D printing is the process of making three dimensional objects from various materials.\n3d printing uses digital files such as STL files to produce a 3D object.\n3D printing ranges from small scale home use to large scale manufacturing and even biological applications.", 
            "title": "What is 3d printing?"
        }, 
        {
            "location": "/Additional/FAQ/#how-much-does-it-cost-to-3d-print", 
            "text": "Cost of 3d printed objects ranges greatly depending on the size of the print, the density and the amount of supports, but an easy way to estimate the value of a print is shown in the equation below:  Cost to Print = Weight of Model X (Cost of Spool/Full Spool Weight)", 
            "title": "How much does it cost to 3d print?"
        }, 
        {
            "location": "/Additional/FAQ/#what-is-your-personal-favourite-3d-printer-and-why", 
            "text": "DIYElectronics Prusa i3 Premium, since it is based on the original Prusa i3, it is one of the most common and well supported printers on the market. \nIt has a fantastic user base and many compatible parts or modifications available. For bigger print volume the Creality CR-10S is highly recommended.", 
            "title": "What is your personal favourite 3d printer and why?"
        }, 
        {
            "location": "/Additional/FAQ/#if-i-want-to-print-quickly-what-printer-should-i-use", 
            "text": "The quickest printer to get setup with is either the Creality CR-10S or the Wanhao D6.", 
            "title": "If I want to print quickly, what printer should I use?"
        }, 
        {
            "location": "/Additional/FAQ/#if-i-want-to-print-the-best-quality-what-printer-should-i-use", 
            "text": "The DIYElectronics Prusa i3 Premium has a great potential for awesome print quality, followed by the CR-10S and the Anycubic i3 Mega Ultrabase.", 
            "title": "If I want to print the best quality, what printer should I use?"
        }, 
        {
            "location": "/Additional/FAQ/#what-is-the-best-value-for-money-printer", 
            "text": "DIYElectronics Prusa i3 Premium for users that are willing to spend time fine tuning and tweaking their printer. CR-10S for large print volume and good print quality with minimal fuss.", 
            "title": "What is the best value for money printer?"
        }, 
        {
            "location": "/Additional/FAQ/#where-can-i-find-files-to-print", 
            "text": "There are many websites online that provide free STL files for 3d printing, many 3d makers upload their designs for free for public use. \nWebsites such as thingiverse.com and Grabcad.com are a great place to start as well as stlfinder.com", 
            "title": "Where can I find files to print?"
        }, 
        {
            "location": "/Additional/FAQ/#what-kinds-of-filament-are-there", 
            "text": "There are MANY filaments available for hobby and professional printing.\n The two main types used by most makers are PLA and ABS. However, there are many other exotic filaments to meet your needs, including nylon, wood, polycarbonate, HIPS (High impact Polystyrene), PETG (Polyethylene Terephthalate), and various soft or flexible filaments such as TPE or TPU. There are also many other exotic filaments out there and modified filaments with filler materials such as metal powders.", 
            "title": "What kinds of filament are there?"
        }, 
        {
            "location": "/Additional/FAQ/#what-factors-affect-length-of-time-to-print", 
            "text": "\u2022Print length time depends on largely on the size of your print as well as infill level. \nLarger prints with large infill settings will take a longer time to print. \nPrint speed can also affect the time taken to print, however faster print speeds often leads to imperfect prints. \nThe more detailed a print is the longer it will take. \nAdditionally the print time (and quality) is affected by nozzle diameter, with a smaller nozzle taking longer to print but producing better results.", 
            "title": "What factors affect length of time to print?"
        }, 
        {
            "location": "/Additional/FAQ/#what-factors-effect-plastic-extrusion", 
            "text": "Plastic extrusion quality is generally a function of print temperature and print speed. This does rely on excellent quality plastic and a well setup hotend. Further, quality is dependent on the quality of the nozzle. \n11. What is the most effective way to get a print to stick to the bed?\nThis is one of the biggest challenges of the FDM 3D printing technology, and the particular method depends mostly on the type of plastic being printed. In general a heated print bed fitted with a Buildtak or PEI print surface is the best general purpose option.", 
            "title": "What factors effect plastic extrusion?"
        }, 
        {
            "location": "/Additional/FAQ/#why-is-my-print-not-printing", 
            "text": "This is a very difficult question to answer specifically as many factors can cause your print to not work. If it is your first print, ensure your printer is set up correctly, you have sliced your file correctly and filament is extruding. However if your printer is suddenly not printing after multiple uses there are a number of other factors that could be affecting this. \nFirstly ensure your printer nozzle is not blocked by either pushing some filament through at the correct temperature or by heating up the hotend and pushing a needle through.\nIf you are sure your nozzle is not blocked ensure your nozzle is not too close to the bed as this will prevent the plastic from extruding, you can do this by positively increasing the Z-axis offset to raise the nozzle. Alternatively, if your printer allows it, lower the print bed.", 
            "title": "Why is my print not printing?"
        }, 
        {
            "location": "/Additional/FAQ/#what-do-i-do-if-my-filament-snaps-or-strips", 
            "text": "Older filaments are more likely to snap. However sometimes your brand-new filament might snap too. \nCheck your idler tensioner to ensure it is not too tight, alternatively check the temperature and flow rate of the hot end as these settings could cause tension the filament causing it to snap. \nOlder filament tends to absorb moisture from the air and can cause it to become brittle (especially PLA). \nSometimes filament can be dried at a low temperature in and oven for a few hours, to recover its properties.", 
            "title": "What do I do if my filament snaps or strips?"
        }, 
        {
            "location": "/Additional/FAQ/#what-tips-do-you-have-when-printing-with-supports", 
            "text": "Download some support test files and fine tune your support settings. \nMake sure your support generation is not too dense or too sparse and ensure the separation layers are correct to make sure the supports break off well from the prints.", 
            "title": "What tips do you have when printing with supports?"
        }, 
        {
            "location": "/Additional/FAQ/#what-tips-do-you-have-when-printing-a-large-print", 
            "text": "Large prints tend to warp, especially with high shrinkage plastics like ABS. \nAn enclosure for your printer will prevent cold air drafts and keep the area around the prints at a higher ambient temperature. \nAlso make sure your printer is well maintained and on a good power supply, as losing a print after many hours of printing is not a joyful experience! \nPrinting from SD card can prevent issues with USB cables and PC sleep modes during long prints.", 
            "title": "What tips do you have when printing a large print?"
        }, 
        {
            "location": "/Additional/FAQ/#what-tips-do-you-have-when-printing-a-small-print", 
            "text": "Make sure you have your extruder calibration dialed in, i.e. not over/under extruding. \nTry use a smaller nozzle 0.4mm or smaller to improve print quality. \nUse the \u2018raft\u2019 generation function in your slicer if your part has a small contact area with the bed, to prevent small parts detaching from the bed.", 
            "title": "What tips do you have when printing a small print?"
        }, 
        {
            "location": "/Additional/FAQ/#what-causes-first-layer-messiness", 
            "text": "This is often due to the print bed not being level or the nozzle being too far away from the print bed.\nIf you are sure your nozzle height is correct, and your bed is level try decreasing the print bed by 5\u00b0C repeatedly until adhesion is better.", 
            "title": "What causes first layer messiness?"
        }, 
        {
            "location": "/Additional/FAQ/#why-is-my-print-bowing-out-at-the-bottom", 
            "text": "\u2022This is mostly due to the weight of the rest of the print pushing down on lower layers. \nThis is a tricky one to fix as it involved tweaking the temperature and cooling of the print. \nYour bottom layer needs to be cooled sufficiently before the next layer is added, however too much cooling can also lead to warping of your print. \nTry lowering the print bed temperature by 5\u00b0C and if you have a part cooling fan try setting it to start at a lower height. \nBowing can also be fixed by raising the nozzle height and leveling the print bed accurately.", 
            "title": "Why is my print bowing out at the bottom?"
        }, 
        {
            "location": "/Additional/FAQ/#what-causes-warping-of-prints", 
            "text": "Warping is often caused by the printed part being cooled too quickly, causing the plastic to shrink slightly. \nThe best fix for this is using a heated print bed, tweaking the temperature setting of the hotbed may reduce warping. \nOther quick fixes include decreasing nozzle height to ensure the print stick to the bed or using different adhesives on the print bed.\nA print enclosure makes a massive difference here also.", 
            "title": "What causes warping of prints?"
        }, 
        {
            "location": "/Additional/FAQ/#incomplete-infill-or-gaps-between-outer-wall-and-infill", 
            "text": "Infill problems are due to incorrect settings in your slicing software. \n20% is a standard value used for infill settings, less than 20% can cause weak infill. \nLarger prints may require larger infill percentage to increase hardiness of the print. \nIf there are gaps between the infill and outer wall increase your Infill Overlap. \nLowering your print speed may also reduce the gap between wall and infill.", 
            "title": "Incomplete infill or gaps between outer wall and infill?"
        }, 
        {
            "location": "/Additional/FAQ/#what-causes-cracks-in-print", 
            "text": "Cracks are caused by lack of adhesion between layers. \nOften this happens in larger prints as higher layers are not as affected by the print bed temperature. \nIf you have a part cooling fan, try reducing its speed and aiming it at your 3d object. \nYou can also try increasing your extruder temperature for higher layers to ensure the plastic is adequately heated.", 
            "title": "What causes cracks in print?"
        }, 
        {
            "location": "/Additional/FAQ/#how-do-i-fix-messy-overhangs", 
            "text": "Messy overhangs happen when a printer tries to print on a layer that is not there. \nA 3d printer is unable to print a part in midair. The most effective way to reduce overhangs is to use supports. \nMost softwares come with automatic support generation, alternatively you can create your own support in your design.", 
            "title": "How do I fix messy overhangs?"
        }, 
        {
            "location": "/Additional/FAQ/#what-causes-ripples-in-my-print", 
            "text": "Ripples and bumps are often due to vibration of your 3D printer, ensure your bearings still run smoothly and all bots are tight, you can also oil your rods to ensure a smoother flow. Slowing down the print speed can also help reduce random bumps in your print. If there is many bumps or droopy parts, this may be due to overextrution.", 
            "title": "What causes ripples in my print?"
        }, 
        {
            "location": "/Additional/FAQ/#x-y-z-extruder-axis-runs-in-reverse", 
            "text": "The motor axis is reversed, the easiest way to solve this issue is (with everything powered down) to flip the motor plug on the RAMPS board 180 degrees. This will reverse the axis in question:", 
            "title": "X / Y / Z / Extruder Axis Runs in Reverse"
        }, 
        {
            "location": "/Additional/FAQ/#endstops-do-not-work-correctly", 
            "text": "First make sure the axis are all moving in the correct direction. \nNext in Repetier Host send the M119 command in the G-Code command line. \nNote the response in the text log:  \nWhen the endstops are not pressed they should read as Open\nYou can hold an endstop down and then send M119, it should then read Triggered if it is working properly. If you do not have this response then check that the endstop is plugged into the correct port and that the wiring is not damaged. \nIgnore the Max endstops, we only use the Min endstops. \nAlso check that the X endstop relates to x_min and the same for Y and Z with the M119 command. If not then they are connected to the wrong locations.", 
            "title": "Endstops Do Not Work Correctly"
        }, 
        {
            "location": "/Additional/FAQ/#one-of-the-axis-does-not-work", 
            "text": "The first thing to try is (with the power off) swap one of the working axis stepper motor drivers with the driver on the axis that doesn't work. Test again, then we will know if the driver is faulty or if there is a different problem.", 
            "title": "One of the Axis Does Not Work"
        }, 
        {
            "location": "/Additional/FAQ/#rough-layers-in-prints", 
            "text": "The attached picture shows how A , C and D layers are very rough and layers \nB are smooth. This seems to occur at the same levels in each of the models \nwe printed.\nSome are worse than others.   Solution:\nGenerally this problem is a function of three variables: \nTemperature too high, try reduce 5 - 10 'C\nFlow rate too high, try reduce 5 - 10% or check that extruder calibration is spot on\nPrint speed is too high, slow down the print a little. \nTry tweak one of those variables at a time and see if you can get it printing smoothly.\nOver and above those factors some filaments can be more prone to this problem than others, try printing in a different colour and see if it helps. \nFinally one of the biggest causes of this problem is related to the nozzle size, slicer and slicer settings. You may see an improvement by using a better slicer like Simplify 3D, using a smaller nozzle size, changing your layer size and adjusting the extrusion width over height factor. The layer height can also play a roll.   Essentially it is a case of fine tuning, but once you get it right the prints will come out perfect.", 
            "title": "Rough Layers in Prints"
        }, 
        {
            "location": "/Additional/FAQ/#prusa-i3-cable-management", 
            "text": "Cable management on your Prusa i3 kit, or any 3D printer kit, is very important in order to prevent failed prints and other cable related issues. The following guide is intended to assist with cable management on your printer.   On the extruder, gather all cables together just above the X-carriage. Small cable-ties are useful here.  \nBring the cables through the frame and down towards the RAMPS board top left corner.  Secure the extruder wiring to the top left RAMPS mounting screw with a small cable-tie.  Bring the extruder wiring bundle down to the lower left RAMPS mount and secure. Trim the red hot-end heater cable to length and insert into heater screw terminals. Bunch excess thermistor and stepper motor cable under the Arduino board. Connect Thermistor, Extruder Stepper, Hot-End Fan and (optional) Auto-Level Sensor Cables to the RAMPS board and reinstall the RAMPS fan.", 
            "title": "Prusa i3 Cable Management"
        }, 
        {
            "location": "/Additional/FAQ/#how-to-adjust-first-layer-using-marlin-baby-stepping", 
            "text": "Start print   Under \"tune\" in the main menu select \"Babystepping Z\"  Turn the dial anti-clockwise to lower the nozzle closer to the print surface   You will have achieved the ideal nozzle position for your first layer once the filament is being lightly squashed against the print surface creating an even bead of extrusion.", 
            "title": "How to adjust first layer using \"Marlin Baby Stepping\""
        }, 
        {
            "location": "/Additional/FAQ/#the-heated-bed-struggles-to-reach-100c-or-more", 
            "text": "That's quite normal, we suggest printing ABS at 80-90'C bed temp, we find that is ideal with our aluminium build plate and ABS / Acetone solution.   Additionally it is possible to get to 110'C if you insulate the bottom of the bed. Using an enclosure helps too. \nWe find this is a bit hot for printing directly to the aluminium bed with ABS, rather this bed temp is suitable for print surfaces such as PEI.", 
            "title": "The Heated Bed Struggles to Reach 100'C or More"
        }, 
        {
            "location": "/Additional/FAQ/#editing-your-g-code-start-end-g-code-etc", 
            "text": "G-Code is the language that is used by your printer electronics to control the printer. The slicing program / toolchain such as Slic3r or Simplify3D generates this G-Code automatically and saves it to a text based .gcode file that is then sent to your 3D printer either over a serial connection, SD card or network.   Check out the following link for some tips on setting up the some of the configurable sections of the G-Code generation in order to fine tune your 3D printers operation: \nhttp://wiki.solidoodle.com/setting-and-editing-your-gcode", 
            "title": "Editing your G-Code / Start / End G-Code etc"
        }, 
        {
            "location": "/Additional/filament_specs/", 
            "text": "Types of filaments\n\n\n\n\n\n\n\n\nFilament Type\n\n\nStrength\n\n\nPrint Style\n\n\nTemperature\n\n\nRecommended Prints\n\n\n\n\n\n\n\n\n\n\nPLA\n\n\nReliable, moderately strong\n\n\nRange of colour, glossy finish\n\n\nLow melting point\n\n\nPrototypes,models\n\n\n\n\n\n\nABS\n\n\nHigh impact strength\n\n\nMatte finish\n\n\nHigh UV resistance\n\n\nEnd use product, support\n\n\n\n\n\n\nNylon\n\n\nExtreme strength\n\n\nTranspparent. Opague\n\n\nhigher temperatures\n\n\nMax strength parts\n\n\n\n\n\n\nFlexible\n\n\nHigh flexibility, rubbery\n\n\nwhite, range of colour\n\n\nAverage temp resistance\n\n\nflexible components\n\n\n\n\n\n\nPETG\n\n\nModerate strength, Flexible\n\n\nPredominately neutral colours\n\n\nAverage temp resistance\n\n\nModel, function\n\n\n\n\n\n\nPolypropylene\n\n\nAverage strength, flexible\n\n\nNeutral colours\n\n\nAverage temp resistance\n\n\nFlexible components\n\n\n\n\n\n\npolyoxymethylane\n\n\nExtreme strength\n\n\nNeutral colours\n\n\nAverage temp resistance\n\n\nFunctional parts\n\n\n\n\n\n\nHIPS\n\n\nWeak, slight flex\n\n\nMatte colours\n\n\nModerate temp strength\n\n\nSupport parts\n\n\n\n\n\n\nCarbo Fibre\n\n\nDurable\n\n\nNeutral colours\n\n\nModeratee temperature\n\n\nFunctional parts", 
            "title": "Filament comparisson"
        }, 
        {
            "location": "/Additional/filament_specs/#types-of-filaments", 
            "text": "Filament Type  Strength  Print Style  Temperature  Recommended Prints      PLA  Reliable, moderately strong  Range of colour, glossy finish  Low melting point  Prototypes,models    ABS  High impact strength  Matte finish  High UV resistance  End use product, support    Nylon  Extreme strength  Transpparent. Opague  higher temperatures  Max strength parts    Flexible  High flexibility, rubbery  white, range of colour  Average temp resistance  flexible components    PETG  Moderate strength, Flexible  Predominately neutral colours  Average temp resistance  Model, function    Polypropylene  Average strength, flexible  Neutral colours  Average temp resistance  Flexible components    polyoxymethylane  Extreme strength  Neutral colours  Average temp resistance  Functional parts    HIPS  Weak, slight flex  Matte colours  Moderate temp strength  Support parts    Carbo Fibre  Durable  Neutral colours  Moderatee temperature  Functional parts", 
            "title": "Types of filaments"
        }, 
        {
            "location": "/Arduino/Arduino101/", 
            "text": "Arduino 101 Intro\n\n\nThe first thing that you need to know about Arduino is what board do you use? Sure you could use a Mega or and Uno for a range of tasks,\nbut you should also know what is the minimum requirements of your board to perform a certain task you have in mind.\nSo let's look at the available boards and their capabilities:\n\n\nArduino Uno (R3)\n\n\n\n\nThe Arduino Uno R3 comes with an ATmega16U2 which in noob terms compared to older versions, the board is now cable of faster transfer rates\nand contains more memory.\n\n\nPins:\n 14 digital input/output pins (of which 6 can be used as PWM output).\n      6 analog inputs.\n\n\nMicrocontroller\n: ATmega328\n\n\nOperating Voltage\n: 5V\n\n\nInput Voltage (recommended)\n: 7-12V\n\n\nInput Voltage (limits)\n: 6-20V\n\n\nDC Current per I/O Pin:\n 40 mA\n\n\nDC Current for 3.3V Pin:\n 50 mA\n\n\nFlash Memory:\n 32 KB of which 0.5 KB used by bootloader\n\n\nSRAM:\n 2 KB (ATmega328)\n\n\nEEPROM:\n 1 KB (ATmega328)\n\n\nClock Speed:\n 16 MHz\n\n\nArduino Mega 2560 (R3)\n\n\n\n\nThis version of the mega comes with a ATmega16U2 to replace the previous 8U2.\n\n\nPins:\n 54 digital input/output pins (of which 14 provide PWM output)\n      16 analog inputs\n\n\nMicrocontroller:\n ATmega2560\n\n\nOperating Voltage:\n 5V\n\n\nInput Voltage:\n (recommended) 7-12V\n\n\nInput Voltage:\n (limits) 6-20V\n\n\nDC Current per I/O Pin:\n 40 mA\n\n\nDC Current for 3.3V Pin:\n 50 mA\n\n\nFlash Memory:\n 256 KB of which 8 KB used by bootloader\n\n\nSRAM:\n 8 KB\n\n\nEEPROM:\n 4 KB\n\n\nClock Speed:\n 16 MHz\n\n\nArduino Pro Mini 328\n\n\n\n\nThese boards are a minimalistic design for an Arduino board. These boards come in two versions 5V/16MHz or the 3.3V/8MHz. This board although\nit looks small and not intimidating it is not for the first time Arduino user, this board is designed for makers looking for a small sized board.\nThese boards do not come with connectors attached but rather allows the user to solder on their own connectors or wires as they please.\n\n\nPins:\n 14 digital input/output pins (of which 6 can be used as PWM output).\n      6 analog inputs.\n\n\nMicrocontroller:\n ATmega328\n\n\nOperating Voltage:\n 5V/3.3V\n                    DC input 5V up to 12V\n\n\nDC Current per I/O Pin:\n 40 mA\n\n\nFlash Memory:\n 32KB of which 2 KB used by bootloader\n\n\nSRAM:\n 2 KB/ 1KB\n\n\nEEPROM:\n 1 KB/ 512 Bytes\n\n\nTesting your Arduino\n\n\nBefore jumping in to your chosen project for your Arduino, you should be sure your Arduino is fully functional. \n\nTo do this all you will need to do is connect your Arduino via serial to your computer and upload the blink.ino to your board. \n\nYou can find the blink.ino program within your Arduino IDE under Files -\n Examples -\n Basics -\n Blink. \n\nWhen uploading the Blink program make sure you have selected the correct Port and upload speed under tools.\nIf you're Arduino is in working order and you have uploaded the code correctly you should see the on board LED of your Arduino flashing.\n\n\nArduino Getting Started Links\n\n\n\n\nBasic references are provided by the Arduino foundation: \nhttps://www.arduino.cc/\n\n\nProgramming references: \nhttps://www.arduino.cc/en/Reference/HomePage\n\n\nGetting started: \nhttps://www.arduino.cc/en/Guide/HomePage\n\n\nProgram examples: \nhttp://playground.arduino.cc/", 
            "title": "Arduino101"
        }, 
        {
            "location": "/Arduino/Arduino101/#arduino-101-intro", 
            "text": "The first thing that you need to know about Arduino is what board do you use? Sure you could use a Mega or and Uno for a range of tasks,\nbut you should also know what is the minimum requirements of your board to perform a certain task you have in mind.\nSo let's look at the available boards and their capabilities:", 
            "title": "Arduino 101 Intro"
        }, 
        {
            "location": "/Arduino/Arduino101/#arduino-uno-r3", 
            "text": "The Arduino Uno R3 comes with an ATmega16U2 which in noob terms compared to older versions, the board is now cable of faster transfer rates\nand contains more memory.  Pins:  14 digital input/output pins (of which 6 can be used as PWM output).\n      6 analog inputs.  Microcontroller : ATmega328  Operating Voltage : 5V  Input Voltage (recommended) : 7-12V  Input Voltage (limits) : 6-20V  DC Current per I/O Pin:  40 mA  DC Current for 3.3V Pin:  50 mA  Flash Memory:  32 KB of which 0.5 KB used by bootloader  SRAM:  2 KB (ATmega328)  EEPROM:  1 KB (ATmega328)  Clock Speed:  16 MHz", 
            "title": "Arduino Uno (R3)"
        }, 
        {
            "location": "/Arduino/Arduino101/#arduino-mega-2560-r3", 
            "text": "This version of the mega comes with a ATmega16U2 to replace the previous 8U2.  Pins:  54 digital input/output pins (of which 14 provide PWM output)\n      16 analog inputs  Microcontroller:  ATmega2560  Operating Voltage:  5V  Input Voltage:  (recommended) 7-12V  Input Voltage:  (limits) 6-20V  DC Current per I/O Pin:  40 mA  DC Current for 3.3V Pin:  50 mA  Flash Memory:  256 KB of which 8 KB used by bootloader  SRAM:  8 KB  EEPROM:  4 KB  Clock Speed:  16 MHz", 
            "title": "Arduino Mega 2560 (R3)"
        }, 
        {
            "location": "/Arduino/Arduino101/#arduino-pro-mini-328", 
            "text": "These boards are a minimalistic design for an Arduino board. These boards come in two versions 5V/16MHz or the 3.3V/8MHz. This board although\nit looks small and not intimidating it is not for the first time Arduino user, this board is designed for makers looking for a small sized board.\nThese boards do not come with connectors attached but rather allows the user to solder on their own connectors or wires as they please.  Pins:  14 digital input/output pins (of which 6 can be used as PWM output).\n      6 analog inputs.  Microcontroller:  ATmega328  Operating Voltage:  5V/3.3V\n                    DC input 5V up to 12V  DC Current per I/O Pin:  40 mA  Flash Memory:  32KB of which 2 KB used by bootloader  SRAM:  2 KB/ 1KB  EEPROM:  1 KB/ 512 Bytes", 
            "title": "Arduino Pro Mini 328"
        }, 
        {
            "location": "/Arduino/Arduino101/#testing-your-arduino", 
            "text": "Before jumping in to your chosen project for your Arduino, you should be sure your Arduino is fully functional.  \nTo do this all you will need to do is connect your Arduino via serial to your computer and upload the blink.ino to your board.  \nYou can find the blink.ino program within your Arduino IDE under Files -  Examples -  Basics -  Blink.  \nWhen uploading the Blink program make sure you have selected the correct Port and upload speed under tools.\nIf you're Arduino is in working order and you have uploaded the code correctly you should see the on board LED of your Arduino flashing.", 
            "title": "Testing your Arduino"
        }, 
        {
            "location": "/Arduino/Arduino101/#arduino-getting-started-links", 
            "text": "Basic references are provided by the Arduino foundation:  https://www.arduino.cc/  Programming references:  https://www.arduino.cc/en/Reference/HomePage  Getting started:  https://www.arduino.cc/en/Guide/HomePage  Program examples:  http://playground.arduino.cc/", 
            "title": "Arduino Getting Started Links"
        }, 
        {
            "location": "/Arduino/ArduinoStartUP/", 
            "text": "Ensuring connection to your arduino compatible board\n\n\n\n\nStep 1: Ensuring power connection.\n\n\n\n\nEnsure that your Arduino Board is plugged into your computer, and that \nat least one\n LED light on the Arduino board is lit.   \n\n\nIf an LED is lit, \nproceed to Step 2\n.   \n\n\nIf an LED is not lit, there may be a fault with either your USB port, USB cable, or Arduino board.    \n\n\nTo troubleshoot this, try plugging the Arduino board to a \ndifferent USB port\n on your computer, or try a \ndifferent USB\n cable.   \n\n\nIf these do not work, you may have a damaged Arduino Board. \n\n\n\n\nStep 2: Ensuring communication between computer and Arduino Board.\n\n\n\n\n\n\n\n\n\n\nRight-Click on your Start Menu Icon and Select \n\"Device Manager\"\n. A long list of devices should be displayed.  \n\n\nLook for the label \n\"Ports (COM \n LPT)\"\n and click the drop down arrow. You should see at least one entry named \n\"USB-SERIAL CH340 (COMX)\"\n  \n\n\nIf the USB-SERIAL entry is present, proceed to Step 3.  \n\n\nIf the USB-SERIAL entry is not present. You may have a faulty USB cable, you do not have the \ncorrect CH340 drivers installed\n, or a damaged Arduino board.  \n\n\nTo troubleshoot this, install the latest CH340 drivers \nCH340 Drivers\n \n\n\nAfter the driver installation, \ndisconnect and reconnect\n the Arduino board, the USB-SERIAL entry should be present, if not try a different USB cable.  \n\n\nIf this also does not work, you maybe have a damaged Arduino Board.  \n\n\n\n\nStep 3: Ensuring that the Arduino board is flashable.\n\n\n\n\nOpen the Arduino IDE, Select \nFile -\n Example -\n 0.1 Basics -\n Blink\n. Next select \nTools -\n Board\n and select your Arduino Board.   \n\n\nNext select \nTools -\n Port\n and select the serial port. There should be only one port, labelled \n\"COMX\"\n.   \n\n\n\n\nNext press the \nRight-Arrow\n to upload the sketch to your Arduino. The Arduino IDE should have displayed \n\"Uploading Done.\"\n \n\n\n\n\n\n\n\n\n\n\n\n\nIf all the above has been completed, proceed to Step 4.\n\n\n\n\nIf your Arduino IDE does not list the serial port, restart the Arduino IDE.\n\n\nIf the Arduino IDE says \n\"Problem Uploading to Board\"\n, Unplug the Arduino Board, Restart the Arduino IDE, reconnect the Arduino Board and \nrestart Step 3\n.\n\n\nIf the problem persists, you may have a damaged Arduino Board.\n\n\n\n\nStep 4: Verifying that the sketch uploaded.\n\n\n\n\nIf an LED on your Arduino Board is flashing: \nCongratulations! You have flashed an Arduino Board!\n   \n\n\nIf the Arduino Board is not flashing, your board may be damaged.", 
            "title": "Arduino Troubleshooting"
        }, 
        {
            "location": "/Arduino/ArduinoStartUP/#ensuring-connection-to-your-arduino-compatible-board", 
            "text": "", 
            "title": "Ensuring connection to your arduino compatible board"
        }, 
        {
            "location": "/Arduino/ArduinoStartUP/#step-1-ensuring-power-connection", 
            "text": "Ensure that your Arduino Board is plugged into your computer, and that  at least one  LED light on the Arduino board is lit.     If an LED is lit,  proceed to Step 2 .     If an LED is not lit, there may be a fault with either your USB port, USB cable, or Arduino board.      To troubleshoot this, try plugging the Arduino board to a  different USB port  on your computer, or try a  different USB  cable.     If these do not work, you may have a damaged Arduino Board.", 
            "title": "Step 1: Ensuring power connection."
        }, 
        {
            "location": "/Arduino/ArduinoStartUP/#step-2-ensuring-communication-between-computer-and-arduino-board", 
            "text": "Right-Click on your Start Menu Icon and Select  \"Device Manager\" . A long list of devices should be displayed.    Look for the label  \"Ports (COM   LPT)\"  and click the drop down arrow. You should see at least one entry named  \"USB-SERIAL CH340 (COMX)\"     If the USB-SERIAL entry is present, proceed to Step 3.    If the USB-SERIAL entry is not present. You may have a faulty USB cable, you do not have the  correct CH340 drivers installed , or a damaged Arduino board.    To troubleshoot this, install the latest CH340 drivers  CH340 Drivers    After the driver installation,  disconnect and reconnect  the Arduino board, the USB-SERIAL entry should be present, if not try a different USB cable.    If this also does not work, you maybe have a damaged Arduino Board.", 
            "title": "Step 2: Ensuring communication between computer and Arduino Board."
        }, 
        {
            "location": "/Arduino/ArduinoStartUP/#step-3-ensuring-that-the-arduino-board-is-flashable", 
            "text": "Open the Arduino IDE, Select  File -  Example -  0.1 Basics -  Blink . Next select  Tools -  Board  and select your Arduino Board.     Next select  Tools -  Port  and select the serial port. There should be only one port, labelled  \"COMX\" .      Next press the  Right-Arrow  to upload the sketch to your Arduino. The Arduino IDE should have displayed  \"Uploading Done.\"         If all the above has been completed, proceed to Step 4.   If your Arduino IDE does not list the serial port, restart the Arduino IDE.  If the Arduino IDE says  \"Problem Uploading to Board\" , Unplug the Arduino Board, Restart the Arduino IDE, reconnect the Arduino Board and  restart Step 3 .  If the problem persists, you may have a damaged Arduino Board.", 
            "title": "Step 3: Ensuring that the Arduino board is flashable."
        }, 
        {
            "location": "/Arduino/ArduinoStartUP/#step-4-verifying-that-the-sketch-uploaded", 
            "text": "If an LED on your Arduino Board is flashing:  Congratulations! You have flashed an Arduino Board!      If the Arduino Board is not flashing, your board may be damaged.", 
            "title": "Step 4: Verifying that the sketch uploaded."
        }, 
        {
            "location": "/Arduino/A6GSMGPRS/", 
            "text": "GOOUUU TECH A6 GSM/GPRS DEV BOARD MODULE WITH ANTENNA\n\n\n\n\n\n\nThe A6 Module is a professional serial GSM/GPRS development board. The A6 supports GPRS and SMS data transmission.\nThe A6 communicates with microcontroller via UART port.\n\n\nUser Guide\n\n\nWhen connecting your A6 to your TTL module, follow the following table to guide you with correct wiring.\n\n\n\n\n\n\n\n\nTTL Module\n\n\nA6 GSM Module\n\n\n\n\n\n\n\n\n\n\nVCC\n\n\nEN\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\nRX\n\n\nU_TXD\n\n\n\n\n\n\nTX\n\n\nU_RXD\n\n\n\n\n\n\n\n\nTo power your module use the micro USB port on the A6 board. \nWhen connecting your board for serial communication, use a Baudrate of 115200.", 
            "title": "A6 GSM/GPRS Dev Board"
        }, 
        {
            "location": "/Arduino/A6GSMGPRS/#goouuu-tech-a6-gsmgprs-dev-board-module-with-antenna", 
            "text": "The A6 Module is a professional serial GSM/GPRS development board. The A6 supports GPRS and SMS data transmission.\nThe A6 communicates with microcontroller via UART port.", 
            "title": "GOOUUU TECH A6 GSM/GPRS DEV BOARD MODULE WITH ANTENNA"
        }, 
        {
            "location": "/Arduino/A6GSMGPRS/#user-guide", 
            "text": "When connecting your A6 to your TTL module, follow the following table to guide you with correct wiring.     TTL Module  A6 GSM Module      VCC  EN    GND  GND    RX  U_TXD    TX  U_RXD     To power your module use the micro USB port on the A6 board. \nWhen connecting your board for serial communication, use a Baudrate of 115200.", 
            "title": "User Guide"
        }, 
        {
            "location": "/Arduino/RAMPSPG/", 
            "text": "Serial to USB Arduino Driver Guide\n\n\n\n\nArduino boards come with two different USB chips, 16U2 and CH340, which come with two different drivers. \nThat is why we have made you a handy guide for loading your drivers.\nWe have even gathered all the files you will need in a zip file, that you can find  in the table below.\n\n\n\n\n\n\n\n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}\n.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}\n.tg .tg-wm6t{font-weight:bold;font-size:16px}\n.tg .tg-24i8{font-size:24px;vertical-align:top}\n\n\n\n\n\n  \n\n    \nUSB to serial Arduino guide\n\n  \n\n  \n\n    \nChip type\n\n    \nDrivers\n\n  \n\n  \n\n    \n16U2\n\n    \n16U2 Driver\n\n  \n\n  \n\n    \nCH340\n\n    \nCH340 Driver", 
            "title": "USB to Serial Arduino Drivers"
        }, 
        {
            "location": "/Arduino/RAMPSPG/#serial-to-usb-arduino-driver-guide", 
            "text": "Arduino boards come with two different USB chips, 16U2 and CH340, which come with two different drivers. \nThat is why we have made you a handy guide for loading your drivers.\nWe have even gathered all the files you will need in a zip file, that you can find  in the table below.    \n.tg  {border-collapse:collapse;border-spacing:0;}\n.tg td{font-family:Arial, sans-serif;font-size:14px;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}\n.tg th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:10px 5px;border-style:solid;border-width:1px;overflow:hidden;word-break:normal;border-color:black;}\n.tg .tg-wm6t{font-weight:bold;font-size:16px}\n.tg .tg-24i8{font-size:24px;vertical-align:top}  \n   \n     USB to serial Arduino guide \n   \n   \n     Chip type \n     Drivers \n   \n   \n     16U2 \n     16U2 Driver \n   \n   \n     CH340 \n     CH340 Driver", 
            "title": "Serial to USB Arduino Driver Guide"
        }, 
        {
            "location": "/Arduino/JDY08/", 
            "text": "Setting up your Bluetooth / BLE Module!\n\n\n(HC-05/6 or JDY-08 / AT-09)\n\n\n\n\nYou will need:\n\n\n\n\n1 x \nBluetooth Module (HC-05/6 or JDY-08 / AT-09)\n  \n\n\n1 x \nFTDI TTL Serial Module\n\n\n\n\nTo Connect your Bluetooth Module to the FTDI\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBluetooth Module\n\n\nFTDI Board\n\n\n\n\n\n\n\n\n\n\nVCC\n\n\nVCC\n\n\n\n\n\n\nRX\n\n\nTX\n\n\n\n\n\n\nTX\n\n\nRX\n\n\n\n\n\n\nGND\n\n\nGND\n\n\n\n\n\n\n\n\nGuide to testing Bluetooth Module\n\n\n\n\n\n\nUpon plugging the FTDI into your computer, a red LED on the bluetooth module should start blinking.  \n\n\n\n\n\n\nOpen your Arduino IDE, set your COM port to the COM port of the FTDI module, then open the Serial Monitor, and set the \nbaudrate to 115200\n. \n\n\n\n\n\n\nOn your smartphone, open your bluetooth settings, and you should see a bluetooth device by the name of either, \n\"HC-05\", \"HC-06\", \"JDY-08\", \"AT-09\"\n, depending on\n    the module you have.  \n\n\n\n\n\n\nPair with the module\n, using one of the following pairing codes \n\"0000\", \"000000\", \"1234\", \"123456\"\n, as the pairing code varies between modules.  \n\n\n\n\n\n\nOnce paired, download a \nBLE Serial Communication App\n, on Android, we recommend, \n\"Serial Bluetooth Terminal\"\n, on iOS, we recommend \n\"BluTerm\"\n.   \n\n\n\n\n\n\nInside the Serial Communication App, you will need to connect to the bluetooth module, and the Red Blinking LED on the module should now be a \nsolid red\n LED.  \n\n\n\n\n\n\nType \n\"Test\"\n into the Serial Communication App, and \n\"Test\"\n should appear in the Serial Monitor.   \n\n\n\n\n\n\nIf you see a strange output in the Serial Monitor, such as \n?f\n#?\"?\u6018\u2e2e\n, change the baud rate to \n9600, 115200, or 19200\n, and send \n\"Test\"\n again, and there should be\n a correct output.", 
            "title": "Set-up Bluetooth Module"
        }, 
        {
            "location": "/Arduino/JDY08/#setting-up-your-bluetooth-ble-module", 
            "text": "(HC-05/6 or JDY-08 / AT-09)", 
            "title": "Setting up your Bluetooth / BLE Module!"
        }, 
        {
            "location": "/Arduino/JDY08/#you-will-need", 
            "text": "1 x  Bluetooth Module (HC-05/6 or JDY-08 / AT-09)     1 x  FTDI TTL Serial Module", 
            "title": "You will need:"
        }, 
        {
            "location": "/Arduino/JDY08/#to-connect-your-bluetooth-module-to-the-ftdi", 
            "text": "Bluetooth Module  FTDI Board      VCC  VCC    RX  TX    TX  RX    GND  GND", 
            "title": "To Connect your Bluetooth Module to the FTDI"
        }, 
        {
            "location": "/Arduino/JDY08/#guide-to-testing-bluetooth-module", 
            "text": "Upon plugging the FTDI into your computer, a red LED on the bluetooth module should start blinking.      Open your Arduino IDE, set your COM port to the COM port of the FTDI module, then open the Serial Monitor, and set the  baudrate to 115200 .     On your smartphone, open your bluetooth settings, and you should see a bluetooth device by the name of either,  \"HC-05\", \"HC-06\", \"JDY-08\", \"AT-09\" , depending on\n    the module you have.      Pair with the module , using one of the following pairing codes  \"0000\", \"000000\", \"1234\", \"123456\" , as the pairing code varies between modules.      Once paired, download a  BLE Serial Communication App , on Android, we recommend,  \"Serial Bluetooth Terminal\" , on iOS, we recommend  \"BluTerm\" .       Inside the Serial Communication App, you will need to connect to the bluetooth module, and the Red Blinking LED on the module should now be a  solid red  LED.      Type  \"Test\"  into the Serial Communication App, and  \"Test\"  should appear in the Serial Monitor.       If you see a strange output in the Serial Monitor, such as  ?f #?\"?\u6018\u2e2e , change the baud rate to  9600, 115200, or 19200 , and send  \"Test\"  again, and there should be\n a correct output.", 
            "title": "Guide to testing Bluetooth Module"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/", 
            "text": "Build guide to basic Arduino 2WD robot car\n\n\nEverything you need to know to get you started on building your own Arduino 2WD robot car.\n\n\nRelevant links\n\n\nGet your very own robot car kit here\n.\n\n\nIf you want to read about a noob's experience with building this car for the first time then follow this link!\n\nRobot cars: Because you're never too old for a remote controlled car.\n\n\nParts list\n\n\n\n\n\n\n\n\nComponents\n\n\nQuantity\n\n\n\n\n\n\n\n\n\n\nArduino Sensor Shield v5.0\n\n\n1\n\n\n\n\n\n\nL298N Dual H-Bridge Motor Driver\n\n\n1\n\n\n\n\n\n\nArduino Uno Board\n\n\n1\n\n\n\n\n\n\nServo Mounting Brackets\n\n\n1\n\n\n\n\n\n\nServo Motor (SG90)\n\n\n1\n\n\n\n\n\n\nArduino USB Cable\n\n\n1\n\n\n\n\n\n\nHC-SR04 Sensor\n\n\n1\n\n\n\n\n\n\nDC Motors\n\n\n2\n\n\n\n\n\n\n2.51\u201d Rubber Wheels\n\n\n2\n\n\n\n\n\n\nAcrylic Robot Chassis\n\n\n1\n\n\n\n\n\n\nSpeed Encoders\n\n\n2\n\n\n\n\n\n\nDC 1.5V Battery Holder\n\n\n1\n\n\n\n\n\n\nMotor Blocks\n\n\n4\n\n\n\n\n\n\nON-OFF Switch\n\n\n1\n\n\n\n\n\n\nMetal Ball Caster\n\n\n1\n\n\n\n\n\n\nJumper Wire Set\n\n\n1\n\n\n\n\n\n\nBluetooth Module\n\n\n1\n\n\n\n\n\n\nBrass standoffs\n\n\n4\n\n\n\n\n\n\n\n\n\n\nSuggested Tools\n\n\n\n\n\n\nNeedle nose pliers\n\n\n\n\n\n\nWire cutters\n\n\n\n\n\n\nSoldering iron\n\n\n\n\n\n\nScrewdriver\n\n\n\n\n\n\nBuild Guide\n\n\n\n\n\n\nFirst remove all the adhesive protection from the robot chassis and the motor blocks.\n\n\n\n\n\n\nUse two motor blocks per motor to install the motors on the bottom of the chassis using two long screws and two nuts each and attach the wheels.\n\n\n\n\n\n\n\n\nClip the ON/OFF switch into the rectangular space in the middle of the chassis.\n\n\n\n\n\n\nUsing the 4 Brass standoffs and eight screws attach the metal ball caster to the front bottom of the chassis.\n\n\n\n\n\n\n\n\nThe best place to install the battery holder is the front of the chassis, however all components can be attached as you desire. Attach the battery holder using two screws and two nuts. (optional: add two plastic spacers to raise the battery holder off the chassis).\n\n\n\n\n\n\nAttach the motor driver to the bottom of the chassis in the middle. The motor driver only needs to be attached with two screws and two nuts.\n\n\n\n\n\n\nAttach the Arduino Uno board behind the battery holder and in front of the ON/OFF switch, using two screws and two nuts. (Optional: Add plastic spacers to raise Arduino from the chassis).\nSuggested placements of the battery holder, Uno board and motor driver is shown in the image below.\n\n\n\n\n\n\n\n\nNext up, position the Servo Motor between the two brackets and screw them together as shown in the pictures below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttach the servo holder to the back of the chassis with two screws and two nuts. The motor can then be clipped in to servo holder.\n\n\n\n\n\n\nNext up is wiring your robot. Firstly, attach the red wire of the battery holder to the \u201cO\u201d part of the ON/OFF switch. This can be done by either hooking the wire on or soldering.\n\n\n\n\n\n\nAttach power and ground wires to the motor through soldering, and connect to motor driver correct connection spots as shown below.\n    \n\n\n\n\n\n\nNow connect a power wire (red) to the \u201cI\u201d part of the switch and connect the other end to the first connection spot of the motor driver (Shown in the pink circle in the above image).\n\n\n\n\n\n\nConnect the black wire of the power holder to the second connection spot on the motor driver as well as another brown wire (Shown in the green circle in the image above). \n\n\n\n\n\n\nConnect another wire from the third connection spot on the motor driver (Shown in yellow circle in the image above) and connect this wire to a Vcc pin on the Arduino shield.\n\n\n\n\n\n\nConnect the brown wire from the second connection spot to a ground pin on the Arduino shield.\n\n\n\n\n\n\nPlace the Arduino Sensor Shield on top of the Arduino board. Ensure you connect the correct matching pins on either board.\n\n\n\n\n\n\nUsing the jumper wires provided connect 4 to the HC-SR04. Colour coordinate your jumpers according to this guide to make your life easier. Connect the wires as shown in the image below.\n\n\n\n\n\n\nConnect the wires of your servo motor as shown in the image below.\n\n\n\n\n\n\nLastly connect the motor driver pins to the Arduino Sensor Shield pins according to the image below.\n\n\n\n\n\n\nNext you will want to connect your Bluetooth module as well. Connect your TXD pin on your Bluetooth module to the RX pin on the Arduino Shield and your RXD pin to your TX pin as per the image below. Connect the VCC pin and GND pin to a V and G pin respectively on the Arduino Shield (at pin 0) as seen below.\n\n\n\n\n\n\nStarting code is provided which includes code to run your motors, link your Bluetooth module as well as primitive obstacle avoidance. You can use this code as your starting pointing to improving your robot\u2019s obstacle maneuvering.\n\n\n\n\n\n\nBelow is a table to show corresponding pin numbers to possibly make your life easier if you are a complete beginner. Pin locations are not set in stone, but will help you if you directly load our sample code without any changes. Below is also a diagram to help you see general wiring of your robot car.\n    \n\n\n\n\n\n\n\n\nYou can also download a copy of our build guide \nhere\n.\n\n\nCode guide\n\n\nBelow is some base code for your robot car including obstacle avoidance.\n\n\n\n\n\n\nRobot car obstacle avoidance code\n\n\n\n\n\n\nRobot car no obstacle avoidance\n\n\n\n\n\n\nAlternatively check out the link below for another build guide.\n\n\n2WD robot build guide", 
            "title": "Arduino 2WD robot car"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#build-guide-to-basic-arduino-2wd-robot-car", 
            "text": "Everything you need to know to get you started on building your own Arduino 2WD robot car.", 
            "title": "Build guide to basic Arduino 2WD robot car"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#relevant-links", 
            "text": "Get your very own robot car kit here .  If you want to read about a noob's experience with building this car for the first time then follow this link! Robot cars: Because you're never too old for a remote controlled car.", 
            "title": "Relevant links"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#parts-list", 
            "text": "Components  Quantity      Arduino Sensor Shield v5.0  1    L298N Dual H-Bridge Motor Driver  1    Arduino Uno Board  1    Servo Mounting Brackets  1    Servo Motor (SG90)  1    Arduino USB Cable  1    HC-SR04 Sensor  1    DC Motors  2    2.51\u201d Rubber Wheels  2    Acrylic Robot Chassis  1    Speed Encoders  2    DC 1.5V Battery Holder  1    Motor Blocks  4    ON-OFF Switch  1    Metal Ball Caster  1    Jumper Wire Set  1    Bluetooth Module  1    Brass standoffs  4", 
            "title": "Parts list"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#suggested-tools", 
            "text": "Needle nose pliers    Wire cutters    Soldering iron    Screwdriver", 
            "title": "Suggested Tools"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#build-guide", 
            "text": "First remove all the adhesive protection from the robot chassis and the motor blocks.    Use two motor blocks per motor to install the motors on the bottom of the chassis using two long screws and two nuts each and attach the wheels.     Clip the ON/OFF switch into the rectangular space in the middle of the chassis.    Using the 4 Brass standoffs and eight screws attach the metal ball caster to the front bottom of the chassis.     The best place to install the battery holder is the front of the chassis, however all components can be attached as you desire. Attach the battery holder using two screws and two nuts. (optional: add two plastic spacers to raise the battery holder off the chassis).    Attach the motor driver to the bottom of the chassis in the middle. The motor driver only needs to be attached with two screws and two nuts.    Attach the Arduino Uno board behind the battery holder and in front of the ON/OFF switch, using two screws and two nuts. (Optional: Add plastic spacers to raise Arduino from the chassis).\nSuggested placements of the battery holder, Uno board and motor driver is shown in the image below.     Next up, position the Servo Motor between the two brackets and screw them together as shown in the pictures below.             Attach the servo holder to the back of the chassis with two screws and two nuts. The motor can then be clipped in to servo holder.    Next up is wiring your robot. Firstly, attach the red wire of the battery holder to the \u201cO\u201d part of the ON/OFF switch. This can be done by either hooking the wire on or soldering.    Attach power and ground wires to the motor through soldering, and connect to motor driver correct connection spots as shown below.\n        Now connect a power wire (red) to the \u201cI\u201d part of the switch and connect the other end to the first connection spot of the motor driver (Shown in the pink circle in the above image).    Connect the black wire of the power holder to the second connection spot on the motor driver as well as another brown wire (Shown in the green circle in the image above).     Connect another wire from the third connection spot on the motor driver (Shown in yellow circle in the image above) and connect this wire to a Vcc pin on the Arduino shield.    Connect the brown wire from the second connection spot to a ground pin on the Arduino shield.    Place the Arduino Sensor Shield on top of the Arduino board. Ensure you connect the correct matching pins on either board.    Using the jumper wires provided connect 4 to the HC-SR04. Colour coordinate your jumpers according to this guide to make your life easier. Connect the wires as shown in the image below.    Connect the wires of your servo motor as shown in the image below.    Lastly connect the motor driver pins to the Arduino Sensor Shield pins according to the image below.    Next you will want to connect your Bluetooth module as well. Connect your TXD pin on your Bluetooth module to the RX pin on the Arduino Shield and your RXD pin to your TX pin as per the image below. Connect the VCC pin and GND pin to a V and G pin respectively on the Arduino Shield (at pin 0) as seen below.    Starting code is provided which includes code to run your motors, link your Bluetooth module as well as primitive obstacle avoidance. You can use this code as your starting pointing to improving your robot\u2019s obstacle maneuvering.    Below is a table to show corresponding pin numbers to possibly make your life easier if you are a complete beginner. Pin locations are not set in stone, but will help you if you directly load our sample code without any changes. Below is also a diagram to help you see general wiring of your robot car.\n         You can also download a copy of our build guide  here .", 
            "title": "Build Guide"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#code-guide", 
            "text": "Below is some base code for your robot car including obstacle avoidance.    Robot car obstacle avoidance code    Robot car no obstacle avoidance    Alternatively check out the link below for another build guide.  2WD robot build guide", 
            "title": "Code guide"
        }, 
        {
            "location": "/Arduino/Alphabot/", 
            "text": "ALPHABOT BUILD GUIDE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTEP 1:\n First and foremost you should connect your Arduino to the Arduino slot on the Alphabot board, as shown in the image below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTEP 2:\n Attach corresponding cables to their module as shown in the table and picture below.\n\n\n\n\n\n\n\n\nModule\n\n\nWire Number\n\n\n\n\n\n\n\n\n\n\nSpeed Measuing interface\n\n\n3 Wires x 2\n\n\n\n\n\n\nObstacle avoidance interface\n\n\n4 Wires x 2\n\n\n\n\n\n\nTracker Sensor\n\n\n7 Wires x1\n\n\n\n\n\n\nUltrasonic mount\n\n\n4 Wires x1\n\n\n\n\n\n\n\n\n\n\nSTEP 3:\n Attach the ultrasonic sensor to the ultrasonic board as shown in the image below.\n\n\n\n\nSTEP 4:\n The servo slots into the remaining plastic mount as shown below. Clip on the plastic servo horn that comes with your servo, onto the top of the servo.\n\n\n\n\nSTEP 5:\n Attach the obstacle interface board to the corresponding pins found at the bottom front of the Alpha board (5v, GND, AR/LR, DR/DL).\n\n\n\n\nSTEP 6:\n Next you want to connect the speed measuring inerfaces to the pins just below those of the obstacle interface on the Alpha board (5V, GND, CNTR/CNTL)\n\n\n\n\nSTEP 7:\n Attach the tracker sensor to the back of the robot.\n\n\nSTEP 8:\n The alphabot comes with 3 different sizes of spacers, as shown below. Attach the smallest spacers to the plastic mount you linked your servo with.\n Following this you can attach the servo and its mount to the Alphabot board.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTEP 9:\n Attached ultrasonic sensor module to its corresponding mount/board as shown and attach to the servo.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTEP 10:\n Attach the two yellow wheel motors to the two Motor slots on the bottom of the Alphaboard, as shown. You will be using the 4 T shapped plastic mounts to hold the motor in place.\n\n\n \n  \n\n\nSTEP 11:\n Attach the obstacle avoidance sensors to the end holes of the front side and the servo wires to the 3 pins in the middle. (GND(brown), 5V(red), S1(orange))\n\n\nSTEP 12:\n Slot the speed monitoring sensors (encoder) in the holes next to the battery holder, these holes might be a little bit tight,\n but don't worry, you can use a file to make them a little bit bigger.\n\n\n In the image below, the red circle shows the speed monitoring sensor and the green shows the obstacle avoidance sensors.\n\n\n\n\nSTEP 13:\n Attach wheels to the motors.\n\n\n\n\nSTEP 14:\n Connect rolling metal wheel to stand alone Alphaboard at the bottom as shown.\n\n\n\n\nSTEP 15:\n Connect largest spacers to your bottom standalone Alphabot board, make sure you have at least 6 spacers spread across the board.\n\n\nSTEP 16:\n Connect tracker sensor to bottom stand alone body piece.\n\n\n STEP 17:\nLASTLY! Connect stand alone body to Arduino body at spacer sites.", 
            "title": "Arduino Alphabot"
        }, 
        {
            "location": "/Arduino/Projects/Tamaguino/Tamaguino/", 
            "text": "Tamaguino\n\n\n(Original design by Alojz Jakob)\n\n\n\n\nThe Tamaguino is an Arduino spin-off of the classic Tamagotchi, which was a toy introduced in the 90s that allowed users to pick a virtual pet and take responsibility for feeding, playing with, and teaching it.\n\nThis Tamagotchi system then had consequences for neglecting the pet, and the virtual dinosaur, cat or other strange or wonderful digital animal could die if the tasks weren't performed on a regular basis,\nalthough if you managed to keep your Tamagotchi alive, you would get to help it grow, age and interact with the virtual world around it.  \n\n\nThe Tamaguino is a project by Alojz Jakob, released for free under the GNU - General Public License.\nUsing an Arduino, an OLED display, a buzzer, some buttons, a few wires, and some coding of course, Aljoz managed to bring our childhood back to life.\nAfter learning about this project, we just knew we had to make one, and with the following guide, you now you can too!\n\n\n\n\n\n\n\n\nMaterial\n\n\nQuantity\n\n\n\n\n\n\n\n\n\n\nArduino Pro Mini\n\n\n1\n\n\n\n\n\n\n4cm x 6cm prototyping PCB\n\n\n1\n\n\n\n\n\n\nLiPo rechargeable battery 720 mAh\n\n\n1\n\n\n\n\n\n\nMicro USB LiPo charging circuit\n\n\n1\n\n\n\n\n\n\n128x64 OLED Display\n\n\n1\n\n\n\n\n\n\nBuzzer\n\n\n1\n\n\n\n\n\n\nPush Buttons\n\n\n3\n\n\n\n\n\n\n10K Resistors\n\n\n3\n\n\n\n\n\n\nJumper wires\n\n\n9\n\n\n\n\n\n\nSmall on/off switch\n\n\n1\n\n\n\n\n\n\nSoldering iron\n\n\nOptional\n\n\n\n\n\n\nSolder\n\n\nOptional\n\n\n\n\n\n\nTamaguino case\n\n\nOptional\n\n\n\n\n\n\n\n\nDiagram\n\n\n\n\nInstruction\n\n\n\n\nSolder the bottom row of your button to the bottom row of your PCB as shown in the image below. Your bottom row of pins for your buttons will all be grounded\n   \n\n   \nThe image above shows how you can ground your buttons without clutter around the GND pin on your Pro Mini\n\n\nSolder your resistors to the slots next to each of your button's signal pins as shown in the image below, and bridge the solder to your button pins.\n   \n\n   \n The image above shows where you can solder your buttons as well as the resistors for an easy layout.\n\n\nNext you will solder your Pro Mini to the OTHER SIDE of the PCB, try to place your Pro mini about 3 rows above the top pins of your buttons, solder at pin 7, 8, 9, A4, A5, GND and VCC as shown in the image below.\n   \n\n   \n The image above shows placement of the Pro Mini as well as highlights the pins for the OLED.\n\n\nYou will now solder the resistors connected to your top signal pins to the respective pins for the code, we used pin 7, 8 and 9 on our Pro Mini\n\n\nSolder your OLED display to the PCB just above the buttons, so that your OLED pins peak out just above your Pro Mini \u2013 as shown by the orange circle in the image above.\n\n\nStick down your LiPo charging module to the top of your PCB.\n\n\nWith your basic components now attached to the PCB, you can start wiring. Solder a wire from pin A4 to the SDA pin on your OLED (shown in blue on the diagram and orange in the images)\n\n\nSolder a wire from pin A5 to SCL pin on your OLED (shown in yellow in the diagram and red in the images)\n\n\nConnect GND on your OLED to GND on your mini, and then connect VCC to VCC.\n\n\nYou can now solder your buzzer onto your board as shown in the image. Solder one pin to pin 6 and the other to GND.\n\n\nOn your LiPo charging module, solder one wire from OUT- to GND, and then solder another wire from OUT+ to one side of your switch \u2013 as shown in the image below.\n\n\nSolder the red wire (V) to B+ on your charging module and the brown/black wire (G) to B- as shown in the image below.\n    \n\n\nFinally, ground the other side of your switch by connecting a GND pin to the GND pin on the microcontroller.\n\n\n\n\nCode\n\n\nThe original code for this project can be found at \nAlojz Jakob's Tamaguino page\n we have modified the code to save the stats of our dinosaur with a save button.\nThe stats are saved on the EEPROM of our Arduino Pro Mini.\nYou can find our editted version of the code below.\n\n\nTamaguino_EEPROM DOWNLOAD\n\n\n\n/* Tamaguino\n by Alojz Jakob \nhttp://jakobdesign.com\n\n\n ********** TAMAGUINO ***********\n * Tamagotchi clone for Arduino *\n ********************************\n\n*/\n\n#include \nSPI.h\n\n#include \nWire.h\n\n#include \nAdafruit_GFX.h\n\n#include \nAdafruit_SSD1306.h\n\n#include \nEEPROM.h\n\n#define OLED_RESET 4\nAdafruit_SSD1306 display(OLED_RESET);\n\nconst int button1Pin = 9;\nconst int button2Pin = 8; \nconst int button3Pin = 7; \n\nconst int sound = 6; \n\nint button1State = 0;\nint button2State = 0;\nint button3State = 0;\nint hi_address = 0;\nint hunger_address=2;\nint happiness_address=3;\nint health_address =4;\nint discipline_address=5;\nint weight_address=6;\nint age_address=7;\n\n// splash 48x26\nconst unsigned char splash1 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, \n0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, \n0x00, 0x00, 0x00, 0x00, 0x07, 0xb9, 0xce, 0x78, 0x0f, 0xc0, 0x0f, 0xf9, 0xcf, 0xfc, 0x1f, 0xe0, \n0x1f, 0xf9, 0xcf, 0xfe, 0x3f, 0xf0, 0x3c, 0x79, 0xcf, 0x1e, 0x38, 0x78, 0x38, 0x39, 0xce, 0x0e, \n0x70, 0x38, 0x38, 0x39, 0xce, 0x0e, 0x70, 0x38, 0x38, 0x39, 0xce, 0x0e, 0x70, 0x38, 0x38, 0x39, \n0xce, 0x0e, 0x70, 0x38, 0x38, 0x39, 0xce, 0x0e, 0x70, 0x38, 0x3c, 0x79, 0xce, 0x0e, 0x78, 0x70, \n0x1f, 0xf9, 0xce, 0x0e, 0x3f, 0xf0, 0x0f, 0xf9, 0xce, 0x0e, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x10, 0x25, 0x37, 0x53, 0x90, 0xe1, 0xb8, 0x29, 0x22, \n0x51, 0xd0, 0x93, 0x90, 0x19, 0x22, 0x52, 0x50, 0x92, 0x10, 0x11, 0x23, 0x73, 0xd0, 0xf1, 0x98, \n0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n};\n//splash dino 80x40\nconst unsigned char splash2 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xff, 0xe0, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, \n0xe1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x3e, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x5e, 0xc1, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0x80, 0x2f, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x01, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x07, 0xf4, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0xe0, 0x1f, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, \n0xaa, 0xbc, 0x7f, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x55, 0x5f, 0xff, 0xa0, 0x00, 0x00, \n0x00, 0x00, 0x00, 0xea, 0xaa, 0xaf, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x03, 0xd5, 0x55, 0xff, \n0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xab, 0xae, 0xbf, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x1f, 0x5f, 0xdf, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xee, 0xfb, 0x6f, 0xf4, 0x00, \n0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf7, \n0xff, 0xff, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xa0, 0x00, 0x00, 0x00, \n0x00, 0x1f, 0xff, 0xff, 0xff, 0xfd, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xdf, 0xff, 0xfe, 0xfe, \n0x80, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xef, 0xef, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, \n0x9f, 0xdf, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x1f, 0xa1, 0xfc, 0x7f, 0x80, 0x00, \n0x0f, 0xff, 0xff, 0xe0, 0x1f, 0xb0, 0x03, 0xbf, 0x80, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x0f, 0xc0, \n0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n};\n\n\n// front grass 32x10\nconst unsigned char grass_front [] PROGMEM = {\n0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x08, 0x89, 0xc0, 0x48, 0x5c, 0x50, 0x84, \n0x9c, 0x48, 0x50, 0x22, 0x88, 0x80, 0x44, 0x22, 0x40, 0x84, 0x2e, 0x21, 0x49, 0x24, 0xa4, 0xb1, \n};\n//grass 2 (dino walking on) 4x8\nconst unsigned char grass [] PROGMEM = {\n0xff, 0xee, 0xbb, 0x55, 0xaa, 0x11, \n};\n\n//trees\nconst unsigned char trees [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x10, 0x05, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x15, 0x00, \n0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x55, 0x40, 0x00, 0x55, 0x40, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x15, 0x04, 0x40, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x02, 0xa0, 0x00, 0x00, 0x01, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, \n0x00, 0x28, 0x84, 0x24, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x82, 0x00, \n0x00, 0x01, 0x10, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, \n0x41, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x88, 0x82, 0x40, 0x91, 0x04, 0x24, \n0x41, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x44, 0x44, 0x11, 0x04, 0x10, 0x11, 0x04, 0x01, 0x00, 0x00, \n0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, \n0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x10, 0x00, 0x80, 0x00, 0x00, 0x08, 0x00, 0x04, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x20, 0x00, 0x01, 0x00, \n0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, \n};\n\nconst unsigned char mountains [] PROGMEM = {\n0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, \n0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, \n0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, \n0x03, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, \n0x07, 0x74, 0x07, 0x80, 0x10, 0x00, 0x00, 0x80, 0x00, 0x06, 0x80, 0x00, 0x00, 0x00, 0x00, 0xd5, \n0x0e, 0xc2, 0x0d, 0xc0, 0x28, 0x01, 0x01, 0xc1, 0x00, 0x1f, 0x40, 0x00, 0x00, 0x00, 0x01, 0x28, \n0x1d, 0x13, 0x1b, 0x60, 0x54, 0x03, 0x83, 0xa3, 0x80, 0x36, 0x20, 0x00, 0x00, 0x00, 0x06, 0xd0, \n0x3a, 0x41, 0xb4, 0x30, 0xe2, 0xcc, 0xf7, 0x57, 0xc0, 0xd8, 0x10, 0x00, 0x00, 0x00, 0x19, 0x20, \n0x68, 0x84, 0x49, 0x19, 0xa1, 0x36, 0x5d, 0x2a, 0xa1, 0xa0, 0x10, 0x00, 0x00, 0x00, 0xe6, 0x40, \n0xd2, 0x10, 0xa4, 0x0c, 0x80, 0x8c, 0x1a, 0x15, 0x57, 0x40, 0x88, 0x00, 0x00, 0x1f, 0x38, 0x80, \n0x49, 0x08, 0x00, 0x06, 0x02, 0xc0, 0x24, 0x18, 0x0b, 0x80, 0x05, 0x0b, 0x8c, 0xe0, 0x23, 0x00, \n0xa0, 0x20, 0x00, 0x11, 0x00, 0x00, 0x48, 0x84, 0x84, 0x02, 0x20, 0x5d, 0xf3, 0x00, 0xcd, 0xc0, \n0x50, 0x00, 0x04, 0x04, 0x01, 0x44, 0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x04, 0x07, 0x10, 0x20, \n0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x40, 0x40, 0x00, 0x10, \n0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x01, 0x11, 0x01, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x20, 0x02, \n};\n\n\nconst unsigned char cloud2 [] PROGMEM = {\n0x04, 0x70, 0x18, 0x00, 0x6e, 0xfb, 0x7c, 0xee, 0xff, 0xff, 0xfd, 0xff, 0x6f, 0xfb, 0x38, 0xee, \n0x07, 0x70, 0x52, 0x00, \n};\n\n\n\n// walking sprites\n// walk right\nconst unsigned char dinoWalk0 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x60, 0x00, \n0x00, 0x00, 0x1f, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x7b, 0xff, \n0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x00, 0x00, 0x03, 0xff, 0x7f, 0xe0, 0x00, 0x00, 0x0f, \n0xf7, 0xde, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x3c, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x7a, 0x00, 0x00,\n};\nconst unsigned char dinoWalk1 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x60, 0x00, \n0x00, 0x00, 0x1f, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x37, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x7f, 0xff, \n0xfc, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xd8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, \n0xbf, 0xda, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, \n};\nconst unsigned char dinoWalk2 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x60, 0x00, \n0x00, 0x00, 0x1b, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x7f, 0x7f, \n0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, \n0xbf, 0xfa, 0x00, 0x00, 0x00, 0x7f, 0x78, 0x3c, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x5e, 0x00, 0x00,\n};\n// walk left\nconst unsigned char dinoWalk3 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xe0, 0x00, 0x00, \n0x00, 0x0f, 0x8f, 0xf8, 0x00, 0x00, 0x00, 0x1d, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xde, \n0x00, 0x00, 0x00, 0x1b, 0xff, 0xff, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0xc0, 0x00, 0x00, 0x00, \n0x7b, 0xef, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x5e, 0x3d, 0x00, 0x00,  \n};\nconst unsigned char dinoWalk4 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xe0, 0x00, 0x00, \n0x00, 0x0f, 0x8f, 0xf8, 0x00, 0x00, 0x00, 0x1d, 0xff, 0xec, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfe, \n0x00, 0x00, 0x00, 0x1b, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, \n0x5b, 0xfd, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x18, 0x0c, 0x00, 0x00, \n};\nconst unsigned char dinoWalk5 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xe0, 0x00, 0x00, \n0x00, 0x0f, 0x8f, 0xd8, 0x00, 0x00, 0x00, 0x1d, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0xfe, \n0x00, 0x00, 0x00, 0x1b, 0xff, 0xff, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, \n0x5f, 0xfd, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x1e, 0xfe, 0x00, 0x00, 0x00, 0x7a, 0x2f, 0x00, 0x00,\n};\n\n\n/* --------- GAME SPRITES ---------- */\nconst unsigned char dinoJump [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x60, 0x00, \n0x00, 0x00, 0x1f, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x7f, 0xdf, \n0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, \n0xff, 0xfe, 0x00, 0x00, 0x00, 0x7d, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x07, 0x80, 0x00, \n\n};\n\nconst unsigned char obstacle1 [] PROGMEM = {\n0x00, 0x00, 0x1e, 0x00, 0x2f, 0x00, 0x5e, 0x80, 0x5f, 0xc0, 0xb7, 0xc0, \n};\n\nconst unsigned char obstacle2 [] PROGMEM = {\n0x14, 0x00, 0x08, 0x00, 0x52, 0x00, 0x34, 0x00, 0x69, 0x40, 0xf0, 0x80, \n};\n\nconst unsigned char poop [] PROGMEM = {\n0x80, 0x88, 0x01, 0x81, 0x02, 0xe0, 0x27, 0x10, 0x0b, 0xf0, 0x1c, 0x08, \n};\n\n\n#define WALKSIZE 6\n//const unsigned char* const dinoWalk[WALKSIZE] PROGMEM = {\nconst unsigned char* dinoWalk[WALKSIZE] = {\n      //dinoWalk0,dinoWalk0,dinoWalk1,dinoWalk1,dinoWalk2,dinoWalk2,\n      //dinoWalk3,dinoWalk3,dinoWalk4,dinoWalk4,dinoWalk5,dinoWalk5\n      dinoWalk0,dinoWalk1,dinoWalk2,\n      dinoWalk3,dinoWalk4,dinoWalk5\n    };\nint walkPos=0;\nint walkXPos=0;\nbool walkAnimReverse=false;\nbool walkRight=false;\nint walkDirOffset=2;\n\n\n\n// EATING\n\nconst unsigned char eating1 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, \n0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, \n0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, \n0x00, 0x03, 0x7c, 0x7f, 0xfe, 0x00, 0x00, 0x02, 0xf9, 0xff, 0xfe, 0x00, 0x00, 0x0c, 0xf3, 0xff, \n0xff, 0x00, 0x00, 0x1f, 0xf4, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xf0, 0x7f, 0xff, 0xc0, 0x00, 0xff, \n0xf8, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, \n0x1f, 0xe7, 0xff, 0xe0, 0xff, 0xe0, 0x3f, 0xdf, 0xff, 0xde, 0xff, 0xf0, 0x7f, 0xbf, 0xff, 0xbf, \n0x7f, 0xf0, 0x7f, 0x7f, 0xfe, 0x77, 0xbf, 0xf8, 0x7f, 0x7f, 0xf9, 0xf7, 0xbf, 0xfc, 0x3f, 0xff, \n0xe7, 0xef, 0xbf, 0xfe, 0x5f, 0xfe, 0x1f, 0x1f, 0xbf, 0xff, 0x67, 0xf1, 0xf9, 0x1f, 0xbf, 0xff, \n0x38, 0x0f, 0xe8, 0x3f, 0xbf, 0xff, 0x1f, 0xff, 0xe0, 0x3f, 0xbf, 0xff, 0x0e, 0xfe, 0x40, 0xbf, \n0x6f, 0xff, 0x04, 0x54, 0x00, 0xff, 0x57, 0xff, 0x00, 0x10, 0x01, 0xfe, 0xab, 0xff, 0x00, 0x18, \n0x01, 0xfd, 0x55, 0xff, 0x00, 0x18, 0x05, 0xfa, 0xaa, 0xff, 0x00, 0x1d, 0x27, 0xf1, 0x55, 0x5f, \n0x00, 0x0f, 0x7f, 0xe0, 0xaa, 0xaf, 0x00, 0x07, 0xff, 0x80, 0x55, 0x57, 0x00, 0x03, 0xfe, 0x00, \n0x2a, 0xab, 0x00, 0x01, 0xf0, 0x00, 0x15, 0x55, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xaa, 0x00, 0x00, \n0x00, 0x00, 0x05, 0x55, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, \n\n};\nconst unsigned char eating2 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, \n0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, \n0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, \n0x00, 0x03, 0x7c, 0x7f, 0xfe, 0x00, 0x00, 0x02, 0xf9, 0xff, 0xfe, 0x00, 0x00, 0x0c, 0xf3, 0xff, \n0xff, 0x00, 0x00, 0x1f, 0xf4, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xf0, 0x7f, 0xff, 0xc0, 0x00, 0xff, \n0xf8, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, \n0x1f, 0xe7, 0xff, 0xe0, 0xff, 0xe0, 0x3f, 0xdf, 0xff, 0xde, 0xff, 0xf0, 0x7f, 0xbf, 0xff, 0xbf, \n0x7f, 0xf0, 0x7f, 0x7f, 0xfe, 0x77, 0xbf, 0xf8, 0x7f, 0x7f, 0xf9, 0xf7, 0xbf, 0xfc, 0x3f, 0xff, \n0xe7, 0xef, 0xbf, 0xfe, 0x5f, 0xfe, 0x1f, 0x1f, 0xbf, 0xff, 0x67, 0xf1, 0xf9, 0x1f, 0xbf, 0xff, \n0x38, 0x0f, 0xe8, 0x3f, 0xbf, 0xff, 0x1f, 0xff, 0xe1, 0x7f, 0x3f, 0xff, 0x0e, 0xfe, 0x41, 0xfe, \n0xef, 0xff, 0x04, 0xd4, 0x0b, 0xfd, 0x57, 0xff, 0x00, 0xd4, 0x0f, 0xfa, 0xab, 0xff, 0x00, 0x60, \n0x9f, 0xf5, 0x55, 0xff, 0x00, 0x75, 0xff, 0xca, 0xaa, 0xff, 0x00, 0x3f, 0xff, 0x05, 0x55, 0x5f, \n0x00, 0x1f, 0xfc, 0x02, 0xaa, 0xaf, 0x00, 0x07, 0xc0, 0x01, 0x55, 0x57, 0x00, 0x00, 0x00, 0x00, \n0xaa, 0xab, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xaa, 0x00, 0x00, \n0x00, 0x00, 0x05, 0x55, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, \n\n};\nconst unsigned char eating3 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, \n0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, \n0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, \n0x00, 0x03, 0x7c, 0x7f, 0xfe, 0x00, 0x00, 0x02, 0xf9, 0xff, 0xfe, 0x00, 0x00, 0x0c, 0xf3, 0xff, \n0xff, 0x00, 0x00, 0x1f, 0xf4, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xf0, 0x7f, 0xff, 0xc0, 0x00, 0xff, \n0xf8, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, \n0x1f, 0xe7, 0xff, 0xe0, 0xff, 0xe0, 0x3f, 0xdf, 0xff, 0xde, 0xff, 0xf0, 0x7f, 0xbf, 0xff, 0xbf, \n0x7f, 0xf0, 0x7f, 0x7f, 0xfe, 0x77, 0xbf, 0xf8, 0x7f, 0x7f, 0xf9, 0xf7, 0xbf, 0xfc, 0x3f, 0xff, \n0xe7, 0xef, 0xbf, 0xfe, 0x5f, 0xfe, 0x1f, 0xdf, 0xbf, 0xff, 0x67, 0xf1, 0xff, 0x3f, 0xbf, 0xff, \n0x38, 0x0f, 0xfc, 0xff, 0xbf, 0xff, 0x1f, 0xff, 0xf3, 0xff, 0x3f, 0xff, 0x0f, 0xff, 0xcf, 0xfe, \n0xef, 0xff, 0x00, 0x38, 0x3f, 0xf9, 0x57, 0xff, 0x07, 0x83, 0xff, 0xea, 0xab, 0xff, 0x01, 0xff, \n0xfe, 0x15, 0x55, 0xff, 0x00, 0xff, 0xf0, 0x0a, 0xaa, 0xff, 0x00, 0x3f, 0xc0, 0x05, 0x55, 0x5f, \n0x00, 0x00, 0x00, 0x02, 0xaa, 0xaf, 0x00, 0x00, 0x00, 0x05, 0x55, 0x57, 0x00, 0x00, 0x00, 0x02, \n0xaa, 0xab, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, \n0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, \n\n};\n\n\nconst unsigned char* eating[4] = {\n      eating1,eating2,eating3,eating2\n    };\n\n//const unsigned char apple0 [] PROGMEM = {\nconst unsigned char apple [] PROGMEM = {\n0x00, 0x01, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x0f, 0xe0, 0x3f, 0x1f, 0xc0, 0x00, 0xdf, 0x80, 0x00, \n0x20, 0x00, 0x0f, 0xd7, 0xf0, 0x3f, 0xff, 0xfc, 0x7f, 0xff, 0xfe, 0x78, 0xff, 0xfe, 0xf0, 0x7f, \n0xff, 0xe0, 0x7f, 0xff, 0xe0, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \n0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xfe, 0x7f, 0xff, 0xfe, 0x3f, 0xff, 0xfc, 0x1f, \n0xff, 0xf8, 0x0f, 0xff, 0xf0, 0x07, 0xc3, 0xe0, \n};\n\n\nconst unsigned char steak [] PROGMEM = {\n0x0f, 0xe0, 0x00, 0x3f, 0xf8, 0x00, 0x31, 0xfe, 0x00, 0x6e, 0x7f, 0x00, 0xd1, 0x7f, 0x80, 0xa0, \n0xbf, 0x80, 0xa0, 0xbf, 0xc0, 0xa0, 0xbf, 0xc0, 0xd1, 0x3f, 0xc0, 0xae, 0xff, 0xe0, 0xd1, 0xff, \n0xe0, 0xef, 0xff, 0xe0, 0x77, 0xff, 0xf0, 0x7b, 0xff, 0xd0, 0x3d, 0xff, 0x78, 0x1e, 0xf9, 0xfe, \n0x0f, 0x67, 0xff, 0x07, 0x7f, 0xff, 0x03, 0x9f, 0xfc, 0x03, 0xc3, 0xf9, 0x01, 0xf8, 0xc3, 0x00, \n0xff, 0x1e, 0x00, 0x1f, 0xfe, 0x00, 0x01, 0xfc, \n};\n\n\n\n//ground\nint grassXPos=0;\nfloat treesXPos=-20;\n//sky\nfloat couldsXPos=0;\nconst int sunRadius=3;\nbool sunOrMoon = false;\nconst int moonShadow=2;\nfloat sunXPos=-2*sunRadius;\n//clouds\nconst int cloud1Width=32;\nfloat cloud1XPos=display.width()+cloud1Width;\n\n\nint stars [6][2];\n\n\n\n\n// menus\nbool menuOpened = false;\nint menu=0;\nint subMenu=1;\nbool menuDepth=false;\nbool justOpened=false;\n#define MENUSIZE 8\n#define STRING_SIZE 11\n\nconst char mainMenu[MENUSIZE][8][STRING_SIZE] PROGMEM = {\n  {\nfood\n,\napple\n,\nsteak\n,\nwater\n,NULL},\n  {\ngame\n,NULL},\n  {\nsleep\n,NULL},\n  {\nclean\n,NULL},\n  {\ndoctor\n,NULL},\n  {\ndiscipline\n,NULL},\n  {\nstats\n,\nhunger\n,\nhappiness\n,\nhealth\n,\ndiscipline\n,\nweight\n,\nage\n,NULL},\n  {\nsettings\n,\nsound\n, \nsave\n, NULL},\n};\n\n/* ------- PET STATS ------- */\n\nfloat hunger= EEPROM.read(hunger_address);\nfloat happiness= EEPROM.read(happiness_address);\nfloat health=  EEPROM.read(health_address);\nfloat discipline=  EEPROM.read(discipline_address);\nfloat weight=  EEPROM.read(weight_address);\nfloat age=  EEPROM.read(age_address);\n\n//settings\nbool soundEnabled=true;\n\nint action=0;\nint setting=0;\n\nbool notification = false;\nint notificationBlink=0;\nbool dead=false;\n\nbool sleeping=false;\n\n//game\nbool game=false;\nbool paused=false;\nbool gameOver=false;\nint score = 0;\nint hiScore = EEPROM.read(hi_address);\nint level=0;\nbool newHiScore = false;\nbool jumping=false;\nbool jumpUp=true;\nint jumpPos=0;\nbool obstacle1show = false;\nbool obstacle2show = false;\nint obstacle1XPos = 0;\nint obstacle2XPos = 0;\n\n\nfloat poopometer=0;\nint poops [3] = {\n  0,0,0,\n};\n\n#define ACTIVATED LOW\n\nvoid setup() {\n  pinMode(button1Pin, INPUT);\n  pinMode(button2Pin, INPUT);\n  pinMode(button3Pin, INPUT);\n\n  digitalWrite(button1Pin, HIGH);\n  digitalWrite(button2Pin, HIGH);\n  digitalWrite(button3Pin, HIGH);\n  // or just \n  // pinMode(button1Pin, INPUT_PULLUP)\n  // etc\n\n  pinMode(sound, OUTPUT);\n\n  pinMode(13,OUTPUT);\n\n  randomSeed(analogRead(0));\n\n  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  display.clearDisplay();\n\n  // splash\n  display.setTextColor(WHITE);\n  //display.println(F(\njakobdesign presents\n)); \n  display.print(F(\n jakobdesign presents\n)); \n  display.drawBitmap(15, 24, splash1 , 48, 26, WHITE);\n  display.drawBitmap(48, 24, splash2 , 80, 40, WHITE);\n  display.display();\n\n  //splash tone\n\n  tone(sound,500,200);\n  delay(200);\n  tone(sound,1000,200);\n  delay(400);\n  tone(sound,700,200);\n  delay(200);\n  tone(sound,1100,200);\n\n  delay(2200);\n  // end splash\n\n\n  display.clearDisplay();\n}\n\n\n\nvoid loop() {\n\n  button1State = digitalRead(button1Pin);\n  button2State = digitalRead(button2Pin);\n  button3State = digitalRead(button3Pin);\n  //char* str = \n;\n\n  if(!dead){\n    /* -------- MODIFY PET STATS -------- */\n    // TODO: different gradients regarding to age\n    if(sleeping){\n      hunger-=0.00005;\n      poopometer+=0.00005;\n      if(happiness-0.0001\n0){\n        happiness-=0.0001;\n      }\n      health-=0.00005+countPoops()*0.0001;\n      if(discipline-0.0001\n0){\n        discipline-=0.0001;\n      }\n    }else{\n      hunger-=0.00025;\n      poopometer+=0.00025;\n      if(happiness-0.0002\n0){\n        happiness-=0.0002;\n      }\n      health-=0.0001+countPoops()*0.0001;\n      if(discipline-0.0002\n0){\n        discipline-=0.0002;\n      }\n      //discipline-=0.02;\n    }\n    age+=0.000025;\n    EEPROM.write(age_address, age);\n\n    //diarrhea :) for testing\n    //poopometer+=0.005;\n\n    //health-=1;\n    //health-=countPoops()*0.0001;\n    //health-=countPoops()*0.05;\n\n    if(poopometer\n=10){\n      poopometer=countPoops();\n      poops[round(poopometer)]=random(20,display.width()+32);\n      if(soundEnabled){\n        tone(sound,200,50);\n      }\n      poopometer=0;\n    }\n\n    if((hunger\n19.99975 \n hunger\n20.00025) || (happiness\n19.9998 \n happiness\n20.0002) || (health\n19.9999 \n health\n20.0001) \n soundEnabled){\n      if(soundEnabled){\n        tone(sound,200,50);\n      }\n    }\n\n\n    if(hunger\n=20 || countPoops()\n0 || happiness\n=20 || health\n=20){\n      notification=true;  \n    }\n    if(hunger\n20 \n countPoops()==0 \n happiness\n20 \n health\n20){\n      notification=false;  \n      digitalWrite(13,LOW);\n    }\n\n    if(hunger\n=0 || health\n=0 || happiness\n=0){\n      dead=true;\n      if(soundEnabled){\n        tone(sound,500,500);\n        delay(550);\n        tone(sound,400,500);\n        delay(550);\n        tone(sound,300,600);\n      }\n    }\n\n\n    display.clearDisplay();\n    display.setCursor(0,0);\n\n\n    /* ------- BUTTON PRESS ACTIONS ------- */\n\n    /* ------- BUTTON 1 - MENU ------- */\n    if(button1State==ACTIVATED){\n\n      // JUMP IN GAME\n      if(game){\n\n        if(!jumping \n !paused){\n          if(soundEnabled){\n            tone(sound,200,50);\n          }\n          jumping=true;\n        }\n\n      }else{\n        // MENU\n\n        if(soundEnabled){\n          tone(sound,300,80);\n        }\n\n        if(!menuOpened){\n          menuOpened=true;\n        }else{\n          if(menuDepth){\n\n            if((const char*)pgm_read_word(\n(mainMenu[menu][subMenu+1]))==NULL){\n              subMenu=1;\n            }else{\n              ++subMenu;\n            }\n            setting=100*(menu+1)+subMenu;\n          }else{\n            if(menu==MENUSIZE-1){\n              menu=0;\n            }else{\n              ++menu;\n            }\n\n            if((const char*)pgm_read_word(\n(mainMenu[menu][1]))!=NULL){\n              subMenu=1;\n\n              justOpened=true;\n            }\n            setting=100*(menu+1)+subMenu;\n          }\n        }\n\n        delay(60);\n\n      }\n\n    }\n    /* ------- BUTTON 2 - SELECT ------- */\n    if(button2State==ACTIVATED){\n\n      if(game){\n        if(!gameOver){\n          paused=!paused;\n          if(soundEnabled){\n            tone(sound,600,80);\n          }\n          delay(60);\n        }\n\n      }else{\n\n        if(soundEnabled){\n          tone(sound,600,80);\n        }\n\n        if(menuOpened){\n\n          if(subMenu!=1 \n (const char*)pgm_read_word(\n(mainMenu[menu][1][0]))!=NULL){\n            action=100*(menu+1)+subMenu; \n          }\n          if(subMenu==1 \n (const char*)pgm_read_word(\n(mainMenu[menu][1][0]))==NULL){\n            action=100*(menu+1)+subMenu;\n          }\n          if(subMenu==1 \n (const char*)pgm_read_word(\n(mainMenu[menu][1][0]))!=NULL \n menuDepth){\n            action=100*(menu+1)+subMenu; \n          }\n          if((const char*)pgm_read_word(\n(mainMenu[menu][1][0]))!=NULL){\n            setting=100*(menu+1)+subMenu;\n            menuDepth=true;\n          }\n\n        }else{\n          action=NULL;\n\n          menuOpened=true;\n          menuDepth=true;\n          subMenu=1;\n          menu=6;\n          action=701;\n          setting=701;\n        }\n        justOpened=false;\n\n        delay(60);\n\n      }\n\n    }\n    /* ------- BUTTON 3 - BACK ------- */\n    if(button3State==ACTIVATED){\n      if(soundEnabled){\n        tone(sound,1000,80);\n      }\n\n      if(game || gameOver){\n        walkPos=0;\n        walkXPos=0;\n        walkAnimReverse=false;\n        walkRight=true;\n        walkDirOffset=0;\n        treesXPos=-20;\n        grassXPos=0;\n        obstacle1show=false;\n        obstacle2show=false;\n        jumping=false;\n        jumpPos=0;\n        jumpUp=true;\n        game=false;\n        score=0;\n        newHiScore=false;\n        gameOver=false;\n        level=0;\n        paused=false;\n      }else{\n        if(!menuDepth){\n          menuOpened=false;\n          menu=0;\n          setting=0;\n        }else{\n          menuDepth=false;\n          setting=100*(menu+1)+1;\n        }\n        action=NULL;\n        subMenu=1;\n      }\n\n\n      delay(60);\n    }\n\n\n\n    /* ------- SCENERY AND WALKING ------- */\n\n    //draw sun\n    sunXPos+=0.1;\n    if(sunXPos\ndisplay.width()+2*sunRadius){\n      sunXPos=-2*sunRadius;\n      sunOrMoon=!sunOrMoon;\n    }\n    if(sleeping) {sunOrMoon=true;}\n\n    if(sleeping){\n      sunOrMoon=true;\n    }\n\n    if(!sunOrMoon){\n      display.fillCircle(sunXPos,2*sunRadius,sunRadius,WHITE);\n    }else{\n      display.fillCircle(sunXPos,2*sunRadius,sunRadius,WHITE);\n      display.fillCircle(sunXPos-moonShadow,2*sunRadius,sunRadius,BLACK);\n      //if(walkPos == 5){\n      if(round(cloud1XPos) % 5 == 0){\n        for(int i=0;i\n6;i++){\n          stars[i][0]=random(0,display.width());\n          stars[i][1]=random(0,10);\n        }\n      }else{\n        for(int i=0;i\n6;i++){\n\n          display.drawPixel(stars[i][0],stars[i][1],WHITE);\n        }\n      }\n    }\n\n    //cloud 1\n    cloud1XPos-=0.3;\n    if(cloud1XPos\n-cloud1Width){\n      cloud1XPos=display.width()+cloud1Width;\n    }\n    display.drawBitmap(cloud1XPos, 5, cloud2 , cloud1Width, 5, WHITE);\n\n\n    //mountains\n    display.drawBitmap(0, 7, mountains , 128, 16, WHITE);\n\n    //walk and move ground perspective\n\n    if(game){\n\n\n      /* ------ GAME -----*/\n      level=round(score/10);\n\n      if(jumping \n !gameOver \n !paused){\n        if(jumpUp){\n          jumpPos=jumpPos+1+level;\n          if(jumpPos\n=12){\n            jumpUp=false;\n          }\n        }else{\n          //jumpPos--;\n          jumpPos=jumpPos-1-level;\n          if(jumpPos\n=0){\n            jumpUp=true;\n            jumping=false;\n            if(soundEnabled){\n              tone(sound,100,50);\n            }\n            score+=1;\n          }\n        }\n      }\n\n\n      if(!gameOver \n !paused){\n        if(walkAnimReverse){\n          walkPos-=1;\n          if(walkPos==-1){walkPos=0; walkAnimReverse=false;}\n        }else{\n          walkPos+=1;\n          if(walkPos==3){walkPos=2; walkAnimReverse=true;}\n        }\n\n\n\n        walkXPos+=2;\n        grassXPos+=4;\n        treesXPos=treesXPos+1+level;\n        obstacle1XPos=obstacle1XPos+2+level;\n        obstacle2XPos=obstacle2XPos+2+level;\n\n\n        if(!jumping \n \n            (\n              (obstacle1show \n display.width()-obstacle1XPos\n=20 \n display.width()-obstacle1XPos\n=46)\n              || \n              (obstacle2show \n display.width()-obstacle2XPos\n=20 \n display.width()-obstacle2XPos\n=46)\n            )\n          ){\n          gameOver=true;\n          jumping=true;\n          jumpPos=-2;\n          if(soundEnabled){\n            tone(sound,500,40);\n            delay(50);\n            tone(sound,350,40);\n            delay(50);\n            tone(sound,200,60);\n          }\n\n          if(score\nhiScore){\n            hiScore=score;\n            EEPROM.write(hi_address, hiScore);\n            newHiScore=true;\n          }\n          if(happiness+15\n100){\n            happiness+=15;\n          }else{\n            happiness=100;\n          }\n          health-=1;\n          if(weight-score*0.0025\n5){\n            weight-=score*0.0025;\n            EEPROM.write(weight_address, weight);\n          }\n\n\n        }\n      }\n\n      if(walkXPos==display.width()){\n        walkXPos=0;\n      }\n      if(grassXPos==display.width()){grassXPos=0;}\n      if(treesXPos==display.width()){treesXPos=-128;}\n\n      if(jumping){\n        display.drawBitmap(10, 26-jumpPos, dinoJump , 48, 24, WHITE);\n      }else{\n        display.drawBitmap(10, 26, dinoWalk[walkPos] , 48, 24, WHITE);\n      }\n\n      for(int i=0;i\ndisplay.width()/4+1;i++){\n        display.drawBitmap(-walkXPos+i*8, 50, grass , 8, 6, WHITE);\n      }\n\n\n      // obstacles 1\n\n      if(obstacle1XPos-16\n=display.width()){\n        obstacle1XPos=0;\n        obstacle1show=false;\n      }\n      if(!obstacle1show \n random(1,10)==1 \n obstacle2XPos \n 40){\n        obstacle1show = true;\n        obstacle1XPos=0;\n      }\n      if(obstacle1show){\n        display.drawBitmap(display.width()-obstacle1XPos, 44, obstacle1 , 16, 6, WHITE);\n      }\n\n      // obstacles 2\n      if(obstacle2XPos-16\n=display.width()){\n        obstacle2XPos=0;\n        obstacle2show=false;\n      }\n      if(!obstacle2show \n random(1,10)==1 \n obstacle1XPos \n 40){\n        obstacle2show = true;\n        obstacle2XPos=0;\n      }\n\n      if(obstacle2show){\n        display.drawBitmap(display.width()-obstacle2XPos, 44, obstacle2 , 16, 6, WHITE);\n      }\n\n\n\n\n      //draw front grass\n      for(int i=0;i\ndisplay.width()/16+1;i++){\n        display.drawBitmap(-grassXPos+i*32, 60, grass_front , 32, 8, WHITE);\n      }\n      //draw trees\n      display.drawBitmap(-treesXPos, 23, trees , 112, 20, WHITE);\n\n      if(!gameOver){\n        display.setCursor(0,56);\n        display.setTextColor(WHITE);\n        display.print(F(\nlvl: \n));\n        display.print(level);\n        display.setCursor(64,56);\n        display.setTextColor(WHITE);\n        display.print(F(\npts: \n));\n        display.print(score);\n      }\n\n      if(paused \n round(cloud1XPos)%2==0){\n        display.fillRect(24,11,80,15,BLACK);\n        display.fillRect(25,12,78,13,WHITE);\n        display.setCursor(47,15);\n        display.setTextColor(BLACK);\n        display.println(F(\nPAUSED\n));\n      }\n\n      /* ---------- END GAME ----------*/\n\n    }else{\n\n      /* ------ NO GAME -----*/\n      if(!sleeping){\n        display.drawBitmap(walkXPos, 26, dinoWalk[walkPos+walkDirOffset] , 48, 24, WHITE);\n      }else{\n        display.drawBitmap(walkXPos, 29, dinoWalk[walkPos+walkDirOffset] , 48, 24, WHITE);\n        if(walkRight){\n          if(round(cloud1XPos) % 3 ==0){\n            display.setCursor(walkXPos+48,36);\n            display.print(F(\nZ\n));\n          }else{\n            display.setCursor(walkXPos+46,38);\n            display.print(F(\nz\n));\n          }\n        }else{\n          if(round(cloud1XPos) % 3 ==0){\n            display.setCursor(walkXPos-4,36);\n            display.print(F(\nZ\n));\n          }else{\n            display.setCursor(walkXPos-2,38);\n            display.print(F(\nz\n));\n          }\n        }\n      }\n      if(walkRight){\n        if(!sleeping){\n          walkXPos+=1;\n          grassXPos+=2;\n          treesXPos+=0.5;\n        }\n        if(walkXPos\n80){walkRight=false; walkDirOffset=3;}\n      }else{\n        if(!sleeping){\n          walkXPos-=1;\n          grassXPos-=2;\n          treesXPos-=0.5;\n        }\n        if(walkXPos\n0){walkRight=true; walkDirOffset=0;}  \n      }\n\n      //draw grass (ground)\n      for(int i=0;i\n2*display.width()/4;i++){\n        display.drawBitmap(-walkXPos+i*8, 50, grass , 8, 6, WHITE);\n      }\n      // draw poops\n      for(int i=0; i\n3; i++){\n        if(poops[i]\n0){\n          display.drawBitmap(-walkXPos+poops[i], 44, poop , 16, 6, WHITE);\n        }\n      }\n      //draw front grass\n      for(int i=0;i\n2*display.width()/16;i++){\n        display.drawBitmap(-grassXPos+i*32, 56, grass_front , 32, 8, WHITE);\n      }\n      //draw trees\n      display.drawBitmap(-treesXPos, 23, trees , 112, 20, WHITE);\n\n\n\n      if(!sleeping){\n        if(walkAnimReverse){\n          --walkPos;\n          if(walkPos==-1){walkPos=0; walkAnimReverse=false;}\n        }else{\n          ++walkPos;\n          if(walkPos==3){walkPos=2; walkAnimReverse=true;}\n        }\n      }\n\n    }\n\n\n    /* ------- MENUS AND ACTIONS ------- */\n    //render menu\n    if(menuOpened and !game){\n      display.fillRect(0,0,display.width(),30,BLACK);\n      display.drawRect(0,0,display.width(),29,WHITE);\n      display.fillRect(1,1,display.width()-2,27,BLACK);\n      display.drawRect(0,0,display.width(),12,WHITE);\n      display.setCursor(8,2);\n      display.setTextSize(1);\n      if(menuDepth){\n        display.fillRect(0,0,display.width(),12,WHITE);\n        display.fillRect(1,18,1,5,WHITE);\n        display.fillRect(2,19,1,3,WHITE);\n        display.fillRect(3,20,1,1,WHITE);\n        display.setTextColor(BLACK,WHITE);\n      }else{\n        display.fillRect(1,3,1,5,WHITE);\n        display.fillRect(2,4,1,3,WHITE);\n        display.fillRect(3,5,1,1,WHITE);\n        display.setTextColor(WHITE);\n      }\n      char oneItem [STRING_SIZE];\n      memcpy_P (\noneItem, \nmainMenu[menu][0], sizeof oneItem);\n      //display.println(getItem(menu,0));\n      display.println(oneItem);\n      if(subMenu){\n        display.setTextColor(WHITE);\n        display.setCursor(8,16);\n        char subItem [STRING_SIZE];\n        memcpy_P (\nsubItem, \nmainMenu[menu][subMenu], sizeof subItem);\n        //display.println(getItem(menu,subMenu));\n        display.println(subItem);\n      }\n    }\n\n    //do actions\n\n    if(action\n0){\n\n\n      if((action==101 || action==102 || action==103) \n !sleeping \n random(1,(11-round(discipline/10)))==1 ){\n        //95-100 discipline = 100% chance to feed\n        //85-95 discipline = 50% chance\n        //75-85 discipline = 33.33% chance\n        //65-75 discipline = 25% chance\n        //55-65 discipline = 20% chance\n        //45-55 discipline = 16.67% chance\n        //35-45 discipline = 14.28% chance\n        //25-35 discipline = 12.5% chance\n        //15-25 discipline = 12.5% chance\n        //5-15 discipline = 10% chance\n        //0-5 discipline = 9% chance\n\n        //animate eating\n\n        display.fillRect(0,0,display.width(),display.height(),BLACK);\n        for(int j=0;j\n3;j++){\n          for(int i=0; i\n4; i++){\n            display.clearDisplay();\n            switch(action){\n              case 101:\n                //apple\n                display.drawBitmap(50,40,apple,24,24,WHITE);\n                if(j\n0) display.fillCircle(76,54,12,BLACK);\n                if(j==2) display.fillCircle(47,55,12,BLACK);\n                break;\n              case 102:\n                //steak\n                display.drawBitmap(50,40,steak,24,24,WHITE);\n                if(j\n0) display.fillCircle(76,59,13,BLACK);\n                if(j==2) display.fillCircle(60,63,13,BLACK);\n                break;\n              case 103:\n                //water ripples\n                display.drawCircle(80,55,1+1*i,WHITE);\n                display.drawCircle(80,55,5+2*i,WHITE);\n                display.drawCircle(80,55,10+4*i,WHITE);\n                break;\n\n\n            }\n            display.drawBitmap(80,24,eating[i],48,40,WHITE);\n            delay(150);\n            display.display();\n          }\n        }\n\n\n\n        switch(action){\n          //apple\n          case 101:\n            if(hunger+10\n100){\n              hunger=100;\n              weight+=1;\n            }else{\n              hunger+=10;\n            }\n            if(health+1\n=100){\n              health+=1;\n            }\n            poopometer+=0.02;\n            EEPROM.write(hunger_address, hunger);\n            EEPROM.write(weight_address, weight);\n            break;\n          //steak\n          case 102:\n            if(hunger+20\n100){\n              hunger=100;\n              weight+=2;\n            }else{\n              hunger+=20;\n              weight+=1;\n            }\n            if(health-1\n0){\n              health-=1;\n            }\n            poopometer+=0.05;\n            EEPROM.write(hunger_address, hunger);\n            EEPROM.write(weight_address, weight);\n            break;\n          //water\n          case 103:\n            if(hunger+5\n=100){\n              hunger+=5;\n            }\n            poopometer+=0.01;\n            EEPROM.write(hunger_address, hunger);\n            EEPROM.write(weight_address, weight);\n            break;\n\n        }\n      }else{\n        if(action==101 || action==102 || action==103){\n          if(soundEnabled){\n            tone(sound,500,200);\n            delay(250);\n          }\n        }\n      }\n\n      switch(action){\n        case 201:\n          //game\n          if(!sleeping \n health\n20){\n            game=true;\n            walkPos=0;\n            walkXPos=0;\n            walkAnimReverse=false;\n            walkRight=false;\n            walkDirOffset=2;\n            treesXPos=-20;\n            grassXPos=0;\n          }\n          break;\n        case 301:\n          //sleep\n            sleeping=!sleeping;\n            if(!sleeping) {sunOrMoon=false;}else{\n              for(int i=0;i\n6;i++){\n                stars[i][0]=random(0,display.width());\n                stars[i][1]=random(0,10);\n              }\n            }\n\n          break;\n        case 401:\n          //bath\n            resetPoops();\n          break;\n        case 501:\n          //doctor\n            if(health\n60){\n              health=100;\n              for(int i=0;i\n5;i++){\n                display.clearDisplay();\n                if(i%2!=0){\n                  display.fillRect(32,23,64,16,WHITE);\n                  display.fillRect(56,0,16,64,WHITE);\n                }\n                display.display();\n                EEPROM.write(health_address, health);\n                delay(300);\n              }\n            }\n\n          break;\n        case 601:\n          //discipline\n          if(action==601 \n !sleeping){\n            if(discipline+12\n=100){\n              discipline+=12;\n            }else{\n              discipline=100;\n            }\n            if(happiness-3\n0){\n              happiness-=3;\n            }\n            delay(150);\n            EEPROM.write(happiness_address, happiness);\n            for(int i=0;i\n5;i++){\n              if(soundEnabled){\n                tone(sound,200*i,100);\n              }\n              display.setCursor(100+3*i,32);\n              display.print(F(\n!\n));\n              display.display();\n              delay(150);\n            }\n\n          }\n          break;\n\n          case 801:\n            soundEnabled=!soundEnabled;  \n          break; \n\n          case 802:\n            EEPROM.put(age_address,age);\n            EEPROM.put(weight_address, (weight));\n            EEPROM.write(hunger_address,hunger);\n            EEPROM.write(discipline_address, discipline);\n            EEPROM.write(happiness_address, happiness);\n            EEPROM.write(health_address, health);\n          break;\n      }\n      action=0;\n    }\n\n    //display settings\n    if(setting\n0 and !game){\n      display.setCursor(8,16);\n      if(setting==201){\n        display.println(F(\nincrease happiness\n));\n      }\n      if(setting==301){\n        display.println(F(\nget some rest\n));\n      }\n      if(setting==401){\n        display.println(F(\nkeep it healthy\n));\n      }\n      if(setting==501){\n        display.println(F(\nwhen health is bad\n));\n      }\n      if(setting==601){\n        display.println(F(\nget smarter\n));\n      }\n      if(setting==701 || setting==702 || setting==703 || setting==704){\n        display.drawRect(70,17,52,7,WHITE);\n      }\n      if(setting==701){\n        drawBar(hunger);\n      }\n      if(setting==702){\n        drawBar(happiness);\n      }\n      if(setting==703){\n        drawBar(health);\n      }\n      if(setting==704){\n        drawBar(discipline);\n      }\n      if(setting==705 || setting==706 || setting==801){\n        display.setCursor(80,16);\n      }\n      if(setting==705){\n        //display.setCursor(80,16);\n        display.print(weight,1);\n        display.println(F(\n t\n));\n      }\n      if(setting==706){\n        display.print(age,1);\n        display.println(F(\n y.\n));\n        EEPROM.write(age_address, age);\n      }\n      if(setting==801){\n        if(soundEnabled){\n          display.println(F(\non\n));\n        }else{\n          display.println(F(\noff\n));\n        }\n      }    \n      if(setting==802){\n      }\n    }\n    //display notification\n    if(notification){\n      ++notificationBlink;\n      if(notificationBlink==10){\n        notificationBlink=0;\n      }\n      if(notificationBlink!=1){\n        display.drawRect(117,28,11,11,WHITE);\n        display.setTextColor(WHITE);\n        digitalWrite(13,LOW);\n      }else{\n        display.fillRect(117,28,11,11,WHITE);\n        display.setTextColor(BLACK);\n        digitalWrite(13,HIGH);\n      }\n      display.setCursor(120,30);\n      display.println(F(\n!\n));\n      if(dead){\n         digitalWrite(13,LOW);\n      }\n    }\n\n    // GAME OVER\n    if(gameOver){\n\n\n\n      display.fillRect(15,11,98,43,BLACK);\n      display.drawRect(16,12,96,41,WHITE);\n      display.fillRect(16,12,96,13,WHITE);\n      display.setCursor(36,15);\n      display.setTextColor(BLACK);\n      display.println(F(\nGAME OVER\n));\n      display.setTextColor(WHITE);\n      display.setCursor(21,29);\n      if(newHiScore){\n        display.println(F(\nNEW HI-SCORE!\n));\n        display.setCursor(21,40);\n      }else{\n        display.println(F(\nSCORE:\n));\n        display.setCursor(21,40);\n      }\n      display.println(score);\n\n\n\n    }\n\n    display.display();\n\n  }else{\n    //dead...\n    display.clearDisplay();\n    display.setCursor(0,0);\n    display.setTextColor(WHITE);\n    display.println(F(\nPet died...\\n\\nPress button 1\\nto restart\n));\n    display.display();\n\n    if(button1State==HIGH){\n      if(soundEnabled){\n        tone(sound,300,80);\n        delay(200);\n      }\n      noTone(sound);\n      asm volatile (\n  jmp 0\n);\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\nvoid drawBar(float value){\n  display.fillRect(72,19,48*value/100,3,WHITE);\n}\n\nchar* getItem(int menu, int index){\n  char oneItem [STRING_SIZE];\n  memcpy_P (\noneItem, \nmainMenu[menu][index], sizeof oneItem);  \n  return oneItem;\n}\n\nint countPoops(){\n  int poopsCnt = 0;\n  for(int i=0; i\n3; i++){\n    if(poops[i]\n0){\n      ++poopsCnt;\n    }\n  }\n  return poopsCnt;\n}\n\nvoid resetPoops(){\n  for(int i=0; i\n3; i++){\n    poops[i]=0;\n  }\n}", 
            "title": "Tamaguino"
        }, 
        {
            "location": "/Arduino/Projects/Tamaguino/Tamaguino/#tamaguino", 
            "text": "(Original design by Alojz Jakob)   The Tamaguino is an Arduino spin-off of the classic Tamagotchi, which was a toy introduced in the 90s that allowed users to pick a virtual pet and take responsibility for feeding, playing with, and teaching it. \nThis Tamagotchi system then had consequences for neglecting the pet, and the virtual dinosaur, cat or other strange or wonderful digital animal could die if the tasks weren't performed on a regular basis,\nalthough if you managed to keep your Tamagotchi alive, you would get to help it grow, age and interact with the virtual world around it.    The Tamaguino is a project by Alojz Jakob, released for free under the GNU - General Public License.\nUsing an Arduino, an OLED display, a buzzer, some buttons, a few wires, and some coding of course, Aljoz managed to bring our childhood back to life.\nAfter learning about this project, we just knew we had to make one, and with the following guide, you now you can too!     Material  Quantity      Arduino Pro Mini  1    4cm x 6cm prototyping PCB  1    LiPo rechargeable battery 720 mAh  1    Micro USB LiPo charging circuit  1    128x64 OLED Display  1    Buzzer  1    Push Buttons  3    10K Resistors  3    Jumper wires  9    Small on/off switch  1    Soldering iron  Optional    Solder  Optional    Tamaguino case  Optional", 
            "title": "Tamaguino"
        }, 
        {
            "location": "/Arduino/Projects/Tamaguino/Tamaguino/#diagram", 
            "text": "", 
            "title": "Diagram"
        }, 
        {
            "location": "/Arduino/Projects/Tamaguino/Tamaguino/#instruction", 
            "text": "Solder the bottom row of your button to the bottom row of your PCB as shown in the image below. Your bottom row of pins for your buttons will all be grounded\n    \n    The image above shows how you can ground your buttons without clutter around the GND pin on your Pro Mini  Solder your resistors to the slots next to each of your button's signal pins as shown in the image below, and bridge the solder to your button pins.\n    \n     The image above shows where you can solder your buttons as well as the resistors for an easy layout.  Next you will solder your Pro Mini to the OTHER SIDE of the PCB, try to place your Pro mini about 3 rows above the top pins of your buttons, solder at pin 7, 8, 9, A4, A5, GND and VCC as shown in the image below.\n    \n     The image above shows placement of the Pro Mini as well as highlights the pins for the OLED.  You will now solder the resistors connected to your top signal pins to the respective pins for the code, we used pin 7, 8 and 9 on our Pro Mini  Solder your OLED display to the PCB just above the buttons, so that your OLED pins peak out just above your Pro Mini \u2013 as shown by the orange circle in the image above.  Stick down your LiPo charging module to the top of your PCB.  With your basic components now attached to the PCB, you can start wiring. Solder a wire from pin A4 to the SDA pin on your OLED (shown in blue on the diagram and orange in the images)  Solder a wire from pin A5 to SCL pin on your OLED (shown in yellow in the diagram and red in the images)  Connect GND on your OLED to GND on your mini, and then connect VCC to VCC.  You can now solder your buzzer onto your board as shown in the image. Solder one pin to pin 6 and the other to GND.  On your LiPo charging module, solder one wire from OUT- to GND, and then solder another wire from OUT+ to one side of your switch \u2013 as shown in the image below.  Solder the red wire (V) to B+ on your charging module and the brown/black wire (G) to B- as shown in the image below.\n      Finally, ground the other side of your switch by connecting a GND pin to the GND pin on the microcontroller.", 
            "title": "Instruction"
        }, 
        {
            "location": "/Arduino/Projects/Tamaguino/Tamaguino/#code", 
            "text": "The original code for this project can be found at  Alojz Jakob's Tamaguino page  we have modified the code to save the stats of our dinosaur with a save button.\nThe stats are saved on the EEPROM of our Arduino Pro Mini.\nYou can find our editted version of the code below.  Tamaguino_EEPROM DOWNLOAD  \n/* Tamaguino\n by Alojz Jakob  http://jakobdesign.com \n\n ********** TAMAGUINO ***********\n * Tamagotchi clone for Arduino *\n ********************************\n\n*/\n\n#include  SPI.h \n#include  Wire.h \n#include  Adafruit_GFX.h \n#include  Adafruit_SSD1306.h \n#include  EEPROM.h \n#define OLED_RESET 4\nAdafruit_SSD1306 display(OLED_RESET);\n\nconst int button1Pin = 9;\nconst int button2Pin = 8; \nconst int button3Pin = 7; \n\nconst int sound = 6; \n\nint button1State = 0;\nint button2State = 0;\nint button3State = 0;\nint hi_address = 0;\nint hunger_address=2;\nint happiness_address=3;\nint health_address =4;\nint discipline_address=5;\nint weight_address=6;\nint age_address=7;\n\n// splash 48x26\nconst unsigned char splash1 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, \n0x00, 0x00, 0x00, 0x39, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, \n0x00, 0x00, 0x00, 0x00, 0x07, 0xb9, 0xce, 0x78, 0x0f, 0xc0, 0x0f, 0xf9, 0xcf, 0xfc, 0x1f, 0xe0, \n0x1f, 0xf9, 0xcf, 0xfe, 0x3f, 0xf0, 0x3c, 0x79, 0xcf, 0x1e, 0x38, 0x78, 0x38, 0x39, 0xce, 0x0e, \n0x70, 0x38, 0x38, 0x39, 0xce, 0x0e, 0x70, 0x38, 0x38, 0x39, 0xce, 0x0e, 0x70, 0x38, 0x38, 0x39, \n0xce, 0x0e, 0x70, 0x38, 0x38, 0x39, 0xce, 0x0e, 0x70, 0x38, 0x3c, 0x79, 0xce, 0x0e, 0x78, 0x70, \n0x1f, 0xf9, 0xce, 0x0e, 0x3f, 0xf0, 0x0f, 0xf9, 0xce, 0x0e, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x10, 0x25, 0x37, 0x53, 0x90, 0xe1, 0xb8, 0x29, 0x22, \n0x51, 0xd0, 0x93, 0x90, 0x19, 0x22, 0x52, 0x50, 0x92, 0x10, 0x11, 0x23, 0x73, 0xd0, 0xf1, 0x98, \n0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n};\n//splash dino 80x40\nconst unsigned char splash2 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x1f, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x39, 0xff, 0xe0, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, \n0xe1, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xfe, 0x3e, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x5e, 0xc1, 0xde, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x7d, 0x80, 0x2f, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3a, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x3f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xfe, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x01, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, 0x80, 0x07, 0xf4, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf5, 0xe0, 0x1f, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, \n0xaa, 0xbc, 0x7f, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3d, 0x55, 0x5f, 0xff, 0xa0, 0x00, 0x00, \n0x00, 0x00, 0x00, 0xea, 0xaa, 0xaf, 0xff, 0x40, 0x00, 0x00, 0x00, 0x00, 0x03, 0xd5, 0x55, 0xff, \n0xfe, 0x80, 0x00, 0x00, 0x00, 0x00, 0x07, 0xab, 0xae, 0xbf, 0xfd, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x1f, 0x5f, 0xdf, 0xff, 0xfa, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0xee, 0xfb, 0x6f, 0xf4, 0x00, \n0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x00, 0x01, 0xff, 0xf7, \n0xff, 0xff, 0xd0, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xa0, 0x00, 0x00, 0x00, \n0x00, 0x1f, 0xff, 0xff, 0xff, 0xfd, 0xc0, 0x00, 0x00, 0x00, 0x00, 0xff, 0xdf, 0xff, 0xfe, 0xfe, \n0x80, 0x00, 0x00, 0x00, 0x1f, 0xff, 0xef, 0xef, 0xff, 0x7f, 0x00, 0x00, 0x00, 0x03, 0xff, 0xff, \n0x9f, 0xdf, 0xff, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x1f, 0xa1, 0xfc, 0x7f, 0x80, 0x00, \n0x0f, 0xff, 0xff, 0xe0, 0x1f, 0xb0, 0x03, 0xbf, 0x80, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x0f, 0xc0, \n0x00, 0x00, 0x00, 0x00, 0x7e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n};\n\n\n// front grass 32x10\nconst unsigned char grass_front [] PROGMEM = {\n0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x08, 0x89, 0xc0, 0x48, 0x5c, 0x50, 0x84, \n0x9c, 0x48, 0x50, 0x22, 0x88, 0x80, 0x44, 0x22, 0x40, 0x84, 0x2e, 0x21, 0x49, 0x24, 0xa4, 0xb1, \n};\n//grass 2 (dino walking on) 4x8\nconst unsigned char grass [] PROGMEM = {\n0xff, 0xee, 0xbb, 0x55, 0xaa, 0x11, \n};\n\n//trees\nconst unsigned char trees [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x10, 0x05, 0x00, 0x00, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x15, 0x00, \n0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x55, 0x40, 0x00, 0x55, 0x40, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x54, 0x15, 0x04, 0x40, 0x15, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x02, 0xa0, 0x00, 0x00, 0x01, 0x10, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, \n0x00, 0x28, 0x84, 0x24, 0x40, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x82, 0x00, \n0x00, 0x01, 0x10, 0x00, 0x04, 0x40, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x20, 0x00, 0x00, 0x00, \n0x41, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x04, 0x40, 0x00, 0x88, 0x82, 0x40, 0x91, 0x04, 0x24, \n0x41, 0x10, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x44, 0x44, 0x11, 0x04, 0x10, 0x11, 0x04, 0x01, 0x00, 0x00, \n0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, \n0x02, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x02, 0x10, 0x00, 0x80, 0x00, 0x00, 0x08, 0x00, 0x04, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x20, 0x00, 0x01, 0x00, \n0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, \n};\n\nconst unsigned char mountains [] PROGMEM = {\n0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, \n0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0e, \n0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1f, \n0x03, 0xf8, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, \n0x07, 0x74, 0x07, 0x80, 0x10, 0x00, 0x00, 0x80, 0x00, 0x06, 0x80, 0x00, 0x00, 0x00, 0x00, 0xd5, \n0x0e, 0xc2, 0x0d, 0xc0, 0x28, 0x01, 0x01, 0xc1, 0x00, 0x1f, 0x40, 0x00, 0x00, 0x00, 0x01, 0x28, \n0x1d, 0x13, 0x1b, 0x60, 0x54, 0x03, 0x83, 0xa3, 0x80, 0x36, 0x20, 0x00, 0x00, 0x00, 0x06, 0xd0, \n0x3a, 0x41, 0xb4, 0x30, 0xe2, 0xcc, 0xf7, 0x57, 0xc0, 0xd8, 0x10, 0x00, 0x00, 0x00, 0x19, 0x20, \n0x68, 0x84, 0x49, 0x19, 0xa1, 0x36, 0x5d, 0x2a, 0xa1, 0xa0, 0x10, 0x00, 0x00, 0x00, 0xe6, 0x40, \n0xd2, 0x10, 0xa4, 0x0c, 0x80, 0x8c, 0x1a, 0x15, 0x57, 0x40, 0x88, 0x00, 0x00, 0x1f, 0x38, 0x80, \n0x49, 0x08, 0x00, 0x06, 0x02, 0xc0, 0x24, 0x18, 0x0b, 0x80, 0x05, 0x0b, 0x8c, 0xe0, 0x23, 0x00, \n0xa0, 0x20, 0x00, 0x11, 0x00, 0x00, 0x48, 0x84, 0x84, 0x02, 0x20, 0x5d, 0xf3, 0x00, 0xcd, 0xc0, \n0x50, 0x00, 0x04, 0x04, 0x01, 0x44, 0x00, 0x00, 0x08, 0x00, 0x00, 0x30, 0x04, 0x07, 0x10, 0x20, \n0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x40, 0x40, 0x00, 0x10, \n0x40, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x81, 0x00, 0x00, 0x00, 0x01, 0x11, 0x01, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x80, 0x00, 0x00, 0x20, 0x02, \n};\n\n\nconst unsigned char cloud2 [] PROGMEM = {\n0x04, 0x70, 0x18, 0x00, 0x6e, 0xfb, 0x7c, 0xee, 0xff, 0xff, 0xfd, 0xff, 0x6f, 0xfb, 0x38, 0xee, \n0x07, 0x70, 0x52, 0x00, \n};\n\n\n\n// walking sprites\n// walk right\nconst unsigned char dinoWalk0 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x60, 0x00, \n0x00, 0x00, 0x1f, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x7b, 0xff, \n0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x00, 0x00, 0x03, 0xff, 0x7f, 0xe0, 0x00, 0x00, 0x0f, \n0xf7, 0xde, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x3c, 0x00, 0x00, 0x00, 0x00, 0xbc, 0x7a, 0x00, 0x00,\n};\nconst unsigned char dinoWalk1 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x60, 0x00, \n0x00, 0x00, 0x1f, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x37, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x7f, 0xff, \n0xfc, 0x00, 0x00, 0x00, 0xff, 0x7f, 0xd8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, \n0xbf, 0xda, 0x00, 0x00, 0x00, 0x7f, 0xf8, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x30, 0x18, 0x00, 0x00, \n};\nconst unsigned char dinoWalk2 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x60, 0x00, \n0x00, 0x00, 0x1b, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x7f, 0x7f, \n0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, \n0xbf, 0xfa, 0x00, 0x00, 0x00, 0x7f, 0x78, 0x3c, 0x00, 0x00, 0x00, 0x00, 0xf4, 0x5e, 0x00, 0x00,\n};\n// walk left\nconst unsigned char dinoWalk3 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xe0, 0x00, 0x00, \n0x00, 0x0f, 0x8f, 0xf8, 0x00, 0x00, 0x00, 0x1d, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xde, \n0x00, 0x00, 0x00, 0x1b, 0xff, 0xff, 0x00, 0x00, 0x00, 0x07, 0xfe, 0xff, 0xc0, 0x00, 0x00, 0x00, \n0x7b, 0xef, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x5e, 0x3d, 0x00, 0x00,  \n};\nconst unsigned char dinoWalk4 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xe0, 0x00, 0x00, \n0x00, 0x0f, 0x8f, 0xf8, 0x00, 0x00, 0x00, 0x1d, 0xff, 0xec, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xfe, \n0x00, 0x00, 0x00, 0x1b, 0xfe, 0xff, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, \n0x5b, 0xfd, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x1f, 0xfe, 0x00, 0x00, 0x00, 0x18, 0x0c, 0x00, 0x00, \n};\nconst unsigned char dinoWalk5 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x03, 0xe0, 0x00, 0x00, \n0x00, 0x0f, 0x8f, 0xd8, 0x00, 0x00, 0x00, 0x1d, 0xff, 0xfc, 0x00, 0x00, 0x00, 0x3f, 0xfe, 0xfe, \n0x00, 0x00, 0x00, 0x1b, 0xff, 0xff, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, \n0x5f, 0xfd, 0xf0, 0x00, 0x00, 0x00, 0x3c, 0x1e, 0xfe, 0x00, 0x00, 0x00, 0x7a, 0x2f, 0x00, 0x00,\n};\n\n\n/* --------- GAME SPRITES ---------- */\nconst unsigned char dinoJump [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, \n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x60, 0x00, \n0x00, 0x00, 0x1f, 0xf1, 0xf0, 0x00, 0x00, 0x00, 0x3b, 0xff, 0xb8, 0x00, 0x00, 0x00, 0x7f, 0xdf, \n0xfc, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd8, 0x00, 0x00, 0x03, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x0f, \n0xff, 0xfe, 0x00, 0x00, 0x00, 0x7d, 0xf8, 0x1f, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x07, 0x80, 0x00, \n\n};\n\nconst unsigned char obstacle1 [] PROGMEM = {\n0x00, 0x00, 0x1e, 0x00, 0x2f, 0x00, 0x5e, 0x80, 0x5f, 0xc0, 0xb7, 0xc0, \n};\n\nconst unsigned char obstacle2 [] PROGMEM = {\n0x14, 0x00, 0x08, 0x00, 0x52, 0x00, 0x34, 0x00, 0x69, 0x40, 0xf0, 0x80, \n};\n\nconst unsigned char poop [] PROGMEM = {\n0x80, 0x88, 0x01, 0x81, 0x02, 0xe0, 0x27, 0x10, 0x0b, 0xf0, 0x1c, 0x08, \n};\n\n\n#define WALKSIZE 6\n//const unsigned char* const dinoWalk[WALKSIZE] PROGMEM = {\nconst unsigned char* dinoWalk[WALKSIZE] = {\n      //dinoWalk0,dinoWalk0,dinoWalk1,dinoWalk1,dinoWalk2,dinoWalk2,\n      //dinoWalk3,dinoWalk3,dinoWalk4,dinoWalk4,dinoWalk5,dinoWalk5\n      dinoWalk0,dinoWalk1,dinoWalk2,\n      dinoWalk3,dinoWalk4,dinoWalk5\n    };\nint walkPos=0;\nint walkXPos=0;\nbool walkAnimReverse=false;\nbool walkRight=false;\nint walkDirOffset=2;\n\n\n\n// EATING\n\nconst unsigned char eating1 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, \n0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, \n0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, \n0x00, 0x03, 0x7c, 0x7f, 0xfe, 0x00, 0x00, 0x02, 0xf9, 0xff, 0xfe, 0x00, 0x00, 0x0c, 0xf3, 0xff, \n0xff, 0x00, 0x00, 0x1f, 0xf4, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xf0, 0x7f, 0xff, 0xc0, 0x00, 0xff, \n0xf8, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, \n0x1f, 0xe7, 0xff, 0xe0, 0xff, 0xe0, 0x3f, 0xdf, 0xff, 0xde, 0xff, 0xf0, 0x7f, 0xbf, 0xff, 0xbf, \n0x7f, 0xf0, 0x7f, 0x7f, 0xfe, 0x77, 0xbf, 0xf8, 0x7f, 0x7f, 0xf9, 0xf7, 0xbf, 0xfc, 0x3f, 0xff, \n0xe7, 0xef, 0xbf, 0xfe, 0x5f, 0xfe, 0x1f, 0x1f, 0xbf, 0xff, 0x67, 0xf1, 0xf9, 0x1f, 0xbf, 0xff, \n0x38, 0x0f, 0xe8, 0x3f, 0xbf, 0xff, 0x1f, 0xff, 0xe0, 0x3f, 0xbf, 0xff, 0x0e, 0xfe, 0x40, 0xbf, \n0x6f, 0xff, 0x04, 0x54, 0x00, 0xff, 0x57, 0xff, 0x00, 0x10, 0x01, 0xfe, 0xab, 0xff, 0x00, 0x18, \n0x01, 0xfd, 0x55, 0xff, 0x00, 0x18, 0x05, 0xfa, 0xaa, 0xff, 0x00, 0x1d, 0x27, 0xf1, 0x55, 0x5f, \n0x00, 0x0f, 0x7f, 0xe0, 0xaa, 0xaf, 0x00, 0x07, 0xff, 0x80, 0x55, 0x57, 0x00, 0x03, 0xfe, 0x00, \n0x2a, 0xab, 0x00, 0x01, 0xf0, 0x00, 0x15, 0x55, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xaa, 0x00, 0x00, \n0x00, 0x00, 0x05, 0x55, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, \n\n};\nconst unsigned char eating2 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, \n0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, \n0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, \n0x00, 0x03, 0x7c, 0x7f, 0xfe, 0x00, 0x00, 0x02, 0xf9, 0xff, 0xfe, 0x00, 0x00, 0x0c, 0xf3, 0xff, \n0xff, 0x00, 0x00, 0x1f, 0xf4, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xf0, 0x7f, 0xff, 0xc0, 0x00, 0xff, \n0xf8, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, \n0x1f, 0xe7, 0xff, 0xe0, 0xff, 0xe0, 0x3f, 0xdf, 0xff, 0xde, 0xff, 0xf0, 0x7f, 0xbf, 0xff, 0xbf, \n0x7f, 0xf0, 0x7f, 0x7f, 0xfe, 0x77, 0xbf, 0xf8, 0x7f, 0x7f, 0xf9, 0xf7, 0xbf, 0xfc, 0x3f, 0xff, \n0xe7, 0xef, 0xbf, 0xfe, 0x5f, 0xfe, 0x1f, 0x1f, 0xbf, 0xff, 0x67, 0xf1, 0xf9, 0x1f, 0xbf, 0xff, \n0x38, 0x0f, 0xe8, 0x3f, 0xbf, 0xff, 0x1f, 0xff, 0xe1, 0x7f, 0x3f, 0xff, 0x0e, 0xfe, 0x41, 0xfe, \n0xef, 0xff, 0x04, 0xd4, 0x0b, 0xfd, 0x57, 0xff, 0x00, 0xd4, 0x0f, 0xfa, 0xab, 0xff, 0x00, 0x60, \n0x9f, 0xf5, 0x55, 0xff, 0x00, 0x75, 0xff, 0xca, 0xaa, 0xff, 0x00, 0x3f, 0xff, 0x05, 0x55, 0x5f, \n0x00, 0x1f, 0xfc, 0x02, 0xaa, 0xaf, 0x00, 0x07, 0xc0, 0x01, 0x55, 0x57, 0x00, 0x00, 0x00, 0x00, \n0xaa, 0xab, 0x00, 0x00, 0x00, 0x00, 0x15, 0x55, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xaa, 0x00, 0x00, \n0x00, 0x00, 0x05, 0x55, 0x00, 0x00, 0x00, 0x00, 0x02, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, \n\n};\nconst unsigned char eating3 [] PROGMEM = {\n0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xfc, 0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, \n0x00, 0x00, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x00, \n0x7f, 0xff, 0xf0, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x01, 0xff, 0xff, 0xfc, 0x00, \n0x00, 0x03, 0x7c, 0x7f, 0xfe, 0x00, 0x00, 0x02, 0xf9, 0xff, 0xfe, 0x00, 0x00, 0x0c, 0xf3, 0xff, \n0xff, 0x00, 0x00, 0x1f, 0xf4, 0x7f, 0xff, 0x80, 0x00, 0x7f, 0xf0, 0x7f, 0xff, 0xc0, 0x00, 0xff, \n0xf8, 0xff, 0xff, 0xc0, 0x03, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xe0, \n0x1f, 0xe7, 0xff, 0xe0, 0xff, 0xe0, 0x3f, 0xdf, 0xff, 0xde, 0xff, 0xf0, 0x7f, 0xbf, 0xff, 0xbf, \n0x7f, 0xf0, 0x7f, 0x7f, 0xfe, 0x77, 0xbf, 0xf8, 0x7f, 0x7f, 0xf9, 0xf7, 0xbf, 0xfc, 0x3f, 0xff, \n0xe7, 0xef, 0xbf, 0xfe, 0x5f, 0xfe, 0x1f, 0xdf, 0xbf, 0xff, 0x67, 0xf1, 0xff, 0x3f, 0xbf, 0xff, \n0x38, 0x0f, 0xfc, 0xff, 0xbf, 0xff, 0x1f, 0xff, 0xf3, 0xff, 0x3f, 0xff, 0x0f, 0xff, 0xcf, 0xfe, \n0xef, 0xff, 0x00, 0x38, 0x3f, 0xf9, 0x57, 0xff, 0x07, 0x83, 0xff, 0xea, 0xab, 0xff, 0x01, 0xff, \n0xfe, 0x15, 0x55, 0xff, 0x00, 0xff, 0xf0, 0x0a, 0xaa, 0xff, 0x00, 0x3f, 0xc0, 0x05, 0x55, 0x5f, \n0x00, 0x00, 0x00, 0x02, 0xaa, 0xaf, 0x00, 0x00, 0x00, 0x05, 0x55, 0x57, 0x00, 0x00, 0x00, 0x02, \n0xaa, 0xab, 0x00, 0x00, 0x00, 0x01, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0xaa, 0xaa, 0x00, 0x00, \n0x00, 0x00, 0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x0a, 0xaa, 0x00, 0x00, 0x00, 0x00, 0x01, 0x55, \n\n};\n\n\nconst unsigned char* eating[4] = {\n      eating1,eating2,eating3,eating2\n    };\n\n//const unsigned char apple0 [] PROGMEM = {\nconst unsigned char apple [] PROGMEM = {\n0x00, 0x01, 0xf0, 0x00, 0x07, 0xe0, 0x00, 0x0f, 0xe0, 0x3f, 0x1f, 0xc0, 0x00, 0xdf, 0x80, 0x00, \n0x20, 0x00, 0x0f, 0xd7, 0xf0, 0x3f, 0xff, 0xfc, 0x7f, 0xff, 0xfe, 0x78, 0xff, 0xfe, 0xf0, 0x7f, \n0xff, 0xe0, 0x7f, 0xff, 0xe0, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, \n0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xff, 0xfe, 0x7f, 0xff, 0xfe, 0x3f, 0xff, 0xfc, 0x1f, \n0xff, 0xf8, 0x0f, 0xff, 0xf0, 0x07, 0xc3, 0xe0, \n};\n\n\nconst unsigned char steak [] PROGMEM = {\n0x0f, 0xe0, 0x00, 0x3f, 0xf8, 0x00, 0x31, 0xfe, 0x00, 0x6e, 0x7f, 0x00, 0xd1, 0x7f, 0x80, 0xa0, \n0xbf, 0x80, 0xa0, 0xbf, 0xc0, 0xa0, 0xbf, 0xc0, 0xd1, 0x3f, 0xc0, 0xae, 0xff, 0xe0, 0xd1, 0xff, \n0xe0, 0xef, 0xff, 0xe0, 0x77, 0xff, 0xf0, 0x7b, 0xff, 0xd0, 0x3d, 0xff, 0x78, 0x1e, 0xf9, 0xfe, \n0x0f, 0x67, 0xff, 0x07, 0x7f, 0xff, 0x03, 0x9f, 0xfc, 0x03, 0xc3, 0xf9, 0x01, 0xf8, 0xc3, 0x00, \n0xff, 0x1e, 0x00, 0x1f, 0xfe, 0x00, 0x01, 0xfc, \n};\n\n\n\n//ground\nint grassXPos=0;\nfloat treesXPos=-20;\n//sky\nfloat couldsXPos=0;\nconst int sunRadius=3;\nbool sunOrMoon = false;\nconst int moonShadow=2;\nfloat sunXPos=-2*sunRadius;\n//clouds\nconst int cloud1Width=32;\nfloat cloud1XPos=display.width()+cloud1Width;\n\n\nint stars [6][2];\n\n\n\n\n// menus\nbool menuOpened = false;\nint menu=0;\nint subMenu=1;\nbool menuDepth=false;\nbool justOpened=false;\n#define MENUSIZE 8\n#define STRING_SIZE 11\n\nconst char mainMenu[MENUSIZE][8][STRING_SIZE] PROGMEM = {\n  { food , apple , steak , water ,NULL},\n  { game ,NULL},\n  { sleep ,NULL},\n  { clean ,NULL},\n  { doctor ,NULL},\n  { discipline ,NULL},\n  { stats , hunger , happiness , health , discipline , weight , age ,NULL},\n  { settings , sound ,  save , NULL},\n};\n\n/* ------- PET STATS ------- */\n\nfloat hunger= EEPROM.read(hunger_address);\nfloat happiness= EEPROM.read(happiness_address);\nfloat health=  EEPROM.read(health_address);\nfloat discipline=  EEPROM.read(discipline_address);\nfloat weight=  EEPROM.read(weight_address);\nfloat age=  EEPROM.read(age_address);\n\n//settings\nbool soundEnabled=true;\n\nint action=0;\nint setting=0;\n\nbool notification = false;\nint notificationBlink=0;\nbool dead=false;\n\nbool sleeping=false;\n\n//game\nbool game=false;\nbool paused=false;\nbool gameOver=false;\nint score = 0;\nint hiScore = EEPROM.read(hi_address);\nint level=0;\nbool newHiScore = false;\nbool jumping=false;\nbool jumpUp=true;\nint jumpPos=0;\nbool obstacle1show = false;\nbool obstacle2show = false;\nint obstacle1XPos = 0;\nint obstacle2XPos = 0;\n\n\nfloat poopometer=0;\nint poops [3] = {\n  0,0,0,\n};\n\n#define ACTIVATED LOW\n\nvoid setup() {\n  pinMode(button1Pin, INPUT);\n  pinMode(button2Pin, INPUT);\n  pinMode(button3Pin, INPUT);\n\n  digitalWrite(button1Pin, HIGH);\n  digitalWrite(button2Pin, HIGH);\n  digitalWrite(button3Pin, HIGH);\n  // or just \n  // pinMode(button1Pin, INPUT_PULLUP)\n  // etc\n\n  pinMode(sound, OUTPUT);\n\n  pinMode(13,OUTPUT);\n\n  randomSeed(analogRead(0));\n\n  display.begin(SSD1306_SWITCHCAPVCC, 0x3C);\n  display.clearDisplay();\n\n  // splash\n  display.setTextColor(WHITE);\n  //display.println(F( jakobdesign presents )); \n  display.print(F(  jakobdesign presents )); \n  display.drawBitmap(15, 24, splash1 , 48, 26, WHITE);\n  display.drawBitmap(48, 24, splash2 , 80, 40, WHITE);\n  display.display();\n\n  //splash tone\n\n  tone(sound,500,200);\n  delay(200);\n  tone(sound,1000,200);\n  delay(400);\n  tone(sound,700,200);\n  delay(200);\n  tone(sound,1100,200);\n\n  delay(2200);\n  // end splash\n\n\n  display.clearDisplay();\n}\n\n\n\nvoid loop() {\n\n  button1State = digitalRead(button1Pin);\n  button2State = digitalRead(button2Pin);\n  button3State = digitalRead(button3Pin);\n  //char* str =  ;\n\n  if(!dead){\n    /* -------- MODIFY PET STATS -------- */\n    // TODO: different gradients regarding to age\n    if(sleeping){\n      hunger-=0.00005;\n      poopometer+=0.00005;\n      if(happiness-0.0001 0){\n        happiness-=0.0001;\n      }\n      health-=0.00005+countPoops()*0.0001;\n      if(discipline-0.0001 0){\n        discipline-=0.0001;\n      }\n    }else{\n      hunger-=0.00025;\n      poopometer+=0.00025;\n      if(happiness-0.0002 0){\n        happiness-=0.0002;\n      }\n      health-=0.0001+countPoops()*0.0001;\n      if(discipline-0.0002 0){\n        discipline-=0.0002;\n      }\n      //discipline-=0.02;\n    }\n    age+=0.000025;\n    EEPROM.write(age_address, age);\n\n    //diarrhea :) for testing\n    //poopometer+=0.005;\n\n    //health-=1;\n    //health-=countPoops()*0.0001;\n    //health-=countPoops()*0.05;\n\n    if(poopometer =10){\n      poopometer=countPoops();\n      poops[round(poopometer)]=random(20,display.width()+32);\n      if(soundEnabled){\n        tone(sound,200,50);\n      }\n      poopometer=0;\n    }\n\n    if((hunger 19.99975   hunger 20.00025) || (happiness 19.9998   happiness 20.0002) || (health 19.9999   health 20.0001)   soundEnabled){\n      if(soundEnabled){\n        tone(sound,200,50);\n      }\n    }\n\n\n    if(hunger =20 || countPoops() 0 || happiness =20 || health =20){\n      notification=true;  \n    }\n    if(hunger 20   countPoops()==0   happiness 20   health 20){\n      notification=false;  \n      digitalWrite(13,LOW);\n    }\n\n    if(hunger =0 || health =0 || happiness =0){\n      dead=true;\n      if(soundEnabled){\n        tone(sound,500,500);\n        delay(550);\n        tone(sound,400,500);\n        delay(550);\n        tone(sound,300,600);\n      }\n    }\n\n\n    display.clearDisplay();\n    display.setCursor(0,0);\n\n\n    /* ------- BUTTON PRESS ACTIONS ------- */\n\n    /* ------- BUTTON 1 - MENU ------- */\n    if(button1State==ACTIVATED){\n\n      // JUMP IN GAME\n      if(game){\n\n        if(!jumping   !paused){\n          if(soundEnabled){\n            tone(sound,200,50);\n          }\n          jumping=true;\n        }\n\n      }else{\n        // MENU\n\n        if(soundEnabled){\n          tone(sound,300,80);\n        }\n\n        if(!menuOpened){\n          menuOpened=true;\n        }else{\n          if(menuDepth){\n\n            if((const char*)pgm_read_word( (mainMenu[menu][subMenu+1]))==NULL){\n              subMenu=1;\n            }else{\n              ++subMenu;\n            }\n            setting=100*(menu+1)+subMenu;\n          }else{\n            if(menu==MENUSIZE-1){\n              menu=0;\n            }else{\n              ++menu;\n            }\n\n            if((const char*)pgm_read_word( (mainMenu[menu][1]))!=NULL){\n              subMenu=1;\n\n              justOpened=true;\n            }\n            setting=100*(menu+1)+subMenu;\n          }\n        }\n\n        delay(60);\n\n      }\n\n    }\n    /* ------- BUTTON 2 - SELECT ------- */\n    if(button2State==ACTIVATED){\n\n      if(game){\n        if(!gameOver){\n          paused=!paused;\n          if(soundEnabled){\n            tone(sound,600,80);\n          }\n          delay(60);\n        }\n\n      }else{\n\n        if(soundEnabled){\n          tone(sound,600,80);\n        }\n\n        if(menuOpened){\n\n          if(subMenu!=1   (const char*)pgm_read_word( (mainMenu[menu][1][0]))!=NULL){\n            action=100*(menu+1)+subMenu; \n          }\n          if(subMenu==1   (const char*)pgm_read_word( (mainMenu[menu][1][0]))==NULL){\n            action=100*(menu+1)+subMenu;\n          }\n          if(subMenu==1   (const char*)pgm_read_word( (mainMenu[menu][1][0]))!=NULL   menuDepth){\n            action=100*(menu+1)+subMenu; \n          }\n          if((const char*)pgm_read_word( (mainMenu[menu][1][0]))!=NULL){\n            setting=100*(menu+1)+subMenu;\n            menuDepth=true;\n          }\n\n        }else{\n          action=NULL;\n\n          menuOpened=true;\n          menuDepth=true;\n          subMenu=1;\n          menu=6;\n          action=701;\n          setting=701;\n        }\n        justOpened=false;\n\n        delay(60);\n\n      }\n\n    }\n    /* ------- BUTTON 3 - BACK ------- */\n    if(button3State==ACTIVATED){\n      if(soundEnabled){\n        tone(sound,1000,80);\n      }\n\n      if(game || gameOver){\n        walkPos=0;\n        walkXPos=0;\n        walkAnimReverse=false;\n        walkRight=true;\n        walkDirOffset=0;\n        treesXPos=-20;\n        grassXPos=0;\n        obstacle1show=false;\n        obstacle2show=false;\n        jumping=false;\n        jumpPos=0;\n        jumpUp=true;\n        game=false;\n        score=0;\n        newHiScore=false;\n        gameOver=false;\n        level=0;\n        paused=false;\n      }else{\n        if(!menuDepth){\n          menuOpened=false;\n          menu=0;\n          setting=0;\n        }else{\n          menuDepth=false;\n          setting=100*(menu+1)+1;\n        }\n        action=NULL;\n        subMenu=1;\n      }\n\n\n      delay(60);\n    }\n\n\n\n    /* ------- SCENERY AND WALKING ------- */\n\n    //draw sun\n    sunXPos+=0.1;\n    if(sunXPos display.width()+2*sunRadius){\n      sunXPos=-2*sunRadius;\n      sunOrMoon=!sunOrMoon;\n    }\n    if(sleeping) {sunOrMoon=true;}\n\n    if(sleeping){\n      sunOrMoon=true;\n    }\n\n    if(!sunOrMoon){\n      display.fillCircle(sunXPos,2*sunRadius,sunRadius,WHITE);\n    }else{\n      display.fillCircle(sunXPos,2*sunRadius,sunRadius,WHITE);\n      display.fillCircle(sunXPos-moonShadow,2*sunRadius,sunRadius,BLACK);\n      //if(walkPos == 5){\n      if(round(cloud1XPos) % 5 == 0){\n        for(int i=0;i 6;i++){\n          stars[i][0]=random(0,display.width());\n          stars[i][1]=random(0,10);\n        }\n      }else{\n        for(int i=0;i 6;i++){\n\n          display.drawPixel(stars[i][0],stars[i][1],WHITE);\n        }\n      }\n    }\n\n    //cloud 1\n    cloud1XPos-=0.3;\n    if(cloud1XPos -cloud1Width){\n      cloud1XPos=display.width()+cloud1Width;\n    }\n    display.drawBitmap(cloud1XPos, 5, cloud2 , cloud1Width, 5, WHITE);\n\n\n    //mountains\n    display.drawBitmap(0, 7, mountains , 128, 16, WHITE);\n\n    //walk and move ground perspective\n\n    if(game){\n\n\n      /* ------ GAME -----*/\n      level=round(score/10);\n\n      if(jumping   !gameOver   !paused){\n        if(jumpUp){\n          jumpPos=jumpPos+1+level;\n          if(jumpPos =12){\n            jumpUp=false;\n          }\n        }else{\n          //jumpPos--;\n          jumpPos=jumpPos-1-level;\n          if(jumpPos =0){\n            jumpUp=true;\n            jumping=false;\n            if(soundEnabled){\n              tone(sound,100,50);\n            }\n            score+=1;\n          }\n        }\n      }\n\n\n      if(!gameOver   !paused){\n        if(walkAnimReverse){\n          walkPos-=1;\n          if(walkPos==-1){walkPos=0; walkAnimReverse=false;}\n        }else{\n          walkPos+=1;\n          if(walkPos==3){walkPos=2; walkAnimReverse=true;}\n        }\n\n\n\n        walkXPos+=2;\n        grassXPos+=4;\n        treesXPos=treesXPos+1+level;\n        obstacle1XPos=obstacle1XPos+2+level;\n        obstacle2XPos=obstacle2XPos+2+level;\n\n\n        if(!jumping   \n            (\n              (obstacle1show   display.width()-obstacle1XPos =20   display.width()-obstacle1XPos =46)\n              || \n              (obstacle2show   display.width()-obstacle2XPos =20   display.width()-obstacle2XPos =46)\n            )\n          ){\n          gameOver=true;\n          jumping=true;\n          jumpPos=-2;\n          if(soundEnabled){\n            tone(sound,500,40);\n            delay(50);\n            tone(sound,350,40);\n            delay(50);\n            tone(sound,200,60);\n          }\n\n          if(score hiScore){\n            hiScore=score;\n            EEPROM.write(hi_address, hiScore);\n            newHiScore=true;\n          }\n          if(happiness+15 100){\n            happiness+=15;\n          }else{\n            happiness=100;\n          }\n          health-=1;\n          if(weight-score*0.0025 5){\n            weight-=score*0.0025;\n            EEPROM.write(weight_address, weight);\n          }\n\n\n        }\n      }\n\n      if(walkXPos==display.width()){\n        walkXPos=0;\n      }\n      if(grassXPos==display.width()){grassXPos=0;}\n      if(treesXPos==display.width()){treesXPos=-128;}\n\n      if(jumping){\n        display.drawBitmap(10, 26-jumpPos, dinoJump , 48, 24, WHITE);\n      }else{\n        display.drawBitmap(10, 26, dinoWalk[walkPos] , 48, 24, WHITE);\n      }\n\n      for(int i=0;i display.width()/4+1;i++){\n        display.drawBitmap(-walkXPos+i*8, 50, grass , 8, 6, WHITE);\n      }\n\n\n      // obstacles 1\n\n      if(obstacle1XPos-16 =display.width()){\n        obstacle1XPos=0;\n        obstacle1show=false;\n      }\n      if(!obstacle1show   random(1,10)==1   obstacle2XPos   40){\n        obstacle1show = true;\n        obstacle1XPos=0;\n      }\n      if(obstacle1show){\n        display.drawBitmap(display.width()-obstacle1XPos, 44, obstacle1 , 16, 6, WHITE);\n      }\n\n      // obstacles 2\n      if(obstacle2XPos-16 =display.width()){\n        obstacle2XPos=0;\n        obstacle2show=false;\n      }\n      if(!obstacle2show   random(1,10)==1   obstacle1XPos   40){\n        obstacle2show = true;\n        obstacle2XPos=0;\n      }\n\n      if(obstacle2show){\n        display.drawBitmap(display.width()-obstacle2XPos, 44, obstacle2 , 16, 6, WHITE);\n      }\n\n\n\n\n      //draw front grass\n      for(int i=0;i display.width()/16+1;i++){\n        display.drawBitmap(-grassXPos+i*32, 60, grass_front , 32, 8, WHITE);\n      }\n      //draw trees\n      display.drawBitmap(-treesXPos, 23, trees , 112, 20, WHITE);\n\n      if(!gameOver){\n        display.setCursor(0,56);\n        display.setTextColor(WHITE);\n        display.print(F( lvl:  ));\n        display.print(level);\n        display.setCursor(64,56);\n        display.setTextColor(WHITE);\n        display.print(F( pts:  ));\n        display.print(score);\n      }\n\n      if(paused   round(cloud1XPos)%2==0){\n        display.fillRect(24,11,80,15,BLACK);\n        display.fillRect(25,12,78,13,WHITE);\n        display.setCursor(47,15);\n        display.setTextColor(BLACK);\n        display.println(F( PAUSED ));\n      }\n\n      /* ---------- END GAME ----------*/\n\n    }else{\n\n      /* ------ NO GAME -----*/\n      if(!sleeping){\n        display.drawBitmap(walkXPos, 26, dinoWalk[walkPos+walkDirOffset] , 48, 24, WHITE);\n      }else{\n        display.drawBitmap(walkXPos, 29, dinoWalk[walkPos+walkDirOffset] , 48, 24, WHITE);\n        if(walkRight){\n          if(round(cloud1XPos) % 3 ==0){\n            display.setCursor(walkXPos+48,36);\n            display.print(F( Z ));\n          }else{\n            display.setCursor(walkXPos+46,38);\n            display.print(F( z ));\n          }\n        }else{\n          if(round(cloud1XPos) % 3 ==0){\n            display.setCursor(walkXPos-4,36);\n            display.print(F( Z ));\n          }else{\n            display.setCursor(walkXPos-2,38);\n            display.print(F( z ));\n          }\n        }\n      }\n      if(walkRight){\n        if(!sleeping){\n          walkXPos+=1;\n          grassXPos+=2;\n          treesXPos+=0.5;\n        }\n        if(walkXPos 80){walkRight=false; walkDirOffset=3;}\n      }else{\n        if(!sleeping){\n          walkXPos-=1;\n          grassXPos-=2;\n          treesXPos-=0.5;\n        }\n        if(walkXPos 0){walkRight=true; walkDirOffset=0;}  \n      }\n\n      //draw grass (ground)\n      for(int i=0;i 2*display.width()/4;i++){\n        display.drawBitmap(-walkXPos+i*8, 50, grass , 8, 6, WHITE);\n      }\n      // draw poops\n      for(int i=0; i 3; i++){\n        if(poops[i] 0){\n          display.drawBitmap(-walkXPos+poops[i], 44, poop , 16, 6, WHITE);\n        }\n      }\n      //draw front grass\n      for(int i=0;i 2*display.width()/16;i++){\n        display.drawBitmap(-grassXPos+i*32, 56, grass_front , 32, 8, WHITE);\n      }\n      //draw trees\n      display.drawBitmap(-treesXPos, 23, trees , 112, 20, WHITE);\n\n\n\n      if(!sleeping){\n        if(walkAnimReverse){\n          --walkPos;\n          if(walkPos==-1){walkPos=0; walkAnimReverse=false;}\n        }else{\n          ++walkPos;\n          if(walkPos==3){walkPos=2; walkAnimReverse=true;}\n        }\n      }\n\n    }\n\n\n    /* ------- MENUS AND ACTIONS ------- */\n    //render menu\n    if(menuOpened and !game){\n      display.fillRect(0,0,display.width(),30,BLACK);\n      display.drawRect(0,0,display.width(),29,WHITE);\n      display.fillRect(1,1,display.width()-2,27,BLACK);\n      display.drawRect(0,0,display.width(),12,WHITE);\n      display.setCursor(8,2);\n      display.setTextSize(1);\n      if(menuDepth){\n        display.fillRect(0,0,display.width(),12,WHITE);\n        display.fillRect(1,18,1,5,WHITE);\n        display.fillRect(2,19,1,3,WHITE);\n        display.fillRect(3,20,1,1,WHITE);\n        display.setTextColor(BLACK,WHITE);\n      }else{\n        display.fillRect(1,3,1,5,WHITE);\n        display.fillRect(2,4,1,3,WHITE);\n        display.fillRect(3,5,1,1,WHITE);\n        display.setTextColor(WHITE);\n      }\n      char oneItem [STRING_SIZE];\n      memcpy_P ( oneItem,  mainMenu[menu][0], sizeof oneItem);\n      //display.println(getItem(menu,0));\n      display.println(oneItem);\n      if(subMenu){\n        display.setTextColor(WHITE);\n        display.setCursor(8,16);\n        char subItem [STRING_SIZE];\n        memcpy_P ( subItem,  mainMenu[menu][subMenu], sizeof subItem);\n        //display.println(getItem(menu,subMenu));\n        display.println(subItem);\n      }\n    }\n\n    //do actions\n\n    if(action 0){\n\n\n      if((action==101 || action==102 || action==103)   !sleeping   random(1,(11-round(discipline/10)))==1 ){\n        //95-100 discipline = 100% chance to feed\n        //85-95 discipline = 50% chance\n        //75-85 discipline = 33.33% chance\n        //65-75 discipline = 25% chance\n        //55-65 discipline = 20% chance\n        //45-55 discipline = 16.67% chance\n        //35-45 discipline = 14.28% chance\n        //25-35 discipline = 12.5% chance\n        //15-25 discipline = 12.5% chance\n        //5-15 discipline = 10% chance\n        //0-5 discipline = 9% chance\n\n        //animate eating\n\n        display.fillRect(0,0,display.width(),display.height(),BLACK);\n        for(int j=0;j 3;j++){\n          for(int i=0; i 4; i++){\n            display.clearDisplay();\n            switch(action){\n              case 101:\n                //apple\n                display.drawBitmap(50,40,apple,24,24,WHITE);\n                if(j 0) display.fillCircle(76,54,12,BLACK);\n                if(j==2) display.fillCircle(47,55,12,BLACK);\n                break;\n              case 102:\n                //steak\n                display.drawBitmap(50,40,steak,24,24,WHITE);\n                if(j 0) display.fillCircle(76,59,13,BLACK);\n                if(j==2) display.fillCircle(60,63,13,BLACK);\n                break;\n              case 103:\n                //water ripples\n                display.drawCircle(80,55,1+1*i,WHITE);\n                display.drawCircle(80,55,5+2*i,WHITE);\n                display.drawCircle(80,55,10+4*i,WHITE);\n                break;\n\n\n            }\n            display.drawBitmap(80,24,eating[i],48,40,WHITE);\n            delay(150);\n            display.display();\n          }\n        }\n\n\n\n        switch(action){\n          //apple\n          case 101:\n            if(hunger+10 100){\n              hunger=100;\n              weight+=1;\n            }else{\n              hunger+=10;\n            }\n            if(health+1 =100){\n              health+=1;\n            }\n            poopometer+=0.02;\n            EEPROM.write(hunger_address, hunger);\n            EEPROM.write(weight_address, weight);\n            break;\n          //steak\n          case 102:\n            if(hunger+20 100){\n              hunger=100;\n              weight+=2;\n            }else{\n              hunger+=20;\n              weight+=1;\n            }\n            if(health-1 0){\n              health-=1;\n            }\n            poopometer+=0.05;\n            EEPROM.write(hunger_address, hunger);\n            EEPROM.write(weight_address, weight);\n            break;\n          //water\n          case 103:\n            if(hunger+5 =100){\n              hunger+=5;\n            }\n            poopometer+=0.01;\n            EEPROM.write(hunger_address, hunger);\n            EEPROM.write(weight_address, weight);\n            break;\n\n        }\n      }else{\n        if(action==101 || action==102 || action==103){\n          if(soundEnabled){\n            tone(sound,500,200);\n            delay(250);\n          }\n        }\n      }\n\n      switch(action){\n        case 201:\n          //game\n          if(!sleeping   health 20){\n            game=true;\n            walkPos=0;\n            walkXPos=0;\n            walkAnimReverse=false;\n            walkRight=false;\n            walkDirOffset=2;\n            treesXPos=-20;\n            grassXPos=0;\n          }\n          break;\n        case 301:\n          //sleep\n            sleeping=!sleeping;\n            if(!sleeping) {sunOrMoon=false;}else{\n              for(int i=0;i 6;i++){\n                stars[i][0]=random(0,display.width());\n                stars[i][1]=random(0,10);\n              }\n            }\n\n          break;\n        case 401:\n          //bath\n            resetPoops();\n          break;\n        case 501:\n          //doctor\n            if(health 60){\n              health=100;\n              for(int i=0;i 5;i++){\n                display.clearDisplay();\n                if(i%2!=0){\n                  display.fillRect(32,23,64,16,WHITE);\n                  display.fillRect(56,0,16,64,WHITE);\n                }\n                display.display();\n                EEPROM.write(health_address, health);\n                delay(300);\n              }\n            }\n\n          break;\n        case 601:\n          //discipline\n          if(action==601   !sleeping){\n            if(discipline+12 =100){\n              discipline+=12;\n            }else{\n              discipline=100;\n            }\n            if(happiness-3 0){\n              happiness-=3;\n            }\n            delay(150);\n            EEPROM.write(happiness_address, happiness);\n            for(int i=0;i 5;i++){\n              if(soundEnabled){\n                tone(sound,200*i,100);\n              }\n              display.setCursor(100+3*i,32);\n              display.print(F( ! ));\n              display.display();\n              delay(150);\n            }\n\n          }\n          break;\n\n          case 801:\n            soundEnabled=!soundEnabled;  \n          break; \n\n          case 802:\n            EEPROM.put(age_address,age);\n            EEPROM.put(weight_address, (weight));\n            EEPROM.write(hunger_address,hunger);\n            EEPROM.write(discipline_address, discipline);\n            EEPROM.write(happiness_address, happiness);\n            EEPROM.write(health_address, health);\n          break;\n      }\n      action=0;\n    }\n\n    //display settings\n    if(setting 0 and !game){\n      display.setCursor(8,16);\n      if(setting==201){\n        display.println(F( increase happiness ));\n      }\n      if(setting==301){\n        display.println(F( get some rest ));\n      }\n      if(setting==401){\n        display.println(F( keep it healthy ));\n      }\n      if(setting==501){\n        display.println(F( when health is bad ));\n      }\n      if(setting==601){\n        display.println(F( get smarter ));\n      }\n      if(setting==701 || setting==702 || setting==703 || setting==704){\n        display.drawRect(70,17,52,7,WHITE);\n      }\n      if(setting==701){\n        drawBar(hunger);\n      }\n      if(setting==702){\n        drawBar(happiness);\n      }\n      if(setting==703){\n        drawBar(health);\n      }\n      if(setting==704){\n        drawBar(discipline);\n      }\n      if(setting==705 || setting==706 || setting==801){\n        display.setCursor(80,16);\n      }\n      if(setting==705){\n        //display.setCursor(80,16);\n        display.print(weight,1);\n        display.println(F(  t ));\n      }\n      if(setting==706){\n        display.print(age,1);\n        display.println(F(  y. ));\n        EEPROM.write(age_address, age);\n      }\n      if(setting==801){\n        if(soundEnabled){\n          display.println(F( on ));\n        }else{\n          display.println(F( off ));\n        }\n      }    \n      if(setting==802){\n      }\n    }\n    //display notification\n    if(notification){\n      ++notificationBlink;\n      if(notificationBlink==10){\n        notificationBlink=0;\n      }\n      if(notificationBlink!=1){\n        display.drawRect(117,28,11,11,WHITE);\n        display.setTextColor(WHITE);\n        digitalWrite(13,LOW);\n      }else{\n        display.fillRect(117,28,11,11,WHITE);\n        display.setTextColor(BLACK);\n        digitalWrite(13,HIGH);\n      }\n      display.setCursor(120,30);\n      display.println(F( ! ));\n      if(dead){\n         digitalWrite(13,LOW);\n      }\n    }\n\n    // GAME OVER\n    if(gameOver){\n\n\n\n      display.fillRect(15,11,98,43,BLACK);\n      display.drawRect(16,12,96,41,WHITE);\n      display.fillRect(16,12,96,13,WHITE);\n      display.setCursor(36,15);\n      display.setTextColor(BLACK);\n      display.println(F( GAME OVER ));\n      display.setTextColor(WHITE);\n      display.setCursor(21,29);\n      if(newHiScore){\n        display.println(F( NEW HI-SCORE! ));\n        display.setCursor(21,40);\n      }else{\n        display.println(F( SCORE: ));\n        display.setCursor(21,40);\n      }\n      display.println(score);\n\n\n\n    }\n\n    display.display();\n\n  }else{\n    //dead...\n    display.clearDisplay();\n    display.setCursor(0,0);\n    display.setTextColor(WHITE);\n    display.println(F( Pet died...\\n\\nPress button 1\\nto restart ));\n    display.display();\n\n    if(button1State==HIGH){\n      if(soundEnabled){\n        tone(sound,300,80);\n        delay(200);\n      }\n      noTone(sound);\n      asm volatile (   jmp 0 );\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\nvoid drawBar(float value){\n  display.fillRect(72,19,48*value/100,3,WHITE);\n}\n\nchar* getItem(int menu, int index){\n  char oneItem [STRING_SIZE];\n  memcpy_P ( oneItem,  mainMenu[menu][index], sizeof oneItem);  \n  return oneItem;\n}\n\nint countPoops(){\n  int poopsCnt = 0;\n  for(int i=0; i 3; i++){\n    if(poops[i] 0){\n      ++poopsCnt;\n    }\n  }\n  return poopsCnt;\n}\n\nvoid resetPoops(){\n  for(int i=0; i 3; i++){\n    poops[i]=0;\n  }\n}", 
            "title": "Code"
        }, 
        {
            "location": "/Arduino/Projects/Noise_Light/Noise_light/", 
            "text": "Noise Traffic light\n\n\n(\nOriginal\n design by Innovart Studio)\n\n\n\n\nWe found this project during a casual scroll through \nInstructables\n and we thought it would make a perfect addition to our office. The Noise Traffic light works by detecting the noise levels in the room and keeping a running average of them.\nThe traffic light remains green until a value exceeds the running average by a preset amount, it then switches to orange or red depending on how much higher the incoming value is.\nThis project is super simple and easy for even a beginner maker.\n\n\nMaterial\n\n\nArduino Pro Mini\n\n\nBuzzer\n\n\nNeopixels\n x3\n\n\nMicrophone Module\n\n\nWires\n\n\nResistor\n \n\nUSB micro USB Breakout Board\n\n\nSoldering iron\n\nSolder\n\n\nDiagram\n\n\n\n\nInstructions\n\n\n\n\nSolder a wire to the VCC pin, the GND pin and pin A0 on your Pro Mini as shown in the image below.\n\n\nSolder a wire to one end of your resistor and solder the resistor to pin 6 on your Pro Mini.\n\n\n\n\nYou can then solder your buzzer to pin 4 and GND pin.\n   \n\n   \n The image above shows the connections for the GND, VCC, A0, 6 and 4 pins on the Pro Mini v2 Board\n  \n\n\n\n\n\n\nSolder the wires from step 1 to the corresponding VCC and GND pin on the micophone module.\n\n\n\n\n\n\nSolder one wire to the GND pin on your Breakout Board and another to the VBUS pin. \n\n    You can then solder these wires to any point that connects to GND and VCC respectively. We connected our GND and VCC wires to the pins on our microphone board.\n    \n\n    \n The image above shows wiring on the microphone module, note that VCC and GND wires from other modules can be soldered to the same spot\n\n\n\n\n\n\nSolder the wire from pin 6 on your Pro Mini to the signal pin on your neopixel strip (middle spot).\n\n\n\n\nSolder the GND and VCC pin on the neopixels to corresponding pins on the Pro Mini. Again we connected our wires to the pins on the microphone board.\n\n\nLayout your pixels in the front of your traffic light and place all modules behind this.\n\n\n\n\nCode\n\n\nThe original code comes from \nInnovart Instructables page\n.\n\nWe modified the code to include a running average to use as a base line.\nIf noise value is 3 bigger than the average the yellow light is activated, if the value is 8 bigger the red light and buzzer is activated.\n\n\nTraffic Light Noise Detector DOWNLOAD\n\n\n#include \nAdafruit_NeoPixel.h\n\n#define PIN 6\n#define buzz 4\n#define NUMPIXELS 3\n#include \nRunningAverage.h\n\n\nRunningAverage myRA(20);\nint samples = 0;\nint sensorValue, caseCount;\nint Run_ave;\n  Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);\nvoid setup () \n{\n  Serial.begin (9600);\n  pinMode(buzz, OUTPUT);\n  digitalWrite(buzz, LOW);\n  myRA.clear();\n  pixels.begin();\n}\nvoid loop () \n{\n  sensorValue = analogRead(A0);\n  myRA.addValue(sensorValue);\n  Run_ave = (myRA.getAverage());\n  samples++;\n  Serial.print(\nRunning Average: \n);\n  Serial.println(Run_ave);\n  Serial.println(\nReading:\n);\n\n  if (sensorValue \n Run_ave + 8)\n    {\n      Serial.println(sensorValue);\n      pixels.setPixelColor(0, pixels.Color(0,0,0));\n      pixels.setPixelColor(1, pixels.Color(0,0,0));\n      pixels.setPixelColor(2, pixels.Color(255,0,0));\n      digitalWrite(buzz, HIGH);\n      pixels.show();\n      delay(1000);\n    }\n  else if (sensorValue \n Run_ave + 3)\n    {\n      pixels.setPixelColor(0, pixels.Color(0,0,0));\n      pixels.setPixelColor(1, pixels.Color(255,165,0));\n      pixels.setPixelColor(2, pixels.Color(0,0,0));\n      digitalWrite(buzz, LOW);\n      pixels.show();\n      delay(1500);\n    }\n   else {\n    pixels.setPixelColor(0, pixels.Color(0,255,0));\n    pixels.setPixelColor(1, pixels.Color(0,0,0));\n    pixels.setPixelColor(2, pixels.Color(0,0,0));\n    digitalWrite(buzz, LOW);\n    pixels.show();\n   }\n  if (samples == 300)\n  {\n    samples = 0;\n    myRA.clear();\n  }\n  delay(100);\n  }", 
            "title": "Noise Traffic Light"
        }, 
        {
            "location": "/Arduino/Projects/Noise_Light/Noise_light/#noise-traffic-light", 
            "text": "( Original  design by Innovart Studio)   We found this project during a casual scroll through  Instructables  and we thought it would make a perfect addition to our office. The Noise Traffic light works by detecting the noise levels in the room and keeping a running average of them.\nThe traffic light remains green until a value exceeds the running average by a preset amount, it then switches to orange or red depending on how much higher the incoming value is.\nThis project is super simple and easy for even a beginner maker.", 
            "title": "Noise Traffic light"
        }, 
        {
            "location": "/Arduino/Projects/Noise_Light/Noise_light/#material", 
            "text": "Arduino Pro Mini  Buzzer  Neopixels  x3  Microphone Module  Wires  Resistor   \nUSB micro USB Breakout Board  Soldering iron \nSolder", 
            "title": "Material"
        }, 
        {
            "location": "/Arduino/Projects/Noise_Light/Noise_light/#diagram", 
            "text": "", 
            "title": "Diagram"
        }, 
        {
            "location": "/Arduino/Projects/Noise_Light/Noise_light/#instructions", 
            "text": "Solder a wire to the VCC pin, the GND pin and pin A0 on your Pro Mini as shown in the image below.  Solder a wire to one end of your resistor and solder the resistor to pin 6 on your Pro Mini.   You can then solder your buzzer to pin 4 and GND pin.\n    \n     The image above shows the connections for the GND, VCC, A0, 6 and 4 pins on the Pro Mini v2 Board       Solder the wires from step 1 to the corresponding VCC and GND pin on the micophone module.    Solder one wire to the GND pin on your Breakout Board and another to the VBUS pin.  \n    You can then solder these wires to any point that connects to GND and VCC respectively. We connected our GND and VCC wires to the pins on our microphone board.\n     \n      The image above shows wiring on the microphone module, note that VCC and GND wires from other modules can be soldered to the same spot    Solder the wire from pin 6 on your Pro Mini to the signal pin on your neopixel strip (middle spot).   Solder the GND and VCC pin on the neopixels to corresponding pins on the Pro Mini. Again we connected our wires to the pins on the microphone board.  Layout your pixels in the front of your traffic light and place all modules behind this.", 
            "title": "Instructions"
        }, 
        {
            "location": "/Arduino/Projects/Noise_Light/Noise_light/#code", 
            "text": "The original code comes from  Innovart Instructables page . \nWe modified the code to include a running average to use as a base line.\nIf noise value is 3 bigger than the average the yellow light is activated, if the value is 8 bigger the red light and buzzer is activated.  Traffic Light Noise Detector DOWNLOAD  #include  Adafruit_NeoPixel.h \n#define PIN 6\n#define buzz 4\n#define NUMPIXELS 3\n#include  RunningAverage.h \n\nRunningAverage myRA(20);\nint samples = 0;\nint sensorValue, caseCount;\nint Run_ave;\n  Adafruit_NeoPixel pixels = Adafruit_NeoPixel(NUMPIXELS, PIN, NEO_GRB + NEO_KHZ800);\nvoid setup () \n{\n  Serial.begin (9600);\n  pinMode(buzz, OUTPUT);\n  digitalWrite(buzz, LOW);\n  myRA.clear();\n  pixels.begin();\n}\nvoid loop () \n{\n  sensorValue = analogRead(A0);\n  myRA.addValue(sensorValue);\n  Run_ave = (myRA.getAverage());\n  samples++;\n  Serial.print( Running Average:  );\n  Serial.println(Run_ave);\n  Serial.println( Reading: );\n\n  if (sensorValue   Run_ave + 8)\n    {\n      Serial.println(sensorValue);\n      pixels.setPixelColor(0, pixels.Color(0,0,0));\n      pixels.setPixelColor(1, pixels.Color(0,0,0));\n      pixels.setPixelColor(2, pixels.Color(255,0,0));\n      digitalWrite(buzz, HIGH);\n      pixels.show();\n      delay(1000);\n    }\n  else if (sensorValue   Run_ave + 3)\n    {\n      pixels.setPixelColor(0, pixels.Color(0,0,0));\n      pixels.setPixelColor(1, pixels.Color(255,165,0));\n      pixels.setPixelColor(2, pixels.Color(0,0,0));\n      digitalWrite(buzz, LOW);\n      pixels.show();\n      delay(1500);\n    }\n   else {\n    pixels.setPixelColor(0, pixels.Color(0,255,0));\n    pixels.setPixelColor(1, pixels.Color(0,0,0));\n    pixels.setPixelColor(2, pixels.Color(0,0,0));\n    digitalWrite(buzz, LOW);\n    pixels.show();\n   }\n  if (samples == 300)\n  {\n    samples = 0;\n    myRA.clear();\n  }\n  delay(100);\n  }", 
            "title": "Code"
        }, 
        {
            "location": "/Arduino/Projects/Weather_station/weatherstation/", 
            "text": "Weather station\n\n\n\n\n\nA neat little box that displays the weather conditions of a location of your choice. This project is easy to make and makes a good first time project for beginners. The project switches displays between the current weather, weather forecast for the next 3 days, the current date and time as well as the indoor temperature and humidity. The box also comes with a button that can be coded to switch location.\n\n\nParts Required\n\n\nWemos D1 Mini\n x1\n\n\n4 Pin Oled\n x1\n\n\nDHT22 Humidity and Temp sensor\n x1  \n\n\n3D printed case cover\n x1\n\n\n3D printed case\n x1  \n\n\nHardware set-up\n\n\nThe diagram below shows clearly how to wire up all your components, a table is also included to show corresponding pins between modules.\n\n\n\n\n\n\n\n\n\nWemos D1 Mini pin\n\n\nModule pin\n\n\n\n\n\n\n\n\n\n\nD1\n\n\nSDA (OLED)\n\n\n\n\n\n\nD2\n\n\nSCL (OLED)\n\n\n\n\n\n\nD3\n\n\nData (DHT22)\n\n\n\n\n\n\nD4\n\n\nPin (Button)\n\n\n\n\n\n\nGnd\n\n\nGND (OLED, Button, DHT22)\n\n\n\n\n\n\n5V\n\n\n5V (OLED, Button, DHT22)\n\n\n\n\n\n\n\n\nCode\n\n\nAll the code you will need for your station can be found in the link below, unzip the file to retrieve your files:\n\n\nWeather station code: download", 
            "title": "Weather Station"
        }, 
        {
            "location": "/Arduino/Projects/Weather_station/weatherstation/#weather-station", 
            "text": "A neat little box that displays the weather conditions of a location of your choice. This project is easy to make and makes a good first time project for beginners. The project switches displays between the current weather, weather forecast for the next 3 days, the current date and time as well as the indoor temperature and humidity. The box also comes with a button that can be coded to switch location.", 
            "title": "Weather station"
        }, 
        {
            "location": "/Arduino/Projects/Weather_station/weatherstation/#parts-required", 
            "text": "Wemos D1 Mini  x1  4 Pin Oled  x1  DHT22 Humidity and Temp sensor  x1    3D printed case cover  x1  3D printed case  x1", 
            "title": "Parts Required"
        }, 
        {
            "location": "/Arduino/Projects/Weather_station/weatherstation/#hardware-set-up", 
            "text": "The diagram below shows clearly how to wire up all your components, a table is also included to show corresponding pins between modules.     Wemos D1 Mini pin  Module pin      D1  SDA (OLED)    D2  SCL (OLED)    D3  Data (DHT22)    D4  Pin (Button)    Gnd  GND (OLED, Button, DHT22)    5V  5V (OLED, Button, DHT22)", 
            "title": "Hardware set-up"
        }, 
        {
            "location": "/Arduino/Projects/Weather_station/weatherstation/#code", 
            "text": "All the code you will need for your station can be found in the link below, unzip the file to retrieve your files:  Weather station code: download", 
            "title": "Code"
        }, 
        {
            "location": "/Raspberrypi/Alphabot2/", 
            "text": "ALPHABOT2 -Pi BUILD GUIDE\n\n\n\n\n\nIntroduction\n\n\nThe Alphabot2 is a small compact 2 wheel robot with many easy to connect accessories. \nThe Alphabot2 requires no soldering or extra wiring, all you have to do is snap your connectors together in the right place.\nThe Alphabot2 is perfect for beginners in robotics to help the user grasp a basic understanding of electronics and their interactions.\nThe ALphabot2 does not include the raspberry pi, this has to be purchased seperately.\n\n\nSpecifications\n\n\nAlphabot2 Base equipped with:\n\n\n\n\nUltrasonic module interface\n\n\nAlphaBot2 control interface\n\n\nObstacle avoiding indicators\n\n\n2 roller wheels\n\n\nST188: reflective infrared photoelectric sensor\n\n\nITR20001/T: reflective infrared photoelectric sensor\n\n\nPotentiometer\n\n\nTB6612FNG dual H-bridge motor driver\n\n\nLM393 voltage comparator\n\n\nN20 micro gear motor reduction rate 1:30, 6V/600RPM\n\n\nRubber wheels\n\n\nPower switch\n\n\nBattery holder: supports 14500 batteries\n\n\nWS2812B: true color RGB LEDs\n\n\nPower indicator\n\n\n\n\nAlphabot2 Pi platform equipped with:\n\n\n\n\nAlphaBot2 control interface\n\n\nRaspberry Pi interface\n\n\nServo interface\n\n\nUSB TO UART\n\n\nLM2596: 5V voltage regulator\n\n\nTLC1543: 10-bit AD acquisition chip\n\n\nPCA9685: servo controller\n\n\nCP2102: USB TO UART converter\n\n\nJoystick\n\n\nIR receiver\n\n\nBuzzer\n\n\n\n\nUser Manual\n\n\nWaveshare has created a manual for your Alphabot2-Pi, that is easy to follow and provides links to beginner projects and code.\n\nYou can find the manual here:\n\n\nAlphabot2 Pi", 
            "title": "Raspberry Pi Alphabot 2"
        }, 
        {
            "location": "/Raspberrypi/Alphabot2/#introduction", 
            "text": "The Alphabot2 is a small compact 2 wheel robot with many easy to connect accessories. \nThe Alphabot2 requires no soldering or extra wiring, all you have to do is snap your connectors together in the right place.\nThe Alphabot2 is perfect for beginners in robotics to help the user grasp a basic understanding of electronics and their interactions.\nThe ALphabot2 does not include the raspberry pi, this has to be purchased seperately.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Raspberrypi/Alphabot2/#specifications", 
            "text": "Alphabot2 Base equipped with:   Ultrasonic module interface  AlphaBot2 control interface  Obstacle avoiding indicators  2 roller wheels  ST188: reflective infrared photoelectric sensor  ITR20001/T: reflective infrared photoelectric sensor  Potentiometer  TB6612FNG dual H-bridge motor driver  LM393 voltage comparator  N20 micro gear motor reduction rate 1:30, 6V/600RPM  Rubber wheels  Power switch  Battery holder: supports 14500 batteries  WS2812B: true color RGB LEDs  Power indicator   Alphabot2 Pi platform equipped with:   AlphaBot2 control interface  Raspberry Pi interface  Servo interface  USB TO UART  LM2596: 5V voltage regulator  TLC1543: 10-bit AD acquisition chip  PCA9685: servo controller  CP2102: USB TO UART converter  Joystick  IR receiver  Buzzer", 
            "title": "Specifications"
        }, 
        {
            "location": "/Raspberrypi/Alphabot2/#user-manual", 
            "text": "Waveshare has created a manual for your Alphabot2-Pi, that is easy to follow and provides links to beginner projects and code. \nYou can find the manual here:  Alphabot2 Pi", 
            "title": "User Manual"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/", 
            "text": "Build guide to basic Arduino 2WD robot car\n\n\nEverything you need to know to get you started on building your own Arduino 2WD robot car.\n\n\nRelevant links\n\n\nGet your very own robot car kit here\n.\n\n\nIf you want to read about a noob's experience with building this car for the first time then follow this link!\n\nRobot cars: Because you're never too old for a remote controlled car.\n\n\nParts list\n\n\n\n\n\n\n\n\nComponents\n\n\nQuantity\n\n\n\n\n\n\n\n\n\n\nArduino Sensor Shield v5.0\n\n\n1\n\n\n\n\n\n\nL298N Dual H-Bridge Motor Driver\n\n\n1\n\n\n\n\n\n\nArduino Uno Board\n\n\n1\n\n\n\n\n\n\nServo Mounting Brackets\n\n\n1\n\n\n\n\n\n\nServo Motor (SG90)\n\n\n1\n\n\n\n\n\n\nArduino USB Cable\n\n\n1\n\n\n\n\n\n\nHC-SR04 Sensor\n\n\n1\n\n\n\n\n\n\nDC Motors\n\n\n2\n\n\n\n\n\n\n2.51\u201d Rubber Wheels\n\n\n2\n\n\n\n\n\n\nAcrylic Robot Chassis\n\n\n1\n\n\n\n\n\n\nSpeed Encoders\n\n\n2\n\n\n\n\n\n\nDC 1.5V Battery Holder\n\n\n1\n\n\n\n\n\n\nMotor Blocks\n\n\n4\n\n\n\n\n\n\nON-OFF Switch\n\n\n1\n\n\n\n\n\n\nMetal Ball Caster\n\n\n1\n\n\n\n\n\n\nJumper Wire Set\n\n\n1\n\n\n\n\n\n\nBluetooth Module\n\n\n1\n\n\n\n\n\n\nBrass standoffs\n\n\n4\n\n\n\n\n\n\n\n\n\n\nSuggested Tools\n\n\n\n\n\n\nNeedle nose pliers\n\n\n\n\n\n\nWire cutters\n\n\n\n\n\n\nSoldering iron\n\n\n\n\n\n\nScrewdriver\n\n\n\n\n\n\nBuild Guide\n\n\n\n\n\n\nFirst remove all the adhesive protection from the robot chassis and the motor blocks.\n\n\n\n\n\n\nUse two motor blocks per motor to install the motors on the bottom of the chassis using two long screws and two nuts each and attach the wheels.\n\n\n\n\n\n\n\n\nClip the ON/OFF switch into the rectangular space in the middle of the chassis.\n\n\n\n\n\n\nUsing the 4 Brass standoffs and eight screws attach the metal ball caster to the front bottom of the chassis.\n\n\n\n\n\n\n\n\nThe best place to install the battery holder is the front of the chassis, however all components can be attached as you desire. Attach the battery holder using two screws and two nuts. (optional: add two plastic spacers to raise the battery holder off the chassis).\n\n\n\n\n\n\nAttach the motor driver to the bottom of the chassis in the middle. The motor driver only needs to be attached with two screws and two nuts.\n\n\n\n\n\n\nAttach the Arduino Uno board behind the battery holder and in front of the ON/OFF switch, using two screws and two nuts. (Optional: Add plastic spacers to raise Arduino from the chassis).\nSuggested placements of the battery holder, Uno board and motor driver is shown in the image below.\n\n\n\n\n\n\n\n\nNext up, position the Servo Motor between the two brackets and screw them together as shown in the pictures below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAttach the servo holder to the back of the chassis with two screws and two nuts. The motor can then be clipped in to servo holder.\n\n\n\n\n\n\nNext up is wiring your robot. Firstly, attach the red wire of the battery holder to the \u201cO\u201d part of the ON/OFF switch. This can be done by either hooking the wire on or soldering.\n\n\n\n\n\n\nAttach power and ground wires to the motor through soldering, and connect to motor driver correct connection spots as shown below.\n    \n\n\n\n\n\n\nNow connect a power wire (red) to the \u201cI\u201d part of the switch and connect the other end to the first connection spot of the motor driver (Shown in the pink circle in the above image).\n\n\n\n\n\n\nConnect the black wire of the power holder to the second connection spot on the motor driver as well as another brown wire (Shown in the green circle in the image above). \n\n\n\n\n\n\nConnect another wire from the third connection spot on the motor driver (Shown in yellow circle in the image above) and connect this wire to a Vcc pin on the Arduino shield.\n\n\n\n\n\n\nConnect the brown wire from the second connection spot to a ground pin on the Arduino shield.\n\n\n\n\n\n\nPlace the Arduino Sensor Shield on top of the Arduino board. Ensure you connect the correct matching pins on either board.\n\n\n\n\n\n\nUsing the jumper wires provided connect 4 to the HC-SR04. Colour coordinate your jumpers according to this guide to make your life easier. Connect the wires as shown in the image below.\n\n\n\n\n\n\nConnect the wires of your servo motor as shown in the image below.\n\n\n\n\n\n\nLastly connect the motor driver pins to the Arduino Sensor Shield pins according to the image below.\n\n\n\n\n\n\nNext you will want to connect your Bluetooth module as well. Connect your TXD pin on your Bluetooth module to the RX pin on the Arduino Shield and your RXD pin to your TX pin as per the image below. Connect the VCC pin and GND pin to a V and G pin respectively on the Arduino Shield (at pin 0) as seen below.\n\n\n\n\n\n\nStarting code is provided which includes code to run your motors, link your Bluetooth module as well as primitive obstacle avoidance. You can use this code as your starting pointing to improving your robot\u2019s obstacle maneuvering.\n\n\n\n\n\n\nBelow is a table to show corresponding pin numbers to possibly make your life easier if you are a complete beginner. Pin locations are not set in stone, but will help you if you directly load our sample code without any changes. Below is also a diagram to help you see general wiring of your robot car.\n    \n\n\n\n\n\n\n\n\nYou can also download a copy of our build guide \nhere\n.\n\n\nCode guide\n\n\nBelow is some base code for your robot car including obstacle avoidance.\n\n\n\n\n\n\nRobot car obstacle avoidance code\n\n\n\n\n\n\nRobot car no obstacle avoidance\n\n\n\n\n\n\nAlternatively check out the link below for another build guide.\n\n\n2WD robot build guide", 
            "title": "Arduino 2WD robot car"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#build-guide-to-basic-arduino-2wd-robot-car", 
            "text": "Everything you need to know to get you started on building your own Arduino 2WD robot car.", 
            "title": "Build guide to basic Arduino 2WD robot car"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#relevant-links", 
            "text": "Get your very own robot car kit here .  If you want to read about a noob's experience with building this car for the first time then follow this link! Robot cars: Because you're never too old for a remote controlled car.", 
            "title": "Relevant links"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#parts-list", 
            "text": "Components  Quantity      Arduino Sensor Shield v5.0  1    L298N Dual H-Bridge Motor Driver  1    Arduino Uno Board  1    Servo Mounting Brackets  1    Servo Motor (SG90)  1    Arduino USB Cable  1    HC-SR04 Sensor  1    DC Motors  2    2.51\u201d Rubber Wheels  2    Acrylic Robot Chassis  1    Speed Encoders  2    DC 1.5V Battery Holder  1    Motor Blocks  4    ON-OFF Switch  1    Metal Ball Caster  1    Jumper Wire Set  1    Bluetooth Module  1    Brass standoffs  4", 
            "title": "Parts list"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#suggested-tools", 
            "text": "Needle nose pliers    Wire cutters    Soldering iron    Screwdriver", 
            "title": "Suggested Tools"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#build-guide", 
            "text": "First remove all the adhesive protection from the robot chassis and the motor blocks.    Use two motor blocks per motor to install the motors on the bottom of the chassis using two long screws and two nuts each and attach the wheels.     Clip the ON/OFF switch into the rectangular space in the middle of the chassis.    Using the 4 Brass standoffs and eight screws attach the metal ball caster to the front bottom of the chassis.     The best place to install the battery holder is the front of the chassis, however all components can be attached as you desire. Attach the battery holder using two screws and two nuts. (optional: add two plastic spacers to raise the battery holder off the chassis).    Attach the motor driver to the bottom of the chassis in the middle. The motor driver only needs to be attached with two screws and two nuts.    Attach the Arduino Uno board behind the battery holder and in front of the ON/OFF switch, using two screws and two nuts. (Optional: Add plastic spacers to raise Arduino from the chassis).\nSuggested placements of the battery holder, Uno board and motor driver is shown in the image below.     Next up, position the Servo Motor between the two brackets and screw them together as shown in the pictures below.             Attach the servo holder to the back of the chassis with two screws and two nuts. The motor can then be clipped in to servo holder.    Next up is wiring your robot. Firstly, attach the red wire of the battery holder to the \u201cO\u201d part of the ON/OFF switch. This can be done by either hooking the wire on or soldering.    Attach power and ground wires to the motor through soldering, and connect to motor driver correct connection spots as shown below.\n        Now connect a power wire (red) to the \u201cI\u201d part of the switch and connect the other end to the first connection spot of the motor driver (Shown in the pink circle in the above image).    Connect the black wire of the power holder to the second connection spot on the motor driver as well as another brown wire (Shown in the green circle in the image above).     Connect another wire from the third connection spot on the motor driver (Shown in yellow circle in the image above) and connect this wire to a Vcc pin on the Arduino shield.    Connect the brown wire from the second connection spot to a ground pin on the Arduino shield.    Place the Arduino Sensor Shield on top of the Arduino board. Ensure you connect the correct matching pins on either board.    Using the jumper wires provided connect 4 to the HC-SR04. Colour coordinate your jumpers according to this guide to make your life easier. Connect the wires as shown in the image below.    Connect the wires of your servo motor as shown in the image below.    Lastly connect the motor driver pins to the Arduino Sensor Shield pins according to the image below.    Next you will want to connect your Bluetooth module as well. Connect your TXD pin on your Bluetooth module to the RX pin on the Arduino Shield and your RXD pin to your TX pin as per the image below. Connect the VCC pin and GND pin to a V and G pin respectively on the Arduino Shield (at pin 0) as seen below.    Starting code is provided which includes code to run your motors, link your Bluetooth module as well as primitive obstacle avoidance. You can use this code as your starting pointing to improving your robot\u2019s obstacle maneuvering.    Below is a table to show corresponding pin numbers to possibly make your life easier if you are a complete beginner. Pin locations are not set in stone, but will help you if you directly load our sample code without any changes. Below is also a diagram to help you see general wiring of your robot car.\n         You can also download a copy of our build guide  here .", 
            "title": "Build Guide"
        }, 
        {
            "location": "/Arduino/Arduinokits/2WD car/robotcarkit/#code-guide", 
            "text": "Below is some base code for your robot car including obstacle avoidance.    Robot car obstacle avoidance code    Robot car no obstacle avoidance    Alternatively check out the link below for another build guide.  2WD robot build guide", 
            "title": "Code guide"
        }, 
        {
            "location": "/Arduino/Alphabot/", 
            "text": "ALPHABOT BUILD GUIDE\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTEP 1:\n First and foremost you should connect your Arduino to the Arduino slot on the Alphabot board, as shown in the image below.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTEP 2:\n Attach corresponding cables to their module as shown in the table and picture below.\n\n\n\n\n\n\n\n\nModule\n\n\nWire Number\n\n\n\n\n\n\n\n\n\n\nSpeed Measuing interface\n\n\n3 Wires x 2\n\n\n\n\n\n\nObstacle avoidance interface\n\n\n4 Wires x 2\n\n\n\n\n\n\nTracker Sensor\n\n\n7 Wires x1\n\n\n\n\n\n\nUltrasonic mount\n\n\n4 Wires x1\n\n\n\n\n\n\n\n\n\n\nSTEP 3:\n Attach the ultrasonic sensor to the ultrasonic board as shown in the image below.\n\n\n\n\nSTEP 4:\n The servo slots into the remaining plastic mount as shown below. Clip on the plastic servo horn that comes with your servo, onto the top of the servo.\n\n\n\n\nSTEP 5:\n Attach the obstacle interface board to the corresponding pins found at the bottom front of the Alpha board (5v, GND, AR/LR, DR/DL).\n\n\n\n\nSTEP 6:\n Next you want to connect the speed measuring inerfaces to the pins just below those of the obstacle interface on the Alpha board (5V, GND, CNTR/CNTL)\n\n\n\n\nSTEP 7:\n Attach the tracker sensor to the back of the robot.\n\n\nSTEP 8:\n The alphabot comes with 3 different sizes of spacers, as shown below. Attach the smallest spacers to the plastic mount you linked your servo with.\n Following this you can attach the servo and its mount to the Alphabot board.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTEP 9:\n Attached ultrasonic sensor module to its corresponding mount/board as shown and attach to the servo.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSTEP 10:\n Attach the two yellow wheel motors to the two Motor slots on the bottom of the Alphaboard, as shown. You will be using the 4 T shapped plastic mounts to hold the motor in place.\n\n\n \n  \n\n\nSTEP 11:\n Attach the obstacle avoidance sensors to the end holes of the front side and the servo wires to the 3 pins in the middle. (GND(brown), 5V(red), S1(orange))\n\n\nSTEP 12:\n Slot the speed monitoring sensors (encoder) in the holes next to the battery holder, these holes might be a little bit tight,\n but don't worry, you can use a file to make them a little bit bigger.\n\n\n In the image below, the red circle shows the speed monitoring sensor and the green shows the obstacle avoidance sensors.\n\n\n\n\nSTEP 13:\n Attach wheels to the motors.\n\n\n\n\nSTEP 14:\n Connect rolling metal wheel to stand alone Alphaboard at the bottom as shown.\n\n\n\n\nSTEP 15:\n Connect largest spacers to your bottom standalone Alphabot board, make sure you have at least 6 spacers spread across the board.\n\n\nSTEP 16:\n Connect tracker sensor to bottom stand alone body piece.\n\n\n STEP 17:\nLASTLY! Connect stand alone body to Arduino body at spacer sites.", 
            "title": "Arduino Alphabot"
        }, 
        {
            "location": "/Raspberrypi/Alphabot2/", 
            "text": "ALPHABOT2 -Pi BUILD GUIDE\n\n\n\n\n\nIntroduction\n\n\nThe Alphabot2 is a small compact 2 wheel robot with many easy to connect accessories. \nThe Alphabot2 requires no soldering or extra wiring, all you have to do is snap your connectors together in the right place.\nThe Alphabot2 is perfect for beginners in robotics to help the user grasp a basic understanding of electronics and their interactions.\nThe ALphabot2 does not include the raspberry pi, this has to be purchased seperately.\n\n\nSpecifications\n\n\nAlphabot2 Base equipped with:\n\n\n\n\nUltrasonic module interface\n\n\nAlphaBot2 control interface\n\n\nObstacle avoiding indicators\n\n\n2 roller wheels\n\n\nST188: reflective infrared photoelectric sensor\n\n\nITR20001/T: reflective infrared photoelectric sensor\n\n\nPotentiometer\n\n\nTB6612FNG dual H-bridge motor driver\n\n\nLM393 voltage comparator\n\n\nN20 micro gear motor reduction rate 1:30, 6V/600RPM\n\n\nRubber wheels\n\n\nPower switch\n\n\nBattery holder: supports 14500 batteries\n\n\nWS2812B: true color RGB LEDs\n\n\nPower indicator\n\n\n\n\nAlphabot2 Pi platform equipped with:\n\n\n\n\nAlphaBot2 control interface\n\n\nRaspberry Pi interface\n\n\nServo interface\n\n\nUSB TO UART\n\n\nLM2596: 5V voltage regulator\n\n\nTLC1543: 10-bit AD acquisition chip\n\n\nPCA9685: servo controller\n\n\nCP2102: USB TO UART converter\n\n\nJoystick\n\n\nIR receiver\n\n\nBuzzer\n\n\n\n\nUser Manual\n\n\nWaveshare has created a manual for your Alphabot2-Pi, that is easy to follow and provides links to beginner projects and code.\n\nYou can find the manual here:\n\n\nAlphabot2 Pi", 
            "title": "Raspberry Pi Alphabot 2"
        }, 
        {
            "location": "/Raspberrypi/Alphabot2/#introduction", 
            "text": "The Alphabot2 is a small compact 2 wheel robot with many easy to connect accessories. \nThe Alphabot2 requires no soldering or extra wiring, all you have to do is snap your connectors together in the right place.\nThe Alphabot2 is perfect for beginners in robotics to help the user grasp a basic understanding of electronics and their interactions.\nThe ALphabot2 does not include the raspberry pi, this has to be purchased seperately.", 
            "title": "Introduction"
        }, 
        {
            "location": "/Raspberrypi/Alphabot2/#specifications", 
            "text": "Alphabot2 Base equipped with:   Ultrasonic module interface  AlphaBot2 control interface  Obstacle avoiding indicators  2 roller wheels  ST188: reflective infrared photoelectric sensor  ITR20001/T: reflective infrared photoelectric sensor  Potentiometer  TB6612FNG dual H-bridge motor driver  LM393 voltage comparator  N20 micro gear motor reduction rate 1:30, 6V/600RPM  Rubber wheels  Power switch  Battery holder: supports 14500 batteries  WS2812B: true color RGB LEDs  Power indicator   Alphabot2 Pi platform equipped with:   AlphaBot2 control interface  Raspberry Pi interface  Servo interface  USB TO UART  LM2596: 5V voltage regulator  TLC1543: 10-bit AD acquisition chip  PCA9685: servo controller  CP2102: USB TO UART converter  Joystick  IR receiver  Buzzer", 
            "title": "Specifications"
        }, 
        {
            "location": "/Raspberrypi/Alphabot2/#user-manual", 
            "text": "Waveshare has created a manual for your Alphabot2-Pi, that is easy to follow and provides links to beginner projects and code. \nYou can find the manual here:  Alphabot2 Pi", 
            "title": "User Manual"
        }
    ]
}